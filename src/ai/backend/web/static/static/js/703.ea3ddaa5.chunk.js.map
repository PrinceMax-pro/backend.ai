{"version":3,"file":"static/js/703.ea3ddaa5.chunk.js","mappings":"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","sources":["helper/graphql-transformer.ts","RelayEnvironment.ts","components/DefaultProviders.tsx","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","BAICard.tsx","components/DatePickerISO.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","components/SessionNameFormItem.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { parse, print, visit } from 'graphql';\n\n// Delete nodes in enter\n// Remove unnecessary arguments or directives in leave\nexport function manipulateGraphQLQueryWithClientDirectives(\n  query: string,\n  variables: any = {},\n  isCompatibleWith: (version: string) => boolean,\n) {\n  const ast = parse(query);\n  let newAst = visit(ast, {\n    Field: {\n      enter(node) {\n        if (\n          node?.directives?.find((directive) => {\n            const directiveName = directive.name.value;\n            const firstArgName = directive.arguments?.[0].name.value;\n            // @ts-ignore\n            const firstArgValue = directive.arguments?.[0].value?.value;\n            const arg = directive.arguments?.[0];\n\n            if (directiveName === 'since' && firstArgName === 'version') {\n              if (isCompatibleWith(firstArgValue)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'deprecatedSince' &&\n              firstArgName === 'version'\n            ) {\n              const version =\n                arg?.value.kind === 'StringValue'\n                  ? arg?.value.value\n                  : // @ts-ignore\n                    variables[arg?.value.name.value];\n\n              if (!isCompatibleWith(version)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'skipOnClient' &&\n              firstArgName === 'if'\n            ) {\n              if (arg?.value.kind === 'BooleanValue' && arg.value.value) {\n                return true;\n              }\n\n              if (\n                arg?.value.kind === 'Variable' &&\n                variables[arg.value.name.value]\n              ) {\n                return true;\n              }\n            }\n            return false;\n          })\n        ) {\n          return null;\n        }\n      },\n      leave(node) {\n        // when field has a empty selectionSet, delete it\n        if (\n          node.selectionSet &&\n          node.selectionSet.kind === 'SelectionSet' &&\n          node.selectionSet.selections?.length === 0\n        ) {\n          return null;\n        }\n      },\n    },\n    Directive: {\n      // delete all onClient directives\n      leave(directive) {\n        const directiveName = directive.name.value;\n        if (\n          ['since', 'deprecatedSince', 'skipOnClient'].includes(directiveName)\n        ) {\n          return null;\n        }\n      },\n    },\n  });\n\n  // count used variables\n  const usedVariables: {\n    [key: string]: number;\n  } = {};\n  visit(newAst, {\n    Variable(node) {\n      usedVariables[node.name.value] =\n        (usedVariables[node.name.value] || 0) + 1;\n    },\n  });\n\n  // delete unused variables\n  newAst = visit(newAst, {\n    VariableDefinition: {\n      enter(variableDefinition) {\n        if (usedVariables[variableDefinition.variable.name.value] <= 1) {\n          return null;\n        }\n      },\n    },\n  });\n\n  return print(newAst);\n}\n","// import { createClient } from \"graphql-ws\";\nimport { manipulateGraphQLQueryWithClientDirectives } from './helper/graphql-transformer';\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n  FetchFunction,\n  SubscribeFunction,\n  RelayFeatureFlags,\n} from 'relay-runtime';\n\nRelayFeatureFlags.ENABLE_RELAY_RESOLVERS = true;\n\nconst fetchFn: FetchFunction = async (\n  request,\n  variables,\n  // cacheConfig,\n  // uploadables\n) => {\n  //@ts-ignore\n  if (globalThis.backendaiclient === undefined) {\n    // If globalThis.backendaiclient is not defined, wait for the backend-ai-connected event.\n    await new Promise((resolve) => {\n      const onBackendAIConnected = () => {\n        // When the backend-ai-connected event occurs, remove the event listener and execute the function.\n        document.removeEventListener(\n          'backend-ai-connected',\n          onBackendAIConnected,\n        );\n        resolve(undefined);\n      };\n      document.addEventListener('backend-ai-connected', onBackendAIConnected);\n    });\n  }\n\n  const transformedQuery = manipulateGraphQLQueryWithClientDirectives(\n    request.text || '',\n    variables,\n    (version) => {\n      // @ts-ignore\n      return !globalThis.backendaiclient?.isManagerVersionCompatibleWith(\n        version,\n      );\n    },\n  );\n\n  const reqBody = {\n    query: transformedQuery,\n    variables: variables,\n  };\n\n  //@ts-ignore\n  const reqInfo = globalThis.backendaiclient?.newSignedRequest(\n    'POST',\n    '/admin/gql',\n    reqBody,\n  );\n\n  const result =\n    //@ts-ignore\n    (await globalThis.backendaiclient\n      ?._wrapWithPromise(reqInfo, false, null, 10000, 0)\n      .catch((err: any) => {\n        // console.log(err);\n      })) || {};\n\n  return result;\n};\n\nlet subscribeFn: SubscribeFunction;\n\n// if (typeof window !== \"undefined\") {\n//   // We only want to setup subscriptions if we are on the client.\n//   const subscriptionsClient = createClient({\n//     url: WEBSOCKET_ENDPOINT,\n//   });\n\n//   subscribeFn = (request, variables) => {\n//     // To understand why we return Observable.create<any>,\n//     // please see: https://github.com/enisdenjo/graphql-ws/issues/316#issuecomment-1047605774\n//     return Observable.create<any>((sink) => {\n//       if (!request.text) {\n//         return sink.error(new Error(\"Operation text cannot be empty\"));\n//       }\n\n//       return subscriptionsClient.subscribe(\n//         {\n//           operationName: request.name,\n//           query: request.text,\n//           variables,\n//         },\n//         sink\n//       );\n//     });\n//   };\n// }\n\nfunction createRelayEnvironment() {\n  return new Environment({\n    network: Network.create(fetchFn, subscribeFn),\n    store: new Store(new RecordSource()),\n  });\n}\n\nexport const RelayEnvironment = createRelayEnvironment();\n","import { RelayEnvironment } from '../RelayEnvironment';\n// @ts-ignore\nimport rawFixAntCss from '../fix_antd.css?raw';\nimport { useCustomThemeConfig } from '../helper/customThemeConfig';\nimport { ReactWebComponentProps } from '../helper/react-to-webcomponent';\nimport { useThemeMode } from '../hooks/useThemeMode';\nimport { StyleProvider, createCache } from '@ant-design/cssinjs';\nimport { App, ConfigProvider, theme } from 'antd';\nimport en_US from 'antd/locale/en_US';\nimport ko_KR from 'antd/locale/ko_KR';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/ko';\nimport localeData from 'dayjs/plugin/localeData';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport weekday from 'dayjs/plugin/weekday';\nimport i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport React, {\n  Suspense,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useTranslation, initReactI18next } from 'react-i18next';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RelayEnvironmentProvider } from 'react-relay';\nimport { BrowserRouter, useNavigate } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport { ReactRouter6Adapter } from 'use-query-params/adapters/react-router-6';\n\ndayjs.extend(weekday);\ndayjs.extend(localeData);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\ninterface WebComponentContextType {\n  value?: ReactWebComponentProps['value'];\n  dispatchEvent: ReactWebComponentProps['dispatchEvent'];\n  moveTo: (\n    path: string,\n    params?: {\n      [key in string]?: boolean | string | number;\n    },\n  ) => void;\n}\n\nconst WebComponentContext = React.createContext<WebComponentContextType>(null!);\nconst ShadowRootContext = React.createContext<ShadowRoot>(null!);\nexport const useShadowRoot = () => React.useContext(ShadowRootContext);\nexport const useWebComponentInfo = () => React.useContext(WebComponentContext);\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      suspense: true,\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n\nexport interface DefaultProvidersProps extends ReactWebComponentProps {\n  children?: React.ReactNode;\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .init({\n    backend: {\n      loadPath: '/resources/i18n/{{lng}}.json',\n    },\n    //@ts-ignore\n    lng: globalThis?.backendaioptions?.get('current_language') || 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n    react: {\n      transSupportBasicHtmlNodes: true,\n      transKeepBasicHtmlNodesFor: ['br', 'strong', 'span', 'code', 'p'],\n    },\n  });\n\nconst useCurrentLanguage = () => {\n  const [lang, _setLang] = useState(\n    //@ts-ignore\n    globalThis?.backendaioptions?.get('current_language'),\n  );\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    // TODO: remove this hack to initialize i18next\n    setTimeout(() => i18n?.changeLanguage(lang), 0);\n    // For changing locale globally, use dayjs.locale instead of dayjs().locale\n    dayjs.locale(lang);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      //@ts-ignore\n      _setLang(e?.detail?.lang);\n      //@ts-ignore\n      const lang: string = e?.detail?.lang || 'en';\n      i18n?.changeLanguage(lang);\n      // For changing locale globally, use dayjs.locale instead of dayjs().locale\n      dayjs.locale(lang);\n    };\n    window.addEventListener('langChanged', handler);\n    return () => window.removeEventListener('langChanged', handler);\n  }, [i18n]);\n\n  return [lang] as const;\n};\n\nconst DefaultProviders: React.FC<DefaultProvidersProps> = ({\n  children,\n  value,\n  styles,\n  shadowRoot,\n  dispatchEvent,\n}) => {\n  const cache = useMemo(() => createCache(), []);\n  const [lang] = useCurrentLanguage();\n  const themeConfig = useCustomThemeConfig();\n  const { isDarkMode } = useThemeMode();\n\n  const componentValues = useMemo(() => {\n    return {\n      value,\n      dispatchEvent,\n      moveTo: (path, params) => {\n        dispatchEvent('moveTo', { path, params: params });\n      },\n    } as WebComponentContextType;\n  }, [value, dispatchEvent]);\n  return (\n    <>\n      {RelayEnvironment && (\n        <RelayEnvironmentProvider environment={RelayEnvironment}>\n          <React.StrictMode>\n            <style>\n              {styles}\n              {rawFixAntCss}\n            </style>\n            <QueryClientProvider client={queryClient}>\n              <ShadowRootContext.Provider value={shadowRoot}>\n                <WebComponentContext.Provider value={componentValues}>\n                  <ConfigProvider\n                    // @ts-ignore\n                    getPopupContainer={(triggerNode) => {\n                      return triggerNode?.parentNode || shadowRoot;\n                    }}\n                    //TODO: apply other supported locales\n                    locale={'ko' === lang ? ko_KR : en_US}\n                    theme={{\n                      ...(isDarkMode\n                        ? { ...themeConfig.dark }\n                        : { ...themeConfig.light }),\n                      algorithm: isDarkMode\n                        ? theme.darkAlgorithm\n                        : theme.defaultAlgorithm,\n                    }}\n                  >\n                    <App>\n                      <StyleProvider container={shadowRoot} cache={cache}>\n                        <Suspense fallback=\"\">\n                          <BrowserRouter>\n                            <QueryParamProvider\n                              adapter={ReactRouter6Adapter}\n                              options={\n                                {\n                                  // searchStringToObject: queryString.parse,\n                                  // objectToSearchString: queryString.stringify,\n                                }\n                              }\n                            >\n                              <RoutingEventHandler />\n                              {children}\n                            </QueryParamProvider>\n                          </BrowserRouter>\n                        </Suspense>\n                      </StyleProvider>\n                    </App>\n                  </ConfigProvider>\n                </WebComponentContext.Provider>\n              </ShadowRootContext.Provider>\n            </QueryClientProvider>\n          </React.StrictMode>\n        </RelayEnvironmentProvider>\n      )}\n    </>\n  );\n};\n\nconst RoutingEventHandler = () => {\n  const navigate = useNavigate();\n  useLayoutEffect(() => {\n    const handleNavigate = (e: any) => {\n      const { detail } = e;\n      navigate(detail, {\n        // we don't want to add duplicated one to history.\n        // On lit component side, it adds to history already.\n        replace: true,\n      });\n    };\n    document.addEventListener('react-navigate', handleNavigate);\n\n    return () => {\n      document.removeEventListener('react-navigate', handleNavigate);\n    };\n  }, [navigate]);\n\n  return null;\n};\n\nexport default DefaultProviders;\n","/**\n * @generated SignedSource<<222e47b344f8df1a33028dbc58a85a1a>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n            ? token.colorWarning\n            : status === 'success'\n            ? token.colorSuccess\n            : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerDateProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport React from 'react';\n\ninterface DatePickerISOProps\n  extends Omit<PickerDateProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[{ required: true, message: 'Enter value' }]}\n                >\n                  <Input placeholder=\"Value\" />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                Add variable\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        {\n          max: baiClient._config.maxCountForPreopenPorts,\n          type: 'array',\n          message: t('session.launcher.PreOpenPortMaxCountLimit', {\n            count: baiClient._config.maxCountForPreopenPorts,\n          }),\n        },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { Form, FormItemProps, Input } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  name: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"name\"\n      rules={[\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          pattern: /^(?:[a-zA-Z0-9][-a-zA-Z0-9._]{2,}[a-zA-Z0-9])?$/,\n          message: t(\n            'session.Validation.PleaseFollowSessionNameRule',\n          ).toString(),\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\ninterface Props extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n}\n\nconst VFolderTable: React.FC<Props> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.filter(allFolderList, (vf) => {\n    // keep selected folders\n    if (selectedRowKeys.includes(getRowKey(vf))) {\n      return true;\n    }\n    // filter by search key\n    return (\n      (!filter || filter(vf)) && (!searchKey || vf.name.includes(searchKey))\n    );\n  });\n  // const { token } = theme.useToken();\n  // const searchInput = useRef<InputRef>(null);\n\n  // TODO: set defaults\n  // useUpdateEffect(() => {\n  //   setSelectedRowKeys(defaultSelectedKeys || []);\n  // }, [defaultSelectedKeys]);\n\n  const handleAliasUpdate = (e?: any) => {\n    e?.preventDefault();\n    internalForm\n      .validateFields()\n      .then((values) => {})\n      .catch(() => {})\n      .finally(() => {\n        setAliasMap(\n          _.mapValues(\n            _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n            (v, k) => mapAliasToPath(k, v), // add alias base path\n          ),\n        );\n      });\n  };\n\n  const mapAliasToPath = (name: VFolderKey, input?: string) => {\n    if (_.isEmpty(input)) {\n      return `${aliasBasePath}${name}`;\n    } else if (input?.startsWith('/')) {\n      return input;\n    } else {\n      return `${aliasBasePath}${input}`;\n    }\n  };\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  style={{\n                    zIndex: 10000,\n                  }}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : undefined\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: /^[a-zA-Z0-9_/-]*$/,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        // onPressEnter={handleAliasUpdate}\n                        // onBlur={handleAliasUpdate}\n                        onChange={handleAliasUpdate}\n                        allowClear\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      fixed: 'left',\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, { AliasMap } from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport DatePickerISO from '../components/DatePickerISO';\nimport { useWebComponentInfo } from '../components/DefaultProviders';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport VFolderTableFromItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  BlockOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n  SaveOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Affix,\n  Alert,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  FormInstance,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Typography,\n  message,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nconst INITIAL_FORM_VALUES: SessionLauncherValue = {\n  sessionType: 'interactive',\n  allocationPreset: 'custom',\n  hpcOptimization: {\n    autoEnabled: true,\n    OMP_NUM_THREADS: '1',\n    OPENBLAS_NUM_THREADS: '1',\n  },\n  batch: {\n    enabled: false,\n    command: undefined,\n    scheduleDate: undefined,\n  },\n  envvars: [],\n  ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n};\nconst stepParam = withDefault(NumberParam, 0);\nconst formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n}\n\ntype SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\nconst SessionLauncherPage = () => {\n  let sessionMode: SessionMode = 'normal';\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const [\n    { step: currentStep, formValues: formValuesFromQueryParams, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const navigate = useNavigate();\n  const { moveTo } = useWebComponentInfo();\n  const baiClient = useSuspendedBackendaiClient();\n  const currentProject = useCurrentProjectValue();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(form.getFieldsValue(), ['environments.image']),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  // After first render, set fields value using query params if it is NOT same as initial values\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !==\n      JSON.stringify(formValuesFromQueryParams)\n    ) {\n      form.setFieldsValue(formValuesFromQueryParams);\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // TODO: scroll to top\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  // console.log(form.getFieldError(['resource', 'shmem']));\n  // console.log(form.getFieldValue(['resource']));\n\n  const moveToPreview = () => {\n    // TODO: if handling more async validations, required fetch, use `useTransition`\n    form\n      .validateFields()\n      .catch((e) => {})\n      .finally(() => {\n        setCurrentStep(steps.length - 1);\n      });\n  };\n\n  const startSession = () => {\n    // TODO: support inference mode\n    // TODO: support import mode\n    // TODO: session number\n\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        const [kernelName, architecture] =\n          values.environments.version.split('@');\n        const sessionInfo: CreateSessionInfo = {\n          // TODO: allow_manual_image_name_for_session\n          kernelName,\n          architecture,\n          sessionName: _.isEmpty(values.name)\n            ? generateSessionId()\n            : values.name,\n          config: {\n            type: values.sessionType,\n\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            // TODO: CHECK: Convert to rule??? Automatically increase shared memory to 1GiB\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: _.map(values.ports, (v) => parseInt(v)),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  message.warning(t('session.launcher.SessionAlreadyExists'));\n                  // this.notification.text = _text(\n                  //   'session.launcher.SessionAlreadyExists',\n                  // );\n                  // this.notification.show();\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                console.log(err);\n                throw err;\n                // console.log(err);\n                // if (err && err.message) {\n                //   if ('statusCode' in err && err.statusCode === 408) {\n                //     this.notification.text = _text(\n                //       'session.launcher.sessionStillPreparing',\n                //     );\n                //   } else {\n                //     if (err.description) {\n                //       this.notification.text = PainKiller.relieve(err.description);\n                //     } else {\n                //       this.notification.text = PainKiller.relieve(err.message);\n                //     }\n                //   }\n                //   this.notification.detail = err.message;\n                //   this.notification.show(true, err);\n                // } else if (err && err.title) {\n                //   this.notification.text = PainKiller.relieve(err.title);\n                //   this.notification.show(true, err);\n                // }\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: {\n                [key in string]: any;\n              };\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              } else {\n                // API >= v5\n                appOptions = {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n            navigate('/job', {\n              // replace: true,\n            });\n            moveTo('/job');\n          })\n          .catch(() => {\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        padding: token.paddingSM,\n        width: '100%',\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n    >\n      <style>{customCSS}</style>\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                moveTo(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Popconfirm\n                title={t('button.Reset')}\n                description={t('session.launcher.ResetFormConfirm')}\n                onConfirm={() => {\n                  form.resetFields();\n\n                  navigate('/session/start');\n                }}\n                icon={\n                  <QuestionCircleOutlined style={{ color: token.colorError }} />\n                }\n                okText={t('button.Reset')}\n                okButtonProps={{\n                  danger: true,\n                }}\n              >\n                <Button\n                  danger\n                  type=\"link\"\n                  style={{ paddingRight: 0, paddingLeft: 0 }}\n                >\n                  {t('button.Reset')}\n                </Button>\n              </Popconfirm>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={INITIAL_FORM_VALUES}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      className=\"session-type-radio-group\"\n                      options={[\n                        {\n                          label: (\n                            <Flex\n                              direction=\"column\"\n                              align=\"start\"\n                              style={{ marginBottom: token.marginXS }}\n                            >\n                              <Typography.Text strong>\n                                🏃‍♀️ Make, test and run\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Interactive mode\n                                </Typography.Text>{' '}\n                                allows you to create, test and run code\n                                interactively via jupyter notebook, visual\n                                studio code, etc.\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <Flex direction=\"column\" align=\"start\">\n                              <Typography.Text strong>\n                                ⌚️ Start an long-running task\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Batch mode\n                                </Typography.Text>{' '}\n                                runs your code with multiple node & clusters to\n                                scale your idea\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item label={t('session.launcher.SessionStartTime')}>\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label=\"Environment Variables\">\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems enableNumOfSessions />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('name').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.SessionType')}\n                          span={24}\n                        >\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('name')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                            span={24}\n                          >\n                            {form.getFieldValue('name')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              span={24}\n                            >\n                              <Input.TextArea\n                                readOnly\n                                autoSize\n                                value={form.getFieldValue(['batch', 'command'])}\n                              ></Input.TextArea>\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                              span={24}\n                            >\n                              {dayjs(\n                                form.getFieldValue(['batch', 'scheduleDate']),\n                              ).format('LLL (Z)')}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={2}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.ResourceGroup')}>\n                          {form.getFieldValue('resourceGroup')}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')} span={2}>\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Typography.Text copyable code>\n                              {form.getFieldValue('environments')?.version}\n                            </Typography.Text>\n                          </Flex>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={darcula}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        })\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldWarning(['resource', key]).length > 0\n                          );\n                        }) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <FormResourceNumbers form={form} />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <FormResourceNumbers\n                              form={form}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {form.getFieldValue('mounts')?.length > 0 ? (\n                        <Table\n                          rowKey=\"name\"\n                          size=\"small\"\n                          pagination={false}\n                          columns={[\n                            {\n                              dataIndex: 'name',\n                              title: t('data.folders.Name'),\n                            },\n                            {\n                              dataIndex: 'alias',\n                              title: t('session.launcher.FolderAlias'),\n                              render: (value, record) => {\n                                return _.isEmpty(value) ? (\n                                  <Typography.Text\n                                    type=\"secondary\"\n                                    style={{\n                                      opacity: 0.7,\n                                    }}\n                                  >\n                                    {`/home/work/${record.name}`}\n                                  </Typography.Text>\n                                ) : (\n                                  value\n                                );\n                              },\n                            },\n                          ]}\n                          dataSource={_.map(\n                            form.getFieldValue('mounts'),\n                            (v) => {\n                              return {\n                                name: v,\n                                alias:\n                                  form.getFieldValue('vfoldersAliasMap')?.[v],\n                              };\n                            },\n                          )}\n                        ></Table>\n                      ) : (\n                        <Alert\n                          type=\"warning\"\n                          showIcon\n                          message={t('session.launcher.NoFolderMounted')}\n                        />\n                      )}\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    {/* <Popconfirm\n                    title={t('session.CheckAgainDialog')}\n                    placement=\"topLeft\"\n                    okButtonProps={{\n                      danger: true,\n                    }}\n                    okText={t('button.Reset')}\n                    onConfirm={() => {\n                      // @ts-ignore\n                      form.resetFields({\n\n                      });\n                    }}\n                  >\n                    <Button ghost danger>\n                      {t('button.Reset')}\n                    </Button>\n                  </Popconfirm> */}\n                    {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep !== steps.length - 1 && (\n                      <Button onClick={moveToPreview}>Skip to Review</Button>\n                    )}\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        Previous\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Button\n                        type=\"primary\"\n                        icon={<PlayCircleOutlined />}\n                        disabled={hasError}\n                        onClick={startSession}\n                        loading={isStartingSession}\n                      >\n                        {t('session.launcher.Launch')}\n                      </Button>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        Next <RightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Affix\n            offsetTop={150}\n            // direction=\"column\"\n            style={{ zIndex: 2 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                // handle \"skip to review\" step specifically, because validation\n                if (nextCurrent === steps.length - 1) {\n                  moveToPreview();\n                } else {\n                  setCurrentStep(nextCurrent);\n                }\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Affix>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\nconst FormResourceNumbers: React.FC<{\n  form: FormInstance;\n  containerCount?: number;\n}> = ({ form, containerCount = 1 }) => {\n  return (\n    <>\n      {_.map(\n        _.omit(\n          form.getFieldValue('resource'),\n          'shmem',\n          'accelerator',\n          'acceleratorType',\n        ),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value, 'b')?.number || 0) * containerCount + ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: form.getFieldValue('resource').shmem\n                  ? (iSizeToSize(form.getFieldValue('resource').shmem, 'b')\n                      ?.number || 0) * containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {_.isNumber(form.getFieldValue(['resource', 'accelerator'])) && (\n        <ResourceNumber\n          // @ts-ignore\n          type={form.getFieldValue(['resource', 'acceleratorType'])}\n          value={_.toString(\n            form.getFieldValue(['resource', 'accelerator']) * containerCount,\n          )}\n        />\n      )}\n    </>\n  );\n};\n// const SessionTypeItem: React.FC<{\n//   title: string;\n//   description?: string;\n// }> = ({ title, description }) => {\n//   const { token } = theme.useToken();\n//   return (\n//     <Flex\n//       direction=\"column\"\n//       style={{ padding: token.paddingXS }}\n//       align=\"stretch\"\n//     >\n//       <Typography.Title level={5}>{title}</Typography.Title>\n//       <Typography.Text\n//         type=\"secondary\"\n//         // @ts-ignore\n//         style={{ textWrap: 'wrap' }}\n//       >\n//         {description}\n//       </Typography.Text>\n//     </Flex>\n//   );\n// };\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nconst generateRandomString = () => {\n  let randNum = Math.floor(Math.random() * 52 * 52 * 52);\n\n  const parseNum = (num: number) => {\n    if (num < 26) return String.fromCharCode(65 + num);\n    else return String.fromCharCode(97 + num - 26);\n  };\n\n  let randStr = '';\n\n  for (let i = 0; i < 3; i++) {\n    randStr += parseNum(randNum % 52);\n    randNum = Math.floor(randNum / 52);\n  }\n\n  return randStr;\n};\n\nexport default SessionLauncherPage;\n"],"names":["manipulateGraphQLQueryWithClientDirectives","query","variables","arguments","length","undefined","isCompatibleWith","ast","parse","newAst","visit","Field","enter","node","_node$directives","directives","find","directive","_directive$arguments","_directive$arguments2","_directive$arguments3","_directive$arguments4","directiveName","name","value","firstArgName","firstArgValue","arg","version","kind","leave","_node$selectionSet$se","selectionSet","selections","Directive","includes","usedVariables","Variable","VariableDefinition","variableDefinition","variable","print","RelayFeatureFlags","ENABLE_RELAY_RESOLVERS","fetchFn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","_globalThis$backendai2","_globalThis$backendai3","transformedQuery","reqBody","reqInfo","result","wrap","_context","prev","next","globalThis","backendaiclient","Promise","resolve","document","addEventListener","onBackendAIConnected","removeEventListener","text","_globalThis$backendai","isManagerVersionCompatibleWith","newSignedRequest","_wrapWithPromise","catch","err","t0","sent","abrupt","stop","_x","_x2","apply","RelayEnvironment","Environment","network","Network","create","subscribeFn","store","Store","RecordSource","dayjs","weekday","localeData","localizedFormat","relativeTime","utc","timezone","WebComponentContext","React","ShadowRootContext","useShadowRoot","useWebComponentInfo","queryClient","QueryClient","defaultOptions","queries","suspense","refetchOnWindowFocus","retry","i18n","initReactI18next","use","Backend","init","backend","loadPath","lng","backendaioptions","get","fallbackLng","interpolation","escapeValue","react","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","RoutingEventHandler","navigate","useNavigate","useLayoutEffect","handleNavigate","e","detail","replace","children","styles","shadowRoot","dispatchEvent","cache","useMemo","createCache","_useCurrentLanguage","_useState","useState","_useState2","_slicedToArray","lang","_setLang","useTranslation","useEffect","setTimeout","changeLanguage","handler","_e$detail","_e$detail2","window","useCurrentLanguage","themeConfig","useCustomThemeConfig","isDarkMode","useThemeMode","componentValues","moveTo","path","params","_jsx","_Fragment","RelayEnvironmentProvider","environment","_jsxs","QueryClientProvider","client","Provider","ConfigProvider","getPopupContainer","triggerNode","parentNode","locale","ko_KR","en_US","theme","_objectSpread","dark","light","algorithm","darkAlgorithm","defaultAlgorithm","App","StyleProvider","container","Suspense","fallback","BrowserRouter","QueryParamProvider","adapter","ReactRouter6Adapter","options","_ref$status","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","_objectWithoutProperties","_excluded","token","useToken","_extra","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","onClick","Card","_","borderColor","colorSuccess","onChange","localFormat","pickerProps","_useControllableValue","useControllableValue","setControllableValue","DatePicker","_value$tz","newValue","format","tz","toISOString","formItemProps","props","inputRef","useRef","t","form","Form","useFormInstance","List","fields","_ref2","add","remove","Flex","direction","gap","align","map","_ref3","index","key","restField","_excluded2","Item","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","reject","Input","ref","placeholder","fieldNames","field","validateFields","MinusCircleOutlined","noStyle","current","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","Tag","color","Object","assign","_objectDestructuringEmpty","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","max","_config","maxCountForPreopenPorts","count","values","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","toString","allowClear","_ref$vFolderFrgmt","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","require","tagValues","r","w","d","perm","hasPermission","toUpperCase","compact","DoubleTag","filter","_ref$showAliasInput","showAliasInput","_ref$selectedRowKeys","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","_ref$aliasBasePath","aliasBasePath","controlledAliasMap","aliasMap","onChangeAliasMap","_ref$rowKey","rowKey","tableProps","getRowKey","record","defaultValue","_useControllableValue2","setSelectedRowKeys","_useControllableValue3","_useControllableValue4","setAliasMap","_Form$useForm","useForm","internalForm","setFieldsValue","startsWith","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","_useTransition","useTransition","_useTransition2","isPendingRefetch","startRefetchTransition","allFolderList","useTanQuery","queryKey","queryFn","method","url","concat","id","staleTime","data","searchKey","setSearchKey","displayingFolders","vf","handleAliasUpdate","then","finally","getFieldsValue","k","mapAliasToPath","input","columns","title","Typography","Text","fontWeight","Tooltip","zIndex","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","display","height","TextHighlighter","keyword","shouldUpdate","cur","allAliasPathMap","reduce","_validator","fixed","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","justify","target","loading","ReloadOutlined","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","_toConsumableArray","useWatch","hidden","arr","valuePropName","trigger","VFolderTable","setFieldValue","pagination","INITIAL_FORM_VALUES","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","FormResourceNumbers","_ref5","_ref5$containerCount","containerCount","_iSizeToSize","_iSizeToSize2","ResourceNumber","iSizeToSize","number","opts","shmem","generateSessionId","possible","charAt","Math","floor","random","generateRandomString","num","randNum","randStr","String","fromCharCode","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue8","sessionMode","isStartingSession","setIsStartingSession","_useQueryParams","useQueryParams","step","formValues","redirectTo","StringParam","_useQueryParams2","_useQueryParams2$","currentStep","formValuesFromQueryParams","setQuery","syncFormToURLWithDebounce","useDebounceFn","console","log","leading","wait","trailing","run","setCurrentStep","nextStep","screens","Grid","useBreakpoint","JSON","stringify","preserve","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","moveToPreview","padding","paddingSM","justifyContent","Breadcrumb","items","href","maxWidth","Title","level","marginTop","Popconfirm","description","onConfirm","resetFields","okText","okButtonProps","danger","paddingRight","paddingLeft","BlockOutlined","disabled","onFormChange","info","layout","requiredMark","initialValues","Radio","className","marginXS","strong","code","SessionNameFormItem","TextArea","autoSize","Checkbox","checked","_prev$batch","_next$batch","_form$getFieldValue","_callee2","_context2","isBefore","_x3","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableNumOfSessions","Switch","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","Row","gutter","marginMD","Col","xs","sm","InputNumber","min","stringMode","VFolderTableFromItem","PortSelectFormItem","BAICard","size","getFieldError","findIndex","Descriptions","span","readOnly","idx","column","ImageMetaIcon","image","copyable","SyntaxHighlighter","darcula","codeTagProps","customStyle","margin","join","getFieldWarning","Alert","showIcon","opacity","_form$getFieldValue7","alias","SaveOutlined","LeftOutlined","PlayCircleOutlined","_values$environments$","_values$environments$2","kernelName","architecture","sessionInfo","sessionPromises","environments","split","sessionName","config","startsAt","startupCommand","domain","domainName","scaling_group","resourceGroup","cluster_mode","cluster_size","maxWaitSeconds","cpu","resource","mem","compareNumberWithUnits","accelerator","_defineProperty","acceleratorType","mounts","mount_map","vfoldersAliasMap","env","preopen_ports","ports","num_of_sessions","formattedSessionName","createIfNotExists","res","created","warning","all","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","appLauncher","showLauncher","ghost","RightOutlined","lg","Affix","offsetTop","Steps","nextCurrent","s"],"sourceRoot":""}