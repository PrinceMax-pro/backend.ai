{"version":3,"file":"static/js/4911.c078c555.chunk.js","mappings":"uPAYA,MA8CA,EA9CwCA,IAOjC,IAPkC,OACvCC,EAAS,UAAS,iBAClBC,EAAgB,mBAChBC,EAAkB,MAClBC,EAAK,MACLC,KACGC,GACJN,EACC,MAAM,MAAEO,GAAUC,EAAAA,EAAMC,WAClBC,EACJN,GACCF,IACCS,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,KAAK,OACLC,KACa,UAAXb,GACEU,EAAAA,EAAAA,KAACI,EAAAA,EAAkB,CAACC,aAAcT,EAAMU,aAC3B,YAAXhB,GACFU,EAAAA,EAAAA,KAACO,EAAAA,EAAc,CAACF,aAAcT,EAAMY,oBAClCC,EAENC,QAASlB,EAAmBmB,SAE3BpB,UAGLkB,EACF,OACET,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CACHC,UAAsB,UAAXvB,EAAqB,iBAAmB,GACnDI,MAAOoB,IAAAA,OAASpB,EAAO,CACrBqB,YACa,UAAXzB,EACIM,EAAMU,WACK,YAAXhB,EACEM,EAAMY,aACK,YAAXlB,EACEM,EAAMoB,aACD,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOqB,cAEnBtB,MAAOM,KACHJ,GACJ,C,0HCxCN,MA4BA,EA5BsBsB,EAAAA,YAGpB,CAAA5B,EAAmD6B,KAAS,IAA3D,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,KAAgBC,GAAajC,EACjD,MAAO,CAAEkC,IAAwBC,EAAAA,EAAAA,GAAqB,CACpDL,QACAC,aAGF,OACEpB,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CACTP,IAAKA,EACLC,MAAOA,EAAQO,IAAMP,QAASV,EAC9BW,SAAWD,IAAW,IAADQ,EAAAC,EAAAC,EACff,IAAAA,QAAUK,KACZA,EAAQA,EAAM,IAEhB,MAAMW,EAAWT,EACR,QADmBM,EACxBR,SAAK,IAAAQ,OAAA,EAALA,EAAOI,SACF,QADUH,EACfT,SAAK,IAAAS,GAAM,QAANC,EAALD,EAAOI,YAAI,IAAAH,OAAN,EAALA,EAAaI,cAEjBV,EAAqBO,EAAS,KAE5BR,GACJ,G,uEChCN,MAQA,EARsDjC,IAA0B,IAAzB,MAAE8B,KAAUe,GAAO7C,EACxE,MAAM8C,EAAOC,EAAAA,EAAKC,kBAIlB,OAHAC,EAAAA,EAAAA,YAAU,KACRH,EAAKI,cAAcL,EAAMM,KAAMrB,EAAM,GACpC,CAACA,EAAOgB,EAAMD,EAAMM,QAChBxC,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,IAAKP,EAAOQ,QAAM,GAAG,C,2JCExC,MAAMC,EAAW,KACXC,EAAW,MAyHJC,EAAkCC,IAIxC,IAJyC,QAC9CC,EAAO,MACP5B,KACG6B,GACJF,EACC,OACE9C,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CACFC,OAAQH,GAAWI,EAAehC,QAASV,EAAY,SACnDuC,GACJ,EAIOG,EAAkBC,IAE7B,GAAIC,EAAeD,GAAU,CAC3B,MAAME,EAAiBF,EAAQG,MAAM,MAC9BC,EAAOC,GAAOH,EAAeI,KAAKC,GAAMC,SAASD,KACxD,OAAOH,GAASb,GAAYc,GAAOb,CACrC,CAAO,OACLQ,IAAYQ,SAASR,GAASS,YAC9BD,SAASR,IAAYT,GACrBiB,SAASR,IAAYR,CAIX,EAGDS,EAAkBS,IAC7B,MAAMR,EAAiBQ,EAAUP,MAAM,KACvC,GAA8B,IAA1BD,EAAeS,OAAc,CAC/B,MAAOP,EAAOC,GAAOH,EAAeI,KAAKC,GAAMC,SAASD,KACxD,OAAOH,GAASC,CAClB,CACA,OAAO,CAAK,EAQDO,EACXC,GAEOnD,IAAAA,QACLA,IAAAA,IAAMmD,GAASN,GACbN,EAAeM,GAVmBG,KACtC,MAAON,EAAOC,GAAOK,EAAUP,MAAM,KAAKG,KAAKC,GAAMC,SAASD,KAC9D,OAAO7C,IAAAA,MAAQ0C,EAAOC,EAAM,EAAE,EAQNS,CAAwBP,GAAKC,SAASD,MAwChE,EAhN4CtE,IAGrC,IAHsC,KAC3CmD,EAAO,WACJ2B,GACJ9E,EACC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,MACRC,GAAYC,EAAAA,EAAAA,MACZpC,EAAOC,EAAAA,EAAKC,kBAClB,OACErC,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,EAAE,qCACT5B,KAAMA,EACNiC,SAASzE,EAAAA,EAAAA,KAAC0E,EAAAA,GAAK,CAACC,QAAQ,wCACxBlF,MAAO2E,EAAE,0CACTQ,MAAO,CACL,MACEC,UAASA,CAACC,EAAMb,IAEZD,EAA6BC,GAAQF,QACrCO,EAAUS,QAAQC,wBAEXC,QAAQC,UAERD,QAAQE,OACb,IAAIC,MACFhB,EAAE,4CAA6C,CAC7CiB,MAAOf,EAAUS,QAAQC,8BAOrC,MAEEH,UAASA,CAACC,EAAMb,IAEZnD,IAAAA,MAAQmD,GAASN,GACRC,SAASD,GAAGE,aAAeF,GAAKN,EAAeM,KAGjDsB,QAAQC,UAERD,QAAQE,OACb,IAAIC,MAAMhB,EAAE,0CAKpB,MACES,SAAAA,CAAUC,EAAMb,GACd,MAAMqB,EAAWtB,EAA6BC,GAC9C,OACEnD,IAAAA,MAAQwE,GAAWC,GACVA,GAAQ5C,GAAY4C,GAAQ3C,IAG9BqC,QAAQC,UAEVD,QAAQE,OACb,IAAIC,MAAMhB,EAAE,sCAEhB,IAEF,MACES,SAAAA,CAAUC,EAAMb,GAEd,MAAMqB,EAAWtB,EAA6BC,GAC9C,OAAInD,IAAAA,KAAOwE,GAAUvB,SAAWuB,EAASvB,OAChCkB,QAAQC,UAEVD,QAAQE,OACb,IAAIC,MAAMhB,EAAE,oCAEhB,QAGAD,EAAaxD,UAEjBX,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,CACLC,KAAK,OACLC,UAAYxD,IACV,MAAMyD,EACJ7E,IAAAA,OACEkD,EAA6B7B,EAAKyD,cAAcpD,KAC/CmB,GAAMA,IAAMC,SAAS1B,EAAMf,SAC5B4C,OAAS,EACb,OACE/D,EAAAA,EAAAA,KAAC6C,EAAO,CACNE,QAAS4C,EACTE,SAAU3D,EAAM2D,SAChBC,QAAS5D,EAAM4D,QACfC,YAAcC,IACZA,EAAEC,iBACFD,EAAEE,iBAAiB,EAErB/E,MAAOe,EAAMf,MAAMR,SAElBuB,EAAMsC,OACC,EAGd9E,MAAO,CAAEyG,MAAO,QAMhBC,WAAY,KACZC,MAAM,EACNC,gBAAiB,CAAC,IAAK,QAEf,C,2JCxHhB,MA8CA,EA5CIjH,IAAuC,IAAtC,KAAEgH,EAAI,QAAEP,KAAYS,GAAYlH,EACnC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,OACPmC,EAAyBC,IAC9BC,EAAAA,EAAAA,GAAuB,0CAEnBC,EAAQ,CACZ,CACEC,MAAOxC,EAAE,qDACTyC,YAAazC,EAAE,oDACf0C,OAAQA,KAAA,IAAAC,EAAA,OAC2C,QAD3CA,EACNC,SAASC,uBAAuB,yBAAiB,IAAAF,OAAA,EAAjDA,EAAoD,EAAE,GAE1D,CACEH,MAAOxC,EAAE,qDACTyC,YAAazC,EACX,4DAEF0C,OAAQA,KAAA,IAAAI,EAAAC,EAAA,OAE6C,QAF7CD,EAEJF,SAASC,uBAAuB,yBAAiB,IAAAC,GAAK,QAALC,EAAjDD,EAAoD,UAAE,IAAAC,OAAL,EADnDA,EAEGC,cAAc,kBAAkB,GAEvC,CACER,MAAOxC,EAAE,qDACTyC,YAAazC,EAAE,wDACf0C,OAAQA,IACNE,SAASI,cACP,gEAIR,OACEpH,EAAAA,EAAAA,KAACqH,EAAAA,EAAI,CACHV,MAAOA,EACPb,QAAUE,IACD,OAAPF,QAAO,IAAPA,GAAAA,EAAUE,GACVS,GAA2B,EAAK,EAElCJ,MAAOG,GAA2BH,KAC9BE,GACJ,E,sICtCN,MAqDA,EArDgElH,IAEzD,OADF8E,GACJ9E,EAEC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,MACd,OACErE,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,EAAE,gCACT5B,KAAK,cAGLoC,MAAO,CACL,CACE0C,IAAK,EACLC,QAASnD,EAAE,2CAEb,CACEoD,IAAK,GACLD,QAASnD,EAAE,4CAEb,CACES,UAASA,CAAC4C,EAAGtG,IACPL,IAAAA,QAAUK,GACL8D,QAAQC,UAEZ,MAAMwC,KAAKvG,GAMX,YAAYuG,KAAKvG,IAMjB,MAAMuG,KAAKvG,IAAUA,EAAM4C,QAAU,EACjCkB,QAAQE,OACbf,EAAE,gDAGCa,QAAQC,UAVND,QAAQE,OACbf,EAAE,mDAPGa,QAAQE,OACbf,EAAE,uDAmBRD,EAAaxD,UAEjBX,EAAAA,EAAAA,KAAC2H,EAAAA,EAAK,CAACC,YAAU,EAACC,aAAa,SACrB,C,oTCXhB,MAiOaC,EACX5F,IAEA,MAAM,EAAEkC,IAAMC,EAAAA,EAAAA,MACRlC,EAAOC,EAAAA,EAAKC,kBACZ0F,EAAW3F,EAAAA,EAAK4F,SAAS,CAAC,QAAS,WAAY7F,GAC/C8F,GAAkBC,EAAAA,EAAAA,MACxB,OACuB,UAApBD,GAAmD,eAApBA,IAChCF,IACE/H,EAAAA,EAAAA,KAACmI,EAAAA,EAAO,CACNvB,MAAOxC,EAAE,oCACTgE,KAAK,QACL9I,OACE6C,EAAKkG,cAAc,CAAC,QAAS,UAAUtE,OAAS,GAChD5B,EAAKkG,cAAc,CAAC,QAAS,cAActE,OAAS,GACpD5B,EAAKkG,cAAc,CAAC,QAAS,YAAYtE,OAAS,GAClD5B,EAAKkG,cAAc,CAAC,QAAS,kBAAkBtE,OAAS,EACpD,aACAtD,EAENlB,iBAAkB6E,EAAE,kBAChBlC,EAAKvB,UAET2H,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CAACH,KAAK,QAAQI,OAAQ,EAAE7H,SAAA,EACnCX,EAAAA,EAAAA,KAACuI,EAAAA,EAAa9F,KAAI,CAAC+B,MAAOJ,EAAE,+BAA+BzD,SACxDwB,EAAKyD,cAAc,CAAC,QAAS,aAEhC5F,EAAAA,EAAAA,KAACuI,EAAAA,EAAa9F,KAAI,CAAC+B,MAAOJ,EAAE,mCAAmCzD,SAC5DwB,EAAKyD,cAAc,CAAC,QAAS,iBAEhC5F,EAAAA,EAAAA,KAACuI,EAAAA,EAAa9F,KAAI,CAAC+B,MAAOJ,EAAE,+BAA+BzD,SACxDwB,EAAKyD,cAAc,CAAC,QAAS,eAEhC5F,EAAAA,EAAAA,KAACuI,EAAAA,EAAa9F,KAAI,CAAC+B,MAAOJ,EAAE,uCAAuCzD,SAChEwB,EAAKyD,cAAc,CAAC,QAAS,wBAIrC,EAIL,EA5QqD1D,IACnD,MAAM,EAAEkC,IAAMC,EAAAA,EAAAA,OACR,MAAEzE,GAAUC,EAAAA,EAAMC,WAClBqC,EAAOC,EAAAA,EAAKC,kBAEZ0F,EAAW3F,EAAAA,EAAK4F,SAAS,CAAC,QAAS,WAAY7F,IAE9CsG,EAAeC,IAAoBC,EAAAA,EAAAA,YACpCC,GAAWC,EAAAA,EAAAA,wBAEX,KAAEC,EAAI,WAAEC,IAAeC,EAAAA,EAAAA,IAAY,CACvCC,SAAU,CAAC,yBAA0B,YAAaR,GAClDS,QAASA,KACP,MAAMC,EAAQhH,EAAKyD,cAAc,CAAC,QAAS,UAC3C,IAAKuD,EAAO,OAEZ,MAAMC,OAAK,IAAAC,EAAAA,EAAAA,EAAAC,EAAA,OAcX,OAAOC,EAAAA,EAAAA,YAAwCX,EAAUQ,EAAO,CAC9DD,UACCK,WAAW,EAEhBC,UAAWhB,IAGPiB,EAAgBvH,EAAKyD,cAAc,CAAC,QAAS,UAC3C,OAAJkD,QAAI,IAAJA,OAAI,EAAJA,EAAMa,cACNlJ,EACEmJ,EAAQzH,EAAKyD,cAAc,CAAC,QAAS,UAAgB,OAAJkD,QAAI,IAAJA,OAAI,EAAJA,EAAMe,UAAOpJ,EAE9DqJ,GAAoBf,GAAcN,IAAkBmB,EAC1D,OACEtB,EAAAA,EAAAA,MAAC1H,EAAAA,EAAI,CACHgG,MAAOxC,EAAE,oCACT3E,OACEO,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACD,KAAM,CAAC,QAAS,WAAYuH,cAAc,UAAUC,SAAO,EAAArJ,UACpEX,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,MAGXC,OACEnC,OACItH,EACA,CACE0J,OAAQ,CACNC,aAAc,QAEhBC,KAAM,CACJC,QAASvC,EAAW,QAAU,YAIpC7F,EAAKvB,SAAA,EAETX,EAAAA,EAAAA,KAACuK,EAAAA,EAAc,CACb/H,KAAM,CAAC,QAAS,cAChBrB,MAAY,OAALyI,QAAK,IAALA,OAAK,EAALA,EAAOY,eAEhBxK,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACgI,aAAc,CAAC,CAAC,QAAS,YAAaT,SAAO,EAAArJ,SACrDtB,IAAwB,IAAvB,cAAEuG,GAAevG,EACjB,OACEiJ,EAAAA,EAAAA,MAAAoC,EAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,EAAAA,KAAC2K,EAAAA,EAAI,CAAAhK,UACHX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,SAChBgC,MAAOJ,EAAE,+BACTQ,MAAO,CACL,CACEgG,SAAU7C,GAEZ,CACE7H,KAAM,QACNqH,QAASnD,EAAE,+CAGf1E,MAAO,CAAEmL,KAAM,GACfC,eAAgBhB,EAAmB,aAAUrJ,EAC7CsK,KACEjB,EACI1F,EAAE,mCACF3D,EACLE,UAEDX,EAAAA,EAAAA,KAAC2H,EAAAA,EAAMqD,OAAM,CACXC,SAAWtH,IAGTxB,EACG+I,eAAe,CAAC,CAAC,QAAS,WAC1BC,MAAK,KACJzC,EAAiB/E,EAAE,IAEpByH,OAAM,QAAS,EAGpBhK,SAAUA,KACRsH,EAAiB,IACjBvG,EAAKkJ,eAAe,CAClBzB,MAAO,CACL0B,UAAW,GACXC,aAAS9K,EACT+K,mBAAe/K,IAEjB,EAEJgL,QAAS1C,EACT2C,aACG3C,GAAca,GACb5J,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACE,MAAMH,EAAAA,EAAAA,KAAC2L,EAAAA,EAAS,WACtBlL,SAKZT,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,aAChBgC,MAAOJ,EAAE,mCACTQ,MAAO,CACL,CACEgG,SAAUhF,EAAc,CAAC,QAAS,cAEpCjF,UAEFX,EAAAA,EAAAA,KAAC4L,EAAAA,EAAS,CACRC,QAAS/K,IAAAA,IAAM4I,GAAgBoC,IACtB,CACLtH,MAAQ,OAADsH,QAAC,IAADA,OAAC,EAADA,EAAGC,WACV5K,MAAQ,OAAD2K,QAAC,IAADA,OAAC,EAADA,EAAGC,eAGdC,kBAAgB,EAChBC,SAAUnL,IAAAA,QAAU2H,IAAkBM,OAI1CT,EAAAA,EAAAA,MAAC4D,EAAAA,EAAG,CAACC,OAAQvM,EAAMwM,SAASzL,SAAA,EAC1BX,EAAAA,EAAAA,KAACqM,EAAAA,EAAG,CAACC,KAAM,GAAG3L,UACZX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,WAChBgC,MAAOJ,EAAE,+BACTQ,MAAO,CACL,CACEgG,SAAUhF,EAAc,CAAC,QAAS,cAEpCjF,UAEFX,EAAAA,EAAAA,KAAC4L,EAAAA,EAAS,CACRC,QAAS/K,IAAAA,IAAW,OAAL8I,QAAK,IAALA,OAAK,EAALA,EAAO2C,QAASC,IACtB,CACLhI,MAAQ,OAADgI,QAAC,IAADA,OAAC,EAADA,EAAGhK,KACVrB,MAAQ,OAADqL,QAAC,IAADA,OAAC,EAADA,EAAGhK,SAGdwJ,kBAAgB,EAChBC,SAAUnL,IAAAA,QAAU2H,IAAkBM,SAI5C/I,EAAAA,EAAAA,KAACqM,EAAAA,EAAG,CAACC,KAAM,GAAG3L,UACZX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACgI,aAAc,CAAC,CAAC,QAAS,YAAaT,SAAO,EAAArJ,SACrDmC,IAAwB,IAAvB,cAAE8C,GAAe9C,EACjB,OACE9C,EAAAA,EAAAA,KAACyM,EAAAA,SAAQ,CACPC,UACE1M,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,EAAE,uCACTQ,MAAO,CACL,CACEgG,SAAUhF,EAAc,CAAC,QAAS,cAEpCjF,UAEFX,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,CAACiG,SAAO,MAElB9K,UAEDX,EAAAA,EAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,iBAChBgC,MAAOJ,EAAE,uCACTQ,MAAO,CACL,CACEgG,SAAUhF,EAAc,CAAC,QAAS,cAEpCjF,SAEDiF,EAAc,CAAC,QAAS,aACvB5F,EAAAA,EAAAA,KAAC2M,EAAAA,EAAmB,CAClBC,YAAahH,EAAc,CACzB,QACA,YAEFqG,SACEnL,IAAAA,QAAU2H,IAAkBM,EAE9B8D,mBAAiB,KAGnB7M,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,CAACyG,UAAQ,OAGX,WAMpB,MAIJ,C,gRC1PX,MAmJA,EAnJkE5M,IAE3D,OADFyN,GACJzN,EACC,MAAM,EAAE+E,IAAMC,EAAAA,EAAAA,OACP0I,IAAkBC,EAAAA,EAAAA,MAElB,EAAE,kBAAEC,EAAiB,eAAEC,KAAoBC,EAAAA,EAAAA,OAE3CC,EAAmBC,IAAwB1E,EAAAA,EAAAA,YAE5C2E,GAAuBC,EAAAA,EAAAA,UAAQ,IAC5BzM,IAAAA,IAAMiM,GAAiBS,IAC5B,MAAMC,EAAS,IAAIC,gBAAgBF,EAAQC,QACrCE,EAAuCC,KAAKC,MAChDJ,EAAOK,IAAI,eAAiB,MAE9B,MAAO,IACFN,KACAG,EAEJ,KAEF,CAACZ,IAEJ,OACEzE,EAAAA,EAAAA,MAACyF,EAAAA,EAAQ,CACP5H,MAAO,IACPS,MAAOxC,EAAE,kCACT4J,cAAe,CAAE/B,UAAWmB,GAC5Ba,OAAQ7J,EAAE,mBACN0I,EACJoB,KAAOlI,IAAO,IAADmI,EAAAC,EACX,MAAMX,EAEJ,QAFUU,EAAGrN,IAAAA,KAAOiM,EAAgB,CACpCsB,GAAIjB,WACJ,IAAAe,OAAA,EAFaA,EAEXV,OACqB,QAAzBW,EAAAtB,EAAWwB,sBAAc,IAAAF,GAAzBA,EAAAG,KAAAzB,EACEc,KAAKC,MAAM,IAAIH,gBAAgBD,GAAQK,IAAI,eAAiB,MAC7D,EAEHU,SAAUA,KAERnB,OAAqB5M,GACrBqM,EAAWwB,gBAAgB,EAC3B3N,SAAA,EAEFX,EAAAA,EAAAA,KAACyO,EAAAA,EAAO,CAAC/O,MAAO,CAAEgP,OAAQ,MAC1B1O,EAAAA,EAAAA,KAAC2O,EAAAA,EAAK,CACJC,YAAY,EACZC,OAAQ,CAAEC,EAAG,eACbC,WAAYzB,EACZ0B,YAAY,EACZC,aAAc,CACZ/O,KAAM,QACNgP,gBAAiB9B,EAAoB,CAACA,GAAqB,GAC3D+B,SAAWC,IACT/B,EAAqB+B,EAAOf,GAAG,GAGnCgB,MAAQD,IAAM,CACZ1O,QAASA,KACP2M,EAAqB+B,EAAOf,GAAG,IAGnCiB,OAASF,GAAWA,EAAOf,GAC3BkB,QAAS,CAQP,CACE3I,MAAOxC,EAAE,iBACToL,UAAW,CAAC,eAAgB,WAC5BC,OAAQA,CAACC,EAASN,KAChB,MAAMO,EACJP,EAAOQ,aAAaF,SAAWN,EAAOQ,aAAaC,OACrD,QACIF,IACArH,EAAAA,EAAAA,MAACqC,EAAAA,EAAI,CAACmF,IAAK,KAAKnP,SAAA,EACdX,EAAAA,EAAAA,KAAC+P,EAAAA,EAAa,CAACC,MAAOL,KACtB3P,EAAAA,EAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbsM,EAAkB0C,MAErB3P,EAAAA,EAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbuM,EAAeyC,MAElB3P,EAAAA,EAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbyO,EAAOe,YAAc,IAAIf,EAAOe,eAAiB,SAGvD,GAOP,CACEvJ,MAAOxC,EAAE,uCACToL,UAAW,WACXC,OAASW,IAGLpQ,EAAAA,EAAAA,KAAC2K,EAAAA,EAAI,CAAAhK,UACHX,EAAAA,EAAAA,KAACqQ,EAAAA,yBAAwB,CAACD,SAAUA,OAW5C,CACExJ,MAAOxC,EAAE,8BACToL,UAAW,YACXC,OAASa,GACA5O,IAAM4O,GAAWC,gBAsBvB,E,qECnIf,MAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,UAGZC,EAAK,CACH,CACE,KAAQ,WACR,KAAQ,QACR,aAAgB,UAGpBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,aACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,cACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,aAAgB,YAChB,KAAQ,cACR,KAAQ,SACR,QAAU,EACV,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEfD,GAEH,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAwBJ,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,8BACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,UAChB,KAAQ,cACR,KAAQ,WACR,QAAU,EACV,WAAc,CACXC,GAEH,WAAc,MAEhB,CACE,MAAS,KACT,KAASD,EACT,aAAgB,OAChB,KAAQ,cACR,KAAQ,OACR,QAAU,EACV,WAAc,CACXE,EACAE,GAEH,WAAc,OAGlB,KAAQ,UACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBL,EACxB,KAAQ,YACR,KAAQ,8BACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,UAChB,KAAQ,cACR,KAAQ,WACR,QAAU,EACV,WAAc,CACXC,EACAE,GAEH,WAAc,MAEhB,CACE,MAAS,KACT,KAASH,EACT,aAAgB,OAChB,KAAQ,cACR,KAAQ,OACR,QAAU,EACV,WAAc,CACXE,EACAE,EACAD,GAEH,WAAc,QAIpB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,8BACR,cAAiB,QACjB,KAAQ,+NAGZ,CAvI+B,GAyI9BL,EAAaO,KAAO,mCAErB,S,qICtKO,MAAM/D,EAA0BA,KACrC,MAAOgE,EAAsBC,IAC3BvK,EAAAA,EAAAA,GAAuB,wBAEnBwK,GAAOC,EAAAA,EAAAA,IACX9R,IAI6D,IAJ5D,GACCgP,EAAE,OACFZ,EAAM,UACN6C,GACqDjR,EACrD,MAMM+R,EAA0B,CANG,CACjC/C,GAAM,OAAFA,QAAE,IAAFA,EAAAA,GAAMgD,EAAAA,EAAAA,IAAqB,GAC/B5D,SACA6C,UAAoB,OAATA,QAAS,IAATA,EAAAA,GAAa,IAAIgB,MAAOrP,kBAK/B+O,GAAwB,IAC5BO,MAAM,EAAG,GACXN,EAAwBG,EAAwB,IAG9CI,GAAQL,EAAAA,EAAAA,IAAkB,IAAMF,EAAwB,MACxDQ,GAASN,EAAAA,EAAAA,IAAmB9C,IAChC,MAAM+C,GAA2BJ,GAAwB,IAAIU,QAC1DC,GAASA,EAAKtD,KAAOA,IAExB4C,EAAwBG,EAAwB,IAElD,MAAO,CACLJ,EACA,CACEE,OACAM,QACAC,UAEH,E,g9BCkJH,MAAMG,GAAsBA,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAChC,MAAMC,GAAMC,EAAAA,EAAIC,SAChB,IAAIC,GAA2B,SAE/B,MAAMC,IAAoBC,EAAAA,GAAAA,IAAaC,EAAAA,IACjCrQ,IAAYC,EAAAA,EAAAA,MACZ0D,IAAkBC,EAAAA,EAAAA,OACjB0M,GAA4BC,KACjCC,EAAAA,EAAAA,OACK,EAAE,eAAE5H,GAAc,aAAE6H,GAAY,SAAEC,MACvC7H,EAAAA,EAAAA,MAEI8H,GACsC,QADdpD,EACnB,OAATvN,SAAS,IAATA,QAAS,EAATA,GAAW4Q,SAAS,8BAAsB,IAAArD,GAAAA,EACtCsD,GAA0D,QAAvCrD,EAAY,OAATxN,SAAS,IAATA,QAAS,EAATA,GAAW4Q,SAAS,wBAAgB,IAAApD,GAAAA,GAEzDsD,GAAmBC,KAAwB1M,EAAAA,GAAAA,WAAS,GACrD2M,IAA6D/H,EAAAA,GAAAA,UACjE,SAAAgI,EAAAC,EAAA,MAAO,CACLC,YAAa,cAEbC,iBAAkB,cAClBC,gBAAiB,CACfC,aAAa,EACbC,gBAAiB,IACjBC,qBAAsB,KAExBC,MAAO,CACLtM,SAAS,EACTuM,aAASvV,EACTwV,kBAAcxV,KACV0U,IAAuB,CACzBe,gBAAgB,EAChBC,aAAS1V,EACT2V,YAAa,MAGjBC,QAAS,OAEY,QAAjBd,EAAAjR,GAAUS,eAAO,IAAAwQ,OAAA,EAAjBA,EAAmBe,8BAA+B,CACpD1G,aAAc,CACZ2G,YAA8B,QAAnBf,EAAElR,GAAUS,eAAO,IAAAyQ,OAAA,EAAjBA,EAAmBc,iCAGjCE,EAAAA,GACHhL,cAAeoJ,SAA8BnU,EAC9C,GACD,CACmB,QADnBsR,EACEzN,GAAUS,eAAO,IAAAgN,OAAA,EAAjBA,EAAmBuE,4BACnB1B,GACAO,KAGEsB,IAAYC,EAAAA,GAAAA,aAAYC,GAAAA,YAAa,GACrCC,IAAkBF,EAAAA,GAAAA,aAAYG,GAAAA,UAAWvB,IACzCwB,IAAiBJ,EAAAA,GAAAA,aAAYG,GAAAA,UAAW,CAAC,KAG3CE,KAAMC,GACNrJ,WAAYsJ,GAAyB,WACrCC,GACAC,UAAWC,IAEbC,KACEC,EAAAA,GAAAA,gBAAe,CACjBP,KAAMN,GACN9I,WAAYiJ,GACZM,WAAYK,GAAAA,YACZJ,UAAWL,MAEP,OAAEU,KAAWC,EAAAA,GAAAA,OAEb,WAAEC,KAAeC,EAAAA,EAAAA,KAEjBC,IAAgBC,EAAAA,EAAAA,MAChBC,IAAiBC,EAAAA,EAAAA,OAEhBC,IAAuBC,OAAQC,MACpCC,EAAAA,EAAAA,MACI,mBAAEC,KAAuBC,EAAAA,EAAAA,OACxB,EAAInH,KAAMoH,MAAwBtL,EAAAA,EAAAA,MAEjCuL,IAAKC,KAA8BC,EAAAA,EAAAA,IACzC,KAIE,MAAMC,EAAevW,GAAKwW,iBAC1BtB,GACE,CAEE1J,WAAY7M,KAAAA,OACVA,KAAAA,KACEqB,GAAKwW,iBACL,CAAC,sBACD,CAAC,8BACD,CAAC,0BACD,CAAC,SACD,CAAC,YAEH,CACEtC,SAASuC,EAAAA,EAAAA,IAAqBF,EAAarC,YAIjD,YACD,GAEH,CACEwC,SAAS,EACTC,KAAM,IACNC,UAAU,IAIRC,GAAkBC,IACtB5B,GACE,CACEN,KAAMkC,GAER,SACD,GAEG,MAAErZ,IAAUC,EAAAA,EAAMC,YAElB,EAAEsE,KAAMC,EAAAA,GAAAA,MAER6U,GAAUC,EAAAA,GAAKC,iBAEdjX,IAAQC,EAAAA,EAAKiX,WAEpB/W,EAAAA,GAAAA,YAAU,KACHxB,KAAAA,QAAUmW,KACb9U,GAAK+I,iBAAiBE,OAAOpF,OAC/B,GAGC,IAEH,MAAMsT,IAAsB/L,EAAAA,GAAAA,UAAQ,IAC3BzM,KAAAA,MAAQ,CAAC,EAAGwU,GAAqB2B,KACvC,CAAC3B,GAAqB2B,MAGzB3U,EAAAA,GAAAA,YAAU,KAAO,IAADiX,EACW,QAAzBA,EAAA9E,GAAkB+E,eAAO,IAAAD,GAAzBA,EAA2BE,SAAS,EAAG,EAAE,GAExC,CAACzC,KAGJ,MAAMvB,GACJrT,EAAAA,EAAK4F,SAAS,cAAe,CAAE7F,QAAMuX,UAAU,KAC/CvX,GAAKyD,cAAc,gBACnBqR,GAA0BxB,YAEtB9O,GAAQ7F,KAAAA,OACZ,CACE,CACE8F,MAAOxC,GAAE,gCACTuV,IAAK,eAGP,CACE/S,MAAO,GAAGxC,GAAE,sCAAsCA,GAChD,0CAEFuV,IAAK,eAES,cAAhBlE,IAA+B,CAC7B7O,MAAOxC,GAAE,2BACTuV,IAAK,WAEP,CACE/S,MAAOxC,GAAE,4BACTuV,IAAK,WAEP,CACE/S,MAAOxC,GAAE,qCACTjE,MAAMH,EAAAA,GAAAA,KAAC4Z,EAAAA,EAAgB,IAEvBD,IAAK,YAGRhW,KAAQA,IAGLkW,GAM2B,QAArB7H,EAAGrL,GAAMqQ,WAAY,IAAAhF,OAAA,EAAlBA,EAAoB2H,IAE7BG,GAAWhZ,KAAAA,KACfqB,GAAK4X,kBACJpI,GAASA,EAAKqI,OAAOjW,OAAS,KAG1BkW,GAA2BC,KAChCC,EAAAA,EAAAA,IAAkB,UAEpB7X,EAAAA,GAAAA,YAAU,KACJ0U,KAAgBrQ,GAAM5C,OAAS,GACjC5B,GACG+I,iBACAE,OAAOgP,QACPC,SAAQ,IAAMH,MACnB,GAEC,CAAClD,GAAa7U,GAAM+X,GAA8BvT,GAAM5C,UAE3DzB,EAAAA,GAAAA,YAAU,KAC0B,UAA9B2X,IAEAK,KADER,GAKN,GACC,CAACG,GAA2BH,KAE/B,MA4SOS,GAAoBD,KAAyB3R,EAAAA,GAAAA,WAAS,GAE7D,OACEL,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CACH6P,UAAU,SACVC,MAAM,UACN/a,MAAO,CACLgb,eAAgB,UAIlB5K,IAAK,KAAKnP,SAAA,EAEVX,EAAAA,GAAAA,KAAA,SAAAW,SAAQga,KACRrS,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,MAAM1K,IAAI,KAAK2K,MAAM,QAAO9Z,SAAA,EAC1C2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CACH6P,UAAU,SACVC,MAAM,UACN/a,MAAO,CAAEmL,KAAM,EAAG+P,SAAU,KAAMja,SAAA,EAElC2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,MAAMK,QAAQ,UAASla,SAAA,EACrCX,EAAAA,GAAAA,KAACiQ,EAAAA,EAAW6K,MAAK,CAACC,MAAO,EAAGrb,MAAO,CAAEsb,UAAW,GAAIra,SACjDyD,GAAE,uCAELpE,EAAAA,GAAAA,KAAC2K,EAAAA,EAAI,CAAC6P,UAAU,MAAM1K,IAAK,KAAKnP,UAC9BX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLC,KAAK,OAGLR,MAAO,CAAEub,aAAc,EAAGC,YAAa,GACvCxa,QAASA,IAAMwX,KAA4BvX,SAE1CyD,GAAE,0CAKTpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAK+Y,SAAQ,CACZC,aAAcA,CAAC5Y,EAAM6Y,KAInB7C,IAA2B,EAC3B7X,UAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAI,CACHD,KAAMA,GACNmZ,OAAO,WACPC,aAAa,WACbC,cAAelC,GAAoB3Y,UAEnC2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CACH6P,UAAU,SACVC,MAAM,UACN3K,IAAI,KACJnP,SAAA,EAGA2H,EAAAA,GAAAA,MAAC1H,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,gCACT1E,MAAO,CACL4K,QACqB,gBAAnBuP,GAAmC,QAAU,QAC/ClZ,SAAA,EAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACD,KAAK,cAAa7B,UAC3BX,EAAAA,GAAAA,KAACyb,EAAAA,GAAAA,MAAW,CACV5P,QAAS,CACP,CACErH,OACE8D,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAACwL,MAAI,EAAA/a,SAClByD,GAAE,sCACc,KACnBpE,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,6CAITjD,MAAO,eAET,CACEqD,OACE8D,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAACwL,MAAI,EAAA/a,SAClByD,GAAE,gCACc,KACnBpE,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,uCAITjD,MAAO,eAqCfnB,EAAAA,GAAAA,KAAC2b,EAAAA,EAAmB,KACpB3b,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAK,mBACLgC,MAAM,mBACN9B,QAAM,EAAA/B,UAENX,EAAAA,GAAAA,KAAC2H,EAAAA,EAAK,SAIO,UAAhB8N,KACCnN,EAAAA,GAAAA,MAAC1H,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,oCACT1E,MAAO,CACL4K,QACqB,gBAAnBuP,GAAmC,QAAU,QAC/ClZ,SAAA,EAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GAAE,mCACT5B,KAAM,CAAC,QAAS,WAChBoC,MAAO,CACL,CACEgG,UAAU,EACV1K,KAAM,WAERS,UAEFX,EAAAA,GAAAA,KAAC2H,EAAAA,EAAMiU,SAAQ,CAACC,UAAQ,OAE1B7b,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPS,aAAc,CAAC,CAAC,QAAS,iBAAiB9J,SAEzCA,KACC,MAAMsV,EAAe9T,GAAKyD,cAAc,CACtC,QACA,iBAEF,OACE5F,EAAAA,GAAAA,KAAC8b,EAAAA,EAAe,CACdC,MAAO,IACPC,SAAUA,KACR,MAAM/F,EAAe9T,GAAKyD,cAAc,CACtC,QACA,iBAEF,OAAIqQ,EACEvU,KAAMuU,GAAcgG,SAASva,aAKf,IAHdS,GAAKkG,cAAc,CACjB,QACA,iBACCtE,QAEH5B,GAAK+I,eAAe,CAClB,CAAC,QAAS,mBAKPxJ,KAAMuU,GAAc1F,eAG7B,CACF,EAEF2L,WAAYjG,GAA8B,OAC1CxG,OAAS0M,IAELnc,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GAAE,qCACT3E,MAAO0c,EAAKxb,UAEZ2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,MAAM1K,IAAK,KAAKnP,SAAA,EAC9BX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPxH,KAAM,CAAC,QAAS,WAChBuH,cAAc,UAASpJ,UAEvBX,EAAAA,GAAAA,KAACoc,EAAAA,EAAQ,CACPhb,SAAW4E,IAEPA,EAAEc,OAAOuV,SACTvb,KAAAA,QACEqB,GAAKyD,cAAc,CACjB,QACA,kBAIJzD,GAAKI,cACH,CAAC,QAAS,gBACVb,OACG4a,IAAI,EAAG,WACPra,gBAGgB,IAArB+D,EAAEc,OAAOuV,SAETla,GAAKI,cACH,CAAC,QAAS,qBACV9B,GAGJ0B,GAAK+I,eAAe,CAClB,CAAC,QAAS,iBACV,EACFvK,SAEDyD,GAAE,gCAGPpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EAEPuS,aAAcA,CAACC,EAAMC,KAAU,IAADC,EAAAC,EAC5B,OAEY,QAAVD,EAAAF,EAAKzG,aAAK,IAAA2G,OAAA,EAAVA,EAAYjT,YACF,QADSkT,EACnBF,EAAK1G,aAAK,IAAA4G,OAAA,EAAVA,EAAYlT,QAAO,EAErB9I,SAEDA,KAAO,IAADic,EACL,MAAM3Q,GAEY,KADW,QAA3B2Q,EAAAza,GAAKyD,cAAc,gBAAQ,IAAAgX,OAAA,EAA3BA,EACInT,SACN,OACEzJ,EAAAA,GAAAA,KAAA0K,GAAAA,SAAA,CAAA/J,UACEX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,gBAChBwH,SAAO,EACPpF,MAAO,CACL,CAEEC,UAAWgY,MACT/X,EACA3D,IAGEA,GACAO,KAAMP,GAAO8a,SACXva,QAGKuD,QAAQE,OACbf,GACE,gDAICa,QAAQC,YAGnBvE,UAEFX,EAAAA,GAAAA,KAAC8c,EAAAA,EAAa,CACZ7Q,SAAUA,EACV8Q,UAAQ,EACR1b,aAAW,EACX2b,aAAe7b,GACNA,EAAM8a,SACXva,OAAQub,QAAQ,aAWvB,UAQjB,IAKP9H,IACCnV,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPS,aAAc,CACZ,CAAC,QAAS,kBACV,CAAC,QAAS,gBACV9J,SAEDA,KACC,MAAMwV,EAAUhU,GAAKyD,cAAc,CACjC,QACA,YAEIsX,EAAO/a,GAAKyD,cAAc,CAC9B,QACA,gBAGIuX,EAAezb,KAAAA,SACnByU,EACI,OAAJ+G,QAAI,IAAJA,EAAAA,EAAQ,KAGJE,GAAoBC,EAAAA,EAAAA,IACxBF,EACA/Y,IAGIkZ,GACHxc,KAAAA,OAASqV,IAAYrV,KAAAA,SAAWqV,GAAW,EACxCiH,EACA,KACN,OACEpd,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GACL,4CAEFK,QAASL,GACP,gDAGF2G,KAAMuS,EAAa3c,UAEnB2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,MAAM1K,IAAK,KAAKnP,SAAA,EAC9BX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPxH,KAAM,CAAC,QAAS,kBAChBuH,cAAc,UAASpJ,UAEvBX,EAAAA,GAAAA,KAACoc,EAAAA,EAAQ,CACPhb,SAAW4E,KACgB,IAArBA,EAAEc,OAAOuV,SACXla,GAAKI,cACH,CAAC,QAAS,gBACV9B,GAGJ0B,GAAK+I,eAAe,CAClB,CAAC,QAAS,YACV,EACFvK,SAEDyD,GAAE,gCAGPpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPS,aAAc,CAAC,CAAC,QAAS,mBAAmB9J,SAE3CA,KACC,MAAMsL,GAIG,IAHP9J,GAAKyD,cAAc,CACjB,QACA,mBAEJ,OACE5F,EAAAA,GAAAA,KAAA0K,GAAAA,SAAA,CAAA/J,UACEX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,QAAS,WAChBgC,MAAOJ,GACL,4CAEF4F,SAAO,EACPpF,MAAO,CACL,CACE0C,IAAK,EACLpH,KAAM,SACNqH,QAASnD,GACP,mCAGJ,CACEwG,UAAWqB,IAEbtL,UAEFX,EAAAA,GAAAA,KAACud,EAAAA,EAAW,CACVtR,SAAUA,EACV3E,IAAK,EACLkW,YACExd,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPxH,KAAM,CAAC,QAAS,eAAe7B,UAE/BX,EAAAA,GAAAA,KAACwF,EAAAA,EAAM,CACLiY,UAAW,EACX/d,MAAO,CAAEge,SAAU,IACnB7R,QAAS,CACP,CACErH,MAAOJ,GAAE,YACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,YACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,aACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,YACTjD,MAAO,KAET,CACEqD,MAAOJ,GAAE,aACTjD,MAAO,eAQpB,QAKD,IAIhB,SAIc,UAApB8G,IACoB,eAApBA,MACAjI,EAAAA,GAAAA,KAAC2d,EAAAA,EAAsB,CACrBje,MAAO,CACL4K,QACqB,gBAAnBuP,GAAmC,QAAU,UAKpC,cAAhBpE,KACCzV,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CAACgG,MAAM,+BAA8BjG,UACxCX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRD,KAAM,CAAC,YAAa,eACpBgC,MAAOJ,GAAE,wCACTQ,MAAO,CACL,CACEgG,UAAU,IAEZjK,UAEFX,EAAAA,GAAAA,KAACwF,EAAAA,EAAM,SAUb8C,EAAAA,GAAAA,MAAC1H,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,iCACT1E,MAAO,CACL4K,QACqB,gBAAnBuP,GAAmC,QAAU,QAC/ClZ,SAAA,EAEFX,EAAAA,GAAAA,KAAC4d,GAAAA,GAAa,CACZC,eAAiB7X,IACf8X,QAAQC,IAAI/X,GACL,MACPrF,UAEFX,EAAAA,GAAAA,KAACge,EAAAA,EAA+B,OAElChe,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAAC+B,MAAOJ,GAAE,wCAAwCzD,UAC1DX,EAAAA,GAAAA,KAACie,EAAAA,GAAc,CACbzb,KAAM,UACN2B,cAAe,CACb+Z,gBAAiB,CAAC,WAAY,mBAKtCle,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,uCACT1E,MAAO,CACL4K,QACqB,gBAAnBuP,GAAmC,QAAU,QAC/ClZ,UAEFX,EAAAA,GAAAA,KAACme,EAAAA,GAA2B,CAC1BC,mBACG9Z,GAAUS,QAAQsZ,YACnB/Z,GAAU4Q,SAAS,gBAErBoJ,qBAAmB,EACnBC,uBAAqB,EACrBC,sBAAoB,OAGxBlW,EAAAA,GAAAA,MAAC1H,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,oCACT1E,MAAO,CACL4K,QACqB,gBAAnBuP,GAAmC,QAAU,QAC/ClZ,SAAA,EAEFX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CAACuH,SAAO,EAAArJ,UAChB2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,MAAM1K,IAAK,KAAKnP,SAAA,EAC9BX,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbyD,GAAE,gDAELpE,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR+B,MAAOJ,GAAE,6CACT5B,KAAM,CAAC,kBAAmB,eAC1BuH,cAAc,UACda,UAAQ,EACRZ,SAAO,EAAArJ,UAEPX,EAAAA,GAAAA,KAACiK,EAAAA,EAAM,CACLwU,gBAAiB,KACjBC,kBAAmB,MACnBtd,SAAWib,IACLA,GACFla,GAAKkJ,eACHvK,KAAAA,KAAOwU,GAAqB,CAC1B,oBAGN,YAMVtV,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACRuH,SAAO,EACPuS,aAAcA,CAACC,EAAMC,KAAU,IAADkC,EAAAC,EAC5B,OACsB,QAApBD,EAAAnC,EAAK7G,uBAAe,IAAAgJ,OAAA,EAApBA,EAAsB/I,gBACF,QADagJ,EACjCnC,EAAK9G,uBAAe,IAAAiJ,OAAA,EAApBA,EAAsBhJ,YAAW,EAEnCjV,SAEDA,KACC,MAAM8I,EAAUtH,GAAKyD,cAAc,CACjC,kBACA,gBAEF,OACE0C,EAAAA,GAAAA,MAAC4D,EAAAA,EAAG,CACFC,OAAQvM,GAAMif,SACdnf,MAAO,CACL4K,QAASb,EAAU,YAAShJ,EAC5Bua,UAAWpb,GAAMif,UACjBle,SAAA,EAEFX,EAAAA,GAAAA,KAACqM,EAAAA,EAAG,CAACyS,GAAI,GAAIC,GAAI,GAAGpe,UAClBX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR/C,MAAO,CAAEmL,KAAM,GACfrG,MAAOJ,GAAE,qCACT5B,KAAM,CAAC,kBAAmB,mBAC1BiC,SACE6D,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,CACGyD,GAAE,wCACHpE,EAAAA,GAAAA,KAAC0E,GAAAA,GAAK,CACJC,QACE,+CAKRiG,UAAQ,EAAAjK,UAERX,EAAAA,GAAAA,KAACud,EAAAA,EAAW,CACVjW,IAAK,EACLE,IAAK,IACLuP,KAAM,EACNiI,YAAU,EACVtf,MAAO,CAAEyG,MAAO,eAItBnG,EAAAA,GAAAA,KAACqM,EAAAA,EAAG,CAACyS,GAAI,GAAIC,GAAI,GAAGpe,UAClBX,EAAAA,GAAAA,KAACoC,EAAAA,EAAKK,KAAI,CACR/C,MAAO,CAAEmL,KAAM,GACfrG,MAAOJ,GAAE,uCACT5B,KAAM,CAAC,kBAAmB,wBAC1BiC,SACE6D,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,CACGyD,GAAE,wCACHpE,EAAAA,GAAAA,KAAC0E,GAAAA,GAAK,CACJC,QACE,+CAKRiG,UAAQ,EAAAjK,UAERX,EAAAA,GAAAA,KAACud,EAAAA,EAAW,CACVjW,IAAK,EACLE,IAAK,IACLuP,KAAM,EACNiI,YAAU,EACVtf,MAAO,CAAEyG,MAAO,gBAIlB,QAMdnG,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,2BACT1E,MAAO,CACL4K,QAA4B,YAAnBuP,GAA+B,QAAU,QAClDlZ,UAEFX,EAAAA,GAAAA,KAACif,EAAAA,EAAoB,CACnBvN,OAASwN,IAAa,IAADC,EACnB,MACqB,UAAnBD,EAAQ5f,UACK,QAAb6f,EAACD,EAAQ1c,YAAI,IAAA2c,GAAZA,EAAcC,WAAW,KAAI,OAQtCpf,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHgG,MAAOxC,GAAE,4BACT1E,MAAO,CACL4K,QAA4B,YAAnBuP,GAA+B,QAAU,QAClDlZ,UAEFX,EAAAA,GAAAA,KAACqf,EAAAA,GAAkB,MAID,WAAnBxF,KACCvR,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACmI,EAAAA,EAAO,CACNvB,MAAOxC,GAAE,gCACTgE,KAAK,QACL9I,OACE6C,GAAKkG,cAAc,eAAetE,OAAS,GAC3C5B,GAAKkG,cAAc,CAAC,QAAS,YAAYtE,OAAS,GAClD5B,GAAKkG,cAAc,CAAC,QAAS,iBAAiBtE,OAAS,EACnD,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBwZ,GAEErS,GAAM2Y,WAAW3b,GAAgB,gBAAVA,EAAEgW,MAC1B,EAqBHhZ,UAEA2H,EAAAA,GAAAA,MAACC,GAAAA,EAAY,CAACH,KAAK,QAAQI,OAAQ,EAAE7H,SAAA,EACnCX,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAAC+B,MAAOJ,GAAE,uBAAuBzD,SAChDwB,GAAKyD,cAAc,kBAEpB9E,KAAAA,QAAUqB,GAAKyD,cAAc,kBAC7B5F,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,gCAAgCzD,SAExCwB,GAAKyD,cAAc,iBAGP,UAAhB6P,KACCnN,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,mCACTmb,WAAY,CAAEC,WAAY,UAC1BC,aAAc,CACZC,SAAU,QACV/e,SAEDwB,GAAKyD,cAAc,CAAC,QAAS,aAC5B5F,EAAAA,GAAAA,KAAC2f,EAAAA,EAAgB,CAACC,SAAS,QAAOjf,SAC/BwB,GAAKyD,cAAc,CAAC,QAAS,eAGhC5F,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,qBAITpE,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,qCAAqCzD,SAE7CwB,GAAKyD,cAAc,CAAC,QAAS,iBAC5BlE,KACES,GAAKyD,cAAc,CAAC,QAAS,kBAC7B7D,OAAO,YAET/B,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,oBAIR+Q,IACCnV,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GACL,4CACAzD,SAEDwB,GAAKyD,cAAc,CAAC,QAAS,aAC5B0C,EAAAA,GAAAA,MAAC2H,EAAAA,EAAWC,KAAI,CAAAvP,SAAA,CACbwB,GAAKyD,cAAc,CAAC,QAAS,YAC7BzD,GAAKyD,cAAc,CAClB,QACA,iBACI,QAGR5F,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,oBAIP,cAKZpE,EAAAA,GAAAA,KAAC8H,EAAAA,EAA6B,CAC5BtI,mBAAoBA,KAClBwZ,GAEErS,GAAM2Y,WAAW3b,GAAgB,gBAAVA,EAAEgW,MAC1B,KAGL3Z,EAAAA,GAAAA,KAACmI,EAAAA,EAAO,CACNvB,MAAOxC,GAAE,iCACTgE,KAAK,QACL9I,OACEwB,KAAAA,KACEqB,GAAKyD,cACH,YAEF,CAACjC,EAAGkc,IAEA1d,GAAKkG,cAAc,CAAC,UAAWwX,EAAK,aACjC9b,OAAS,GACZ5B,GAAKkG,cAAc,CAAC,UAAWwX,EAAK,UACjC9b,OAAS,IAId,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBwZ,GAEErS,GAAM2Y,WAAW3b,GAAgB,gBAAVA,EAAEgW,MAC1B,EACDhZ,UAEF2H,EAAAA,GAAAA,MAACC,GAAAA,EAAY,CAACH,KAAK,QAAQI,OAAQ,EAAE7H,SAAA,EACnCX,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,4BAA4BzD,SAEpCmX,GAAetV,QAElBxC,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAAC+B,MAAOJ,GAAE,iBAAiBzD,SAC1CsU,IACC3M,EAAAA,GAAAA,MAAC4D,EAAAA,EAAG,CAACxM,MAAO,CAAEogB,SAAU,UAAWnf,SAAA,EACjCX,EAAAA,GAAAA,KAACqM,EAAAA,EAAG,CAAA1L,UACFX,EAAAA,GAAAA,KAAC+P,EAAAA,EAAa,CACZC,OACoC,QAAlCiC,EAAA9P,GAAKyD,cAAc,uBAAe,IAAAqM,OAAA,EAAlCA,EACIvC,WAC8B,QADvBwC,GACX/P,GAAKyD,cAAc,uBAAe,IAAAsM,QAAA,EAAlCA,GAAoCrC,QAEtCnQ,MAAO,CAAEqgB,YAAangB,GAAMogB,eAGhChgB,EAAAA,GAAAA,KAACqM,EAAAA,EAAG,CAAA1L,UACFX,EAAAA,GAAAA,KAAC2K,EAAAA,EAAI,CAAC6P,UAAU,MAAMyF,KAAK,OAAMtf,SACI,QAAlCwR,GAAAhQ,GAAKyD,cAAc,uBAAe,IAAAuM,IAAlCA,GACGtC,QACF7P,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CACdwL,MAAI,EACJhc,MAAO,CAAEwgB,UAAW,aACpBC,SAAU,CACRC,KAAwC,QAApChO,GAAEjQ,GAAKyD,cAAc,uBAAe,IAAAwM,QAAA,EAAlCA,GACFvC,QACJlP,SAGkC,QAHlC0R,GAGAlQ,GAAKyD,cAAc,uBAAe,IAAAyM,QAAA,EAAlCA,GACIxC,UAIRvH,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbqU,GACmC,QAD3B1C,GACPnQ,GAAKyD,cAAc,uBAAe,IAAA0M,IACzB,QADyBC,GAAlCD,GACItC,aAAK,IAAAuC,QADyB,EAAlCA,GACW8N,oBAGfrgB,EAAAA,GAAAA,KAACyO,GAAAA,EAAO,CAACvO,KAAK,cACdF,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SAEsB,QAFtB6R,GAEZrQ,GAAKyD,cAAc,uBAAe,IAAA4M,IACzB,QADyBC,GAAlCD,GACIxC,aAAK,IAAAyC,QADyB,EAAlCA,GACW/C,WAGf1P,EAAAA,GAAAA,KAACyO,GAAAA,EAAO,CAACvO,KAAK,cACdF,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SAEsB,QAFtB+R,GAEZvQ,GAAKyD,cAAc,uBAAe,IAAA8M,IACzB,QADyBC,GAAlCD,GACI1C,aAAK,IAAA2C,QADyB,EAAlCA,GACW2N,gBAGftgB,EAAAA,GAAAA,KAACyO,GAAAA,EAAO,CAACvO,KAAK,aAEbY,KAAAA,IACmC,QAD9B8R,GACJzQ,GAAKyD,cAAc,uBAAe,IAAAgN,IACzB,QADyBC,GAAlCD,GACI5C,aAAK,IAAA6C,QADyB,EAAlCA,GACW0N,MACVC,IAGM,IAADrS,EAAAsS,EAAAC,EACJ,MAAMC,EAAe7f,KAAAA,SACnB0f,EAAI7G,IACJ,eAEIiH,EAAWD,EAQZ,QARwBxS,EACzBrN,KAAAA,KAGG,QAHG2f,EACJte,GAAKyD,cACH,uBACD,IAAA6a,GAAO,QAAPC,EAFDD,EAEGzQ,aAAK,IAAA0Q,OAAP,EAFDA,EAEUG,OACV,CACElH,IAAK,4CAER,IAAAxL,OAAA,EAPDA,EAOGhN,MACHqf,EAAIrf,MACF2f,EAAa9L,GACjBwL,EAAI7G,IAAMiH,GAEZ,OAAO9f,KAAAA,QACLggB,GACAC,EAAAA,EAAAA,IACEP,EAAI7G,IAAMiH,KAGZ5gB,EAAAA,GAAAA,KAACghB,EAAAA,EAAS,CAER/c,OAAQ,CACN,CACEO,MAAOwQ,GAASwL,EAAI7G,KACpBzW,MAAOyd,EACH,OACA,QAEN,CACEnc,MAAOoc,EACP1d,MAAOyd,EACH,OACA,UAZHH,EAAI7G,MAiBX3Z,EAAAA,GAAAA,KAACiD,GAAAA,EAAG,CAEFC,MACEyd,EAAe,OAAS,OACzBhgB,SAEAmgB,GALIN,EAAI7G,IAOZ,KAGL3Z,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CACdxQ,MAAO,CAAEwD,MAAOtD,GAAMqhB,cACtBd,SAAU,CACRC,MACEc,EAAAA,EAAAA,IACoC,QADpBpO,GACd3Q,GAAKyD,cAAc,uBAAe,IAAAkN,QAAA,EAAlCA,GACI9C,SAE4B,QADjC+C,GACD5Q,GAAKyD,cAAc,uBAAe,IAAAmN,QAAA,EAAlCA,GACIrD,uBASpBpH,EAAAA,GAAAA,MAAC4D,EAAAA,EAAG,CACFxM,MAAO,CAAEogB,SAAU,SAAUhQ,IAAKlQ,GAAMuhB,QAASxgB,SAAA,EAEjDX,EAAAA,GAAAA,KAACqM,EAAAA,EAAG,CAAA1L,UACFX,EAAAA,GAAAA,KAAC+P,EAAAA,EAAa,CACZC,OACoC,QAAlCgD,GAAA7Q,GAAKyD,cAAc,uBAAe,IAAAoN,QAAA,EAAlCA,GACItD,WAC8B,QADvBuD,GACX9Q,GAAKyD,cAAc,uBAAe,IAAAqN,QAAA,EAAlCA,GAAoCpD,aAI1C7P,EAAAA,GAAAA,KAACqM,EAAAA,EAAG,CAAA1L,UAEFX,EAAAA,GAAAA,KAAC2K,EAAAA,EAAI,CAAC6P,UAAU,MAAMyF,KAAK,OAAMtf,SACI,QAAlCuS,GAAA/Q,GAAKyD,cAAc,uBAAe,IAAAsN,IAAlCA,GACGrD,QACF7P,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CACdwL,MAAI,EACJhc,MAAO,CAAEwgB,UAAW,aACpBC,SAAU,CACRC,KAAwC,QAApCjN,GAAEhR,GAAKyD,cAAc,uBAAe,IAAAuN,QAAA,EAAlCA,GACFtD,QACJlP,SAGkC,QAHlCyS,GAGAjR,GAAKyD,cAAc,uBAAe,IAAAwN,QAAA,EAAlCA,GACIvD,UAIRvH,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,EACEX,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbqU,GACCD,GACoC,QADxB1B,GACVlR,GAAKyD,cAAc,uBAAe,IAAAyN,QAAA,EAAlCA,GACI3D,aAIV1P,EAAAA,GAAAA,KAACyO,GAAAA,EAAO,CAACvO,KAAK,cACdF,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SACbuM,GACmC,QADrBoG,GACbnR,GAAKyD,cAAc,uBAAe,IAAA0N,QAAA,EAAlCA,GACI5D,YAGR1P,EAAAA,GAAAA,KAACyO,GAAAA,EAAO,CAACvO,KAAK,cACdF,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAAvP,SAEsB,QAFtB4S,GAEZpR,GAAKyD,cAAc,uBAAe,IAAA2N,IACzB,QADyBC,GAAlCD,GACIvD,aAAK,IAAAwD,QADyB,EAAlCA,GACW8M,gBAGftgB,EAAAA,GAAAA,KAACyO,GAAAA,EAAO,CAACvO,KAAK,cACdF,EAAAA,GAAAA,KAACohB,EAAAA,GAAS,CACRZ,IACoC,QADjC/M,GACDtR,GAAKyD,cAAc,uBAAe,IAAA6N,IACzB,QADyBC,GAAlCD,GACIzD,aAAK,IAAA0D,QADyB,EAAlCA,GACW8M,IAEbK,OACoC,QAD9BlN,GACJxR,GAAKyD,cAAc,uBAAe,IAAA+N,IACzB,QADyBC,GAAlCD,GACI3D,aAAK,IAAA4D,QADyB,EAAlCA,GACWiN,UAMf7gB,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CACdxQ,MAAO,CAAEwD,MAAOtD,GAAMqhB,cACtBd,SAAU,CACRC,MACEc,EAAAA,EAAAA,IACoC,QADpBrN,GACd1R,GAAKyD,cAAc,uBAAe,IAAAiO,QAAA,EAAlCA,GACI7D,SAE4B,QADjC8D,GACD3R,GAAKyD,cAAc,uBAAe,IAAAkO,QAAA,EAAlCA,GACIpE,yBAUM,QAA7BqE,GAAA5R,GAAKyD,cAAc,kBAAU,IAAAmO,QAAA,EAA7BA,GAA+BhQ,QAAS,IACvC/D,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,wCAAwCzD,SAEnB,QAA7BqT,GAAA7R,GAAKyD,cAAc,kBAAU,IAAAoO,IAA7BA,GAA+BjQ,QAC9B/D,EAAAA,GAAAA,KAACqhB,GAAAA,EAAiB,CAChB3hB,MAAOgY,GAAa4J,GAAAA,OAAO7gB,EAC3B8gB,aAAc,CACZ7hB,MAAO,CACL,GAIJ8hB,YAAa,CACX9S,OAAQ,EACRvI,MAAO,QACPxF,SAEDG,KAAAA,IACCqB,GAAKyD,cAAc,YAClBjC,GACC,IAAI,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG8d,WAAY,QAAQ,OAAD9d,QAAC,IAADA,OAAC,EAADA,EAAGxC,QAAS,QACvCugB,KAAK,SAGT1hB,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAAC,cAQ5CX,EAAAA,GAAAA,KAACmI,EAAAA,EAAO,CACNvB,MAAOxC,GAAE,uCACT9E,OACEwB,KAAAA,KAAOqB,GAAKyD,cAAc,aAAa,CAACjC,EAAGgW,IAGvCxX,GAAKkG,cAAc,CAAC,WAAYsR,IAAM5V,OAAS,KAGnD5B,GAAKkG,cAAc,CAAC,oBAAoBtE,OAAS,GACjD5B,GAAKkG,cAAc,iBAAiBtE,OAAS,EACzC,aAUAtD,EAEN2H,KAAK,QACL7I,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBwZ,GAEErS,GAAM2Y,WAAW3b,GAAgB,gBAAVA,EAAEgW,MAC1B,EACDhZ,UAEF2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,SAASC,MAAM,UAAS9Z,SAAA,CACrCG,KAAAA,KACCqB,GAAKyD,cAAc,aACnB,CACEjC,EACAgW,IAIExX,GAAKwf,gBAAgB,CAAC,WAAYhI,IAAM5V,OAAS,MAIrD/D,EAAAA,GAAAA,KAAC4hB,GAAAA,EAAK,CACJ1hB,KAAK,UACL2hB,UAAQ,EACRta,QAASnD,GACP,oDAKNkE,EAAAA,GAAAA,MAACC,GAAAA,EAAY,CAACC,OAAQ,EAAE7H,SAAA,EACtBX,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,yBACTkI,KAAM,EAAE3L,SAEPwB,GAAKyD,cAAc,mBAClB5F,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,qBAITpE,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GACL,mDAEFkI,KAAM,EAAE3L,UAER2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CACH6P,UAAU,MACVC,MAAM,QACN3K,IAAK,KACLmQ,KAAK,OACLvgB,MAAO,CAAEmL,KAAM,GAAIlK,SAAA,CAGnB,WADCwB,GAAKyD,cAAc,oBAGlB,IAEA5F,EAAAA,GAAAA,KAACiD,GAAAA,EAAG,CAAAtC,SACDwB,GAAKyD,cAAc,uBAIxB5F,EAAAA,GAAAA,KAACqQ,GAAwB,CACvBD,SAAUjO,GAAKyD,cAAc,mBAkClCtB,GAAU4Q,SAAS,mBACR,OAAT5Q,SAAS,IAATA,IAAkB,QAAT2P,GAAT3P,GAAWS,eAAO,IAAAkP,IAAlBA,GAAoBoK,cACnBre,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,8BAA8BzD,SAEtCwB,GAAKyD,cAAc,UAClBxB,GAAE,kCAGVpE,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,sCAAsCzD,SAEP,IAAvCwB,GAAKyD,cAAc,gBAChBzD,GAAKyD,cAAc,mBACnBzD,GAAKyD,cAAc,mBAEzB5F,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,gCAAgCzD,SAGzC,gBADCwB,GAAKyD,cAAc,gBAEhBxB,GAAE,+BACFA,GAAE,oCAGVpE,EAAAA,GAAAA,KAACY,EAAAA,EAAI,CACHwH,KAAK,QACLlI,KAAK,QACL0G,MAAOxC,GAAE,oCAAoCzD,UAE7CX,EAAAA,GAAAA,KAAC2K,EAAAA,EAAI,CAAC6P,UAAU,MAAM1K,IAAI,MAAKnP,UAC7BX,EAAAA,GAAAA,KAACqQ,GAAwB,CACvBD,SAAUjO,GAAKyD,cAAc,YAC7Bkc,eACyC,IAAvC3f,GAAKyD,cAAc,gBACfzD,GAAKyD,cAAc,mBACnBzD,GAAKyD,cAAc,4BAOnC5F,EAAAA,GAAAA,KAACmI,EAAAA,EAAO,CACNvB,MAAOxC,GAAE,2BACTgE,KAAK,QACL9I,OACE6C,GAAKkG,cAAc,oBAAoBtE,OAAS,EAC5C,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBwZ,GAEErS,GAAM2Y,WAAW3b,GAAgB,YAAVA,EAAEgW,MAC1B,EACDhZ,UAIF2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,SAASC,MAAM,UAAU3K,IAAK,KAAKnP,SAAA,EACpB,QAA5BuT,GAAA/R,GAAKyD,cAAc,iBAAS,IAAAsO,QAAA,EAA5BA,GAA8BnQ,QAAS,GACtC/D,EAAAA,GAAAA,KAAC2O,GAAAA,EAAK,CACJW,OAAO,OACPlH,KAAK,QACL4G,YAAY,EACZO,QAAS,CACP,CACEC,UAAW,OACX5I,MAAOxC,GAAE,sBAEX,CACEoL,UAAW,QACX5I,MAAOxC,GAAE,gCACTqL,OAAQA,CAACtO,EAAOiO,IACPtO,KAAAA,QAAUK,IACfnB,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CACdhQ,KAAK,YACLR,MAAO,CACLqiB,QAAS,IACTphB,SAED,cAAcyO,EAAO5M,SAGxBrB,IAKR4N,WAAYjO,KAAAA,IACVqB,GAAKyD,cAAc,WAClBjC,IAAO,IAADqe,EACL,MAAO,CACLxf,KAAMmB,EACNse,MACwC,QADnCD,EACH7f,GAAKyD,cAAc,2BAAmB,IAAAoc,OAAA,EAAtCA,EAAyCre,GAC5C,OAKP3D,EAAAA,GAAAA,KAAC4hB,GAAAA,EAAK,CACJ1hB,KAAK,UACL2hB,UAAQ,EACRta,QAASnD,GAAE,uCAG8B,QAA5C+P,GAAAhS,GAAKyD,cAAc,iCAAyB,IAAAuO,QAAA,EAA5CA,GAA8CpQ,QAC/C,GACE/D,EAAAA,GAAAA,KAACuI,GAAAA,EAAY,CAACH,KAAK,QAAOzH,UACxBX,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,yBAAyBzD,SAEjCG,KAAAA,IACCqB,GAAKyD,cAAc,2BAClBpD,IACQxC,EAAAA,GAAAA,KAACiD,GAAAA,EAAG,CAAAtC,SAAE6B,UAKnB,WAGRxC,EAAAA,GAAAA,KAACmI,EAAAA,EAAO,CACNvB,MAAM,UACNwB,KAAK,QACL9I,OACE6C,GAAKkG,cAAc,SAAStE,OAAS,EACjC,aACAtD,EAENlB,iBAAkB6E,GAAE,eACpB5E,mBAAoBA,KAClBwZ,GAEErS,GAAM2Y,WAAW3b,GAAgB,YAAVA,EAAEgW,MAC1B,EACDhZ,UAEFX,EAAAA,GAAAA,KAACuI,GAAAA,EAAY,CAACH,KAAK,QAAOzH,UACxBX,EAAAA,GAAAA,KAACuI,GAAAA,EAAa9F,KAAI,CAChB+B,MAAOJ,GAAE,qCAAqCzD,UAE9C2H,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CACH6P,UAAU,MACV1K,IAAI,KACJpQ,MAAO,CAAEmL,KAAM,GACfoV,KAAK,OAAMtf,SAAA,CAGVG,KAAAA,OAASqB,GAAKyD,cAAc,UAAWjC,GACtCC,SAASD,KACTD,KAAKC,IACL3D,EAAAA,GAAAA,KAAC6C,EAAAA,GAAO,CAAC1B,MAAOwC,EAAGjE,MAAO,CAAEgP,OAAQ,GAAI/N,SACrCgD,MAIH7C,KAAAA,QAAUqB,GAAKyD,cAAc,WACS,KAAb,QAA3BwO,GAAAjS,GAAKyD,cAAc,gBAAQ,IAAAwO,QAAA,EAA3BA,GAA6BrQ,QAIzB,MAHF/D,EAAAA,GAAAA,KAACiQ,EAAAA,EAAWC,KAAI,CAAChQ,KAAK,YAAWS,SAC9ByD,GAAE,+BAUnBkE,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CAAC6P,UAAU,MAAMK,QAAQ,UAASla,SAAA,EACrCX,EAAAA,GAAAA,KAAC2K,EAAAA,EAAI,CAACmF,IAAK,KAAKnP,UACdX,EAAAA,GAAAA,KAACkiB,GAAAA,EAAU,CACTtb,MAAOxC,GAAE,gBACTyC,YAAazC,GAAE,qCACf+d,UAAWA,KACTvK,GAAc,kBACdzV,GAAKigB,aAAa,EAEpBjiB,MACEH,EAAAA,GAAAA,KAACqiB,EAAAA,EAAsB,CACrB3iB,MAAO,CAAEwD,MAAOtD,GAAMU,cAG1B2N,OAAQ7J,GAAE,gBACV4J,cAAe,CACbsU,QAAQ,GACR3hB,UAEFX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLqiB,QAAM,EACNpiB,KAAK,OACLR,MAAO,CAAEub,aAAc,EAAGC,YAAa,GAAIva,SAE1CyD,GAAE,uBAiBTkE,EAAAA,GAAAA,MAACqC,EAAAA,EAAI,CACH,eAAa,4CACb6P,UAAU,MACV1K,IAAI,KAAInP,SAAA,CAEPqW,GAAc,IACbhX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLS,QAASA,KACPsY,GAAehC,GAAc,EAAE,EAEjC7W,MAAMH,EAAAA,GAAAA,KAACuiB,EAAAA,EAAY,IACnBtW,SAAUmJ,GAAkBzU,SAE3ByD,GAAE,qBAGN4S,KAAgBrQ,GAAM5C,OAAS,GAC9B/D,EAAAA,GAAAA,KAACwiB,GAAAA,EAAO,CACN5b,MACEkT,GACI1V,GAAE,4CACF3D,EACLE,UAEDX,EAAAA,GAAAA,KAACC,EAAAA,GAAM,CACLC,KAAK,UACLC,MAAMH,EAAAA,GAAAA,KAACyiB,EAAAA,EAAkB,IACzBxW,SAAU6N,GACVpZ,QAjtDHgiB,KAEnBrN,IAAqB,GACrB,MAAMsN,EAAmBnL,GACzBrV,GACG+I,iBACAC,MAAK0R,UAAmB,IAAD+F,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACtB,GAAIniB,KAAAA,QAAUmD,EAAOif,SAAoC,IAAzBjf,EAAOif,OAAOnf,OAAc,CAyB1D,UAxB0B,IAAIkB,SAASC,IACrCmP,GAAI8O,MAAMC,QAAQ,CAChBxc,MAAOxC,GAAE,oCACTif,SACE/a,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,CACGyD,GAAE,iDACHpE,EAAAA,GAAAA,KAAA,UACAA,EAAAA,GAAAA,KAAA,SACCoE,GAAE,8CACHpE,EAAAA,GAAAA,KAAA,UACAA,EAAAA,GAAAA,KAAA,SACCoE,GAAE,oCAGP8J,KAAMA,KACJhJ,GAAQ,EAAK,EAEf+I,OAAQ7J,GAAE,0BACVoK,SAAUA,KACRtJ,GAAQ,EAAM,EAEhBW,UAAU,GACV,IAEc,MACpB,CAGA,MAAMyd,EACJrf,EAAO2L,aAAaC,QAAU5L,EAAO2L,aAAaF,QACpD,IAAK6T,EAAYjD,GAAgBgD,EAC7BA,EAAc/f,MAAM,KACpB,CAAC,GAAI,IAET,MAAM4M,EAAcrP,KAAAA,QAAUmD,EAAOkM,aACjCqT,KACAvf,EAAOkM,YAELsT,EAAiC,CACrCF,aACAjD,eACAnQ,YAAaA,KACTgF,IACE,OAANlR,QAAM,IAANA,GAAa,QAAP2e,EAAN3e,EAAQ8R,aAAK,IAAA6M,GAAbA,EAAe1M,iBACdpV,KAAAA,YAAoB,OAANmD,QAAM,IAANA,GAAa,QAAP4e,EAAN5e,EAAQ8R,aAAK,IAAA8M,OAAP,EAANA,EAAe1M,SAC1B,CACEuN,aACE5iB,KAAAA,SAAWmD,EAAO8R,MAAMI,UAAiB,OAANlS,QAAM,IAANA,GAAa,QAAP6e,EAAN7e,EAAQ8R,aAAK,IAAA+M,OAAP,EAANA,EAAe1M,mBAEtD3V,EACJkjB,OAAQ,KACFrf,GAAU4Q,SAAS,iBACb,OAAT5Q,SAAS,IAATA,IAAkB,QAATye,EAATze,GAAWS,eAAO,IAAAge,GAAlBA,EAAoB1E,YACJ,SAAjBpa,EAAO2f,WAMHnjB,EALA,CACEojB,WAAY,CAAC5f,EAAO2f,OAAOlS,QACxBkS,KAA6BA,KAItC1jB,KAAM+D,EAAOwR,eACT3U,KAAAA,QAAUmD,EAAO6f,kBACjB,CAAC,EACD,CACEA,iBAAkB7f,EAAO6f,qBAEJ,UAAvB7f,EAAOwR,YACP,CACEsO,SAAU9f,EAAO8R,MAAMtM,QACnBxF,EAAO8R,MAAME,kBACbxV,EACJujB,eAAgB/f,EAAO8R,MAAMC,SAE/B,CAAC,KAGW,QAAZgN,EAAA/e,EAAO2F,aAAK,IAAAoZ,GAAZA,EAAcvZ,QACd,CACEwa,WAAYhgB,EAAO2F,MAAM2B,QACzB2Y,OAAQjgB,EAAO2F,MAAMua,WACrBC,cAAengB,EAAO2F,MAAM2B,QAC5B8Y,iBAAkBpgB,EAAO2F,MAAM0B,WAEjC,CACE2Y,WAAYnM,GAAetV,KAC3B0hB,OAAQ5f,GAAUS,QAAQof,WAC1BC,cAAengB,EAAOuH,eAE5B8Y,aAAcrgB,EAAOqgB,aACrBC,aAActgB,EAAOsgB,aACrBC,eAAgB,GAChBC,IAAKxgB,EAAOmM,SAASqU,IACrBC,IAAKzgB,EAAOmM,SAASsU,IACrBC,OACEC,EAAAA,EAAAA,IAAuB3gB,EAAOmM,SAASsU,IAAK,MAAQ,IACpDE,EAAAA,EAAAA,IAAuB3gB,EAAOmM,SAASuU,MAAO,MAAQ,EAClD,KACA1gB,EAAOmM,SAASuU,SAClB1gB,EAAOmM,SAASyU,YAAc,EAC9B,CACE,CAAC5gB,EAAOmM,SAAS0U,iBACf7gB,EAAOmM,SAASyU,kBAEpBpkB,EACJyiB,OAAQjf,EAAOif,OACf6B,UAAW9gB,EAAO+gB,iBAElBC,IAAK,IACAnkB,KAAAA,UAAYmD,EAAOoS,QAAQ3S,KAAKC,GAAM,CAACA,EAAE8d,SAAU9d,EAAExC,aAErDL,KAAAA,KAAOmD,EAAO0R,gBAAiB,gBAEpCuP,eAAelhB,EAAAA,EAAAA,IAA6BC,EAAOkhB,WAC/C7gB,GAAU4Q,SAAS,iBACb,OAAT5Q,SAAS,IAATA,IAAkB,QAAT2e,EAAT3e,GAAWS,eAAO,IAAAke,GAAlBA,EAAoB5E,YACJ,SAAjBpa,EAAO2f,WAMHnjB,EALA,CACEojB,WAAY,CAAC5f,EAAO2f,OAAOlS,QACxBkS,KAA6BA,OAMpCwB,EAAkBtkB,KAAAA,IACtBA,KAAAA,MAAQmD,EAAOohB,iBAAmB,IACjCC,IACC,MAAMC,GACHthB,EAAOohB,iBAAmB,GAAK,EAC5B,GAAG5B,EAAYtT,gBAAekB,EAAAA,EAAAA,SAA0BiU,IACxD7B,EAAYtT,YAClB,OAAO7L,GACJkhB,kBACC/B,EAAYF,WACZgC,EACA9B,EAAYE,OACZ,IACAF,EAAYnD,aACZmD,EAAYC,cAEbvY,MAAMsa,IAIL,GAAQ,OAAHA,QAAG,IAAHA,IAAAA,EAAKC,QAER,MAAM,IAAItgB,MAAMhB,GAAE,0CAEpB,GAAoB,eAAb,OAAHqhB,QAAG,IAAHA,OAAG,EAAHA,EAAKnmB,QAEP,MAAM,IAAI8F,MACRhB,GAAE,6CAGN,OAAOqhB,CAAG,IAEXra,OAAOua,IAAc,IAADC,EACnB,MAAO,OAAHD,QAAG,IAAHA,GAAY,QAATC,EAAHD,EAAKpe,eAAO,IAAAqe,GAAZA,EAAcC,SAAS,8BACnB,IAAIzgB,MAAMhB,GAAE,0CAEZuhB,CACR,GACA,IAIR9Q,GAA8B5Q,EAAOuH,eACrC,MAAMsa,EAAWC,OAAOC,SAASC,SAAWF,OAAOC,SAASxO,OAC5DI,GAAcV,IAAc,QAC5BkB,GAAmB,CACjBuB,IAAK,oBAAsBxJ,EAC3B+V,eAAgB,CACdC,QAASlhB,QAAQmhB,IAAIhB,GACrB9lB,OAAQ,UACR+mB,mBAAoB,CAClBC,QAASliB,GAAE,4BACXmiB,SAAUniB,GAAE,mCAGhBoiB,SAAU,EACVjf,QAASnD,GAAE,mBAAqB,KAAO+L,EACvC9J,MAAM,UAEFpB,QAAQmhB,IAAIhB,GACfja,MACC9L,IAKQ,IALNonB,GAKApnB,EAWA,GATA+Y,GAAmB,CACjBuB,IAAK,oBAAsBxJ,EAC3BuW,GAAI,0BAA0BD,EAAaE,cAE7CrO,GAAmB,CACjBjK,GAAIoY,EAAaE,UACjBlZ,OAAQkV,EACRngB,KAAMikB,EAAatW,cAGQ,IAA3BlM,EAAOohB,iBACgB,UAAvBphB,EAAOwR,YACP,CACA,MAAMgQ,EAAMgB,EACZ,IAAIG,EAAwB9lB,KAAAA,UAC1BsW,IAIAwP,EAFE,aAAcnB,EAEH3kB,KAAAA,OAAS8lB,EAAY,CAChC,eAAgBnB,EAAIoB,SACpB,aAAc,GACdphB,KAAM+O,KAKK1T,KAAAA,OAAS8lB,EAAY,CAChC,eAAgBnB,EAAIkB,UACpB,eAAgBlB,EAAItV,YACpB,aAAc,GACd1K,KAAM+O,KAIV,MAAMsS,EAAerB,EAAIsB,cACW,IAAhCC,MAAMC,QAAQH,GAChBF,EAAW,gBAAkBE,EAAapjB,KACvCwjB,GAAwBA,EAAE1kB,OAG7BokB,EAAW,gBAAkB,GAc3BE,EAAa/iB,OAAS,GAExBojB,WAAWC,YAAYC,aAAaT,EAExC,KAGHxb,OAAM,KACLgN,GAAmB,CACjBuB,IAAK,oBAAsBxJ,EAC3BuW,GAAIZ,EACJwB,OAAQljB,GAAE,gBACV,GAuBF,IAELgH,OAAOpF,IACN8X,QAAQC,IAAI,oBAAqB/X,EAAE,IAEpCqU,SAAQ,KACPhF,IAAqB,EAAM,GAC3B,EAy6CkB5J,QAAS2J,GAAkBzU,SAE1ByD,GAAE,gCAIPkE,EAAAA,GAAAA,MAACrI,EAAAA,GAAM,CACLC,KAAK,UACLqnB,OAAK,EACL7mB,QAASA,KACPsY,GAAehC,GAAc,EAAE,EAC/BrW,SAAA,CAEDyD,GAAE,eAAe,KAACpE,EAAAA,GAAAA,KAACwnB,EAAAA,EAAa,OAGpCxQ,KAAgBrQ,GAAM5C,OAAS,IAC9BuE,EAAAA,GAAAA,MAACrI,EAAAA,GAAM,CACLS,QAASA,KACPsY,GAAerS,GAAM5C,OAAS,EAAE,EAChCpD,SAAA,CAEDyD,GAAE,4CACHpE,EAAAA,GAAAA,KAACynB,EAAAA,EAAmB,uBAUnCvO,GAAQwO,KACP1nB,EAAAA,GAAAA,KAAC2K,EAAAA,EAAI,CACH,eAAa,iCACbjL,MAAO,CAAEioB,SAAU,SAAUC,IAAK,IAAKjnB,UAEvCX,EAAAA,GAAAA,KAAC6nB,GAAAA,EAAK,CACJzf,KAAK,QACLoS,UAAU,WACVhB,QAASxC,GACT5V,SAAW0mB,IACT9O,GAAe8O,EAAY,EAE7BC,MAAOjnB,KAAAA,IAAM6F,IAAO,CAACqhB,EAAGnI,KAAG,IACtBmI,EACH1oB,OAAQugB,IAAQ7I,GAAc,UAAY,mBAMpDhX,EAAAA,GAAAA,KAACioB,EAAAA,EAAoB,CACnB3Z,eAAiB4Z,IACf,GAAIA,EAAW,CACb,MAAMC,EAAcrnB,KAAAA,MAClB,CAEEqP,YAAa,GACbgV,MAAO,GACPjC,OAAQ,GACR8B,iBAAkB,CAAC,EACnBlB,iBAAkB,GAClBuB,gBAAiB,EACjBzb,MAAO,CACLH,SAAS,EACT6B,UAAW,GACX6Y,WAAY,GACZhb,WAAO1I,EACP8K,QAAS,GACTC,cAAe,IAEjBoE,aAAc,CACZC,OAAQ,IAEVkG,MAAO,CACLtM,SAAS,EACTuM,aAASvV,EACTwV,kBAAcxV,GAEhBmjB,MAAO,QAKTsE,GAGGpnB,KAAAA,QAAUqnB,EAAYhY,eACzBgY,EAAYhY,YACVgY,EAAYhY,YAAc,KAAMkB,EAAAA,EAAAA,IAAqB,IAEzDlP,GAAKkJ,eAAe8c,GACpBnP,GAAerS,GAAM5C,OAAS,GAC9B5B,GAAK+I,iBAAiBE,OAAM,QAC9B,CACA8M,IAA2B,EAE7B7R,KAAM2R,KAEPhB,KAAgBrQ,GAAM5C,OAAS,GAC9B/D,EAAAA,GAAAA,KAAC4d,GAAAA,GAAa,CAAClR,SAAU,KAAK/L,UAC5BX,EAAAA,GAAAA,KAACooB,EAAAA,EAA6B,CAC5B/hB,KAAMkU,GACNzU,QAASA,KACPwU,IAAsB,EAAM,EAE9B+N,uBAAqB,WAGvB5nB,IACC,EASE4P,GAA6DvN,IAGnE,IAHoE,SACzEsN,EAAQ,eACR0R,EAAiB,GAClBhf,EACC,OACEwF,EAAAA,GAAAA,MAAAoC,GAAAA,SAAA,CAAA/J,SAAA,CACGG,KAAAA,IACCA,KAAAA,KAAOsP,EAAU,QAAS,cAAe,oBACzC,CAACjP,EAAOjB,KAAU,IAADooB,EAAAC,EACf,MAAiB,MAAVpnB,EAAgB,MACrBnB,EAAAA,GAAAA,KAACwoB,EAAAA,EAAc,CAGbtoB,KAAMA,EACNiB,MACW,QAATjB,IACiD,QAA5CooB,GAAAG,EAAAA,EAAAA,IAAsBtnB,EAAM0C,WAAY,YAAI,IAAAykB,OAAA,EAA5CA,EAA8CI,SAC7C,GACA5G,EACF,GACAhhB,KAAAA,SAAWK,GAAS2gB,EAAiB,GAE3C6G,KAAM,CACJhE,MAAOvU,EAASuU,QAC+B,QAA1C4D,GAAAE,EAAAA,EAAAA,IAAsBrY,EAASuU,MAAO,YAAI,IAAA4D,OAAA,EAA1CA,EAA4CG,SAAU,GACvD5G,OACArhB,IAfDP,EAkBR,IAGJkQ,GACDA,EAASyU,aACTzU,EAAS0U,iBACThkB,KAAAA,SAAWsP,EAASyU,cAClB7kB,EAAAA,GAAAA,KAACwoB,EAAAA,EACC,CACAtoB,KAAMkQ,EAAS0U,gBACf3jB,MAAOL,KAAAA,SAAWsP,EAASyU,YAAc/C,KAEzC,OACH,EAID0B,GAAoBA,KACxB,IAAIpD,EAAO,GACX,MAAMwI,EACJ,iEACF,IAAK,IAAItD,EAAI,EAAGA,EAAI,EAAGA,IACrBlF,GAAQwI,EAASC,OAAOC,KAAKC,MAAsBH,GAAhBE,KAAKE,WAE1C,OAAO5I,EAAO,UAAU,EAG1B,M","sources":["BAICard.tsx","components/DatePickerISO.tsx","components/HiddenFormItem.tsx","components/PortSelectFormItem.tsx","components/SessionLauncherErrorTourProps.tsx","components/SessionNameFormItem.tsx","components/SessionOwnerSetterCard.tsx","components/SessionTemplateModal.tsx","components/__generated__/SessionOwnerSetterCardQuery.graphql.ts","hooks/useRecentSessionHistory.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\nexport interface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n  ref?: React.LegacyRef<HTMLDivElement> | undefined;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      className={status === 'error' ? 'bai-card-error' : ''}\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport { GetRef } from 'antd/lib';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO = React.forwardRef<\n  GetRef<typeof DatePicker>,\n  DatePickerISOProps\n>(({ value, onChange, localFormat, ...pickerProps }, ref) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      ref={ref}\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n});\n\nexport default DatePickerISO;\n","import { Form, FormItemProps } from 'antd';\nimport React, { useEffect } from 'react';\n\ninterface HiddenFormItemProps extends Omit<FormItemProps, 'children'> {\n  value: any;\n}\nconst HiddenFormItem: React.FC<HiddenFormItemProps> = ({ value, ...props }) => {\n  const form = Form.useFormInstance();\n  useEffect(() => {\n    form.setFieldValue(props.name, value);\n  }, [value, form, props.name]);\n  return <Form.Item {...props} hidden />;\n};\n\nexport default HiddenFormItem;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({\n  name = 'ports',\n  ...formItemProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const form = Form.useFormInstance();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name={name}\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        () => ({\n          validator(rule, values) {\n            if (\n              transformPortValuesToNumbers(values).length <=\n              baiClient._config.maxCountForPreopenPorts\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(\n                  t('session.launcher.PreOpenPortMaxCountLimit', {\n                    count: baiClient._config.maxCountForPreopenPorts,\n                  }),\n                ),\n              );\n            }\n          },\n        }),\n        () => ({\n          // To check if the port range is not start <= end\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                return parseInt(v).toString() === v || isPortRangeStr(v);\n              })\n            ) {\n              return Promise.resolve();\n            } else {\n              return Promise.reject(\n                new Error(t('session.launcher.InvalidPortFormat')),\n              );\n            }\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            const allPorts = transformPortValuesToNumbers(values);\n            if (\n              _.every(allPorts, (port) => {\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n        () => ({\n          validator(rule, values) {\n            // To check if the port is duplicated\n            const allPorts = transformPortValuesToNumbers(values);\n            if (_.uniq(allPorts).length === allPorts.length) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.DuplicatedPort')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          const hasDuplicated =\n            _.filter(\n              transformPortValuesToNumbers(form.getFieldValue(name)),\n              (v) => v === parseInt(props.value),\n            ).length > 1;\n          return (\n            <PortTag\n              inValid={hasDuplicated}\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n  inValid?: boolean;\n}\n\nexport const PortTag: React.FC<PortTagProps> = ({\n  inValid,\n  value,\n  ...tagProps\n}) => {\n  return (\n    <Tag\n      color={!inValid && isValidPortStr(value) ? undefined : 'red'}\n      {...tagProps}\n    />\n  );\n};\n\nexport const isValidPortStr = (portStr: string) => {\n  // consider range as valid\n  if (isPortRangeStr(portStr)) {\n    const splitPortRange = portStr.split(':');\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start >= MIN_PORT && end <= MAX_PORT;\n  } else if (\n    portStr === parseInt(portStr).toString() &&\n    parseInt(portStr) >= MIN_PORT &&\n    parseInt(portStr) <= MAX_PORT\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const isPortRangeStr = (portRange: string) => {\n  const splitPortRange = portRange.split(':');\n  if (splitPortRange.length === 2) {\n    const [start, end] = splitPortRange.map((v) => parseInt(v));\n    return start <= end;\n  }\n  return false;\n};\n\nexport const parsePortRangeToNumbers = (portRange: string) => {\n  const [start, end] = portRange.split(':').map((v) => parseInt(v));\n  return _.range(start, end + 1);\n};\n\nexport const transformPortValuesToNumbers = (\n  values: PortSelectFormValues['ports'],\n) => {\n  return _.flatten(\n    _.map(values, (v) =>\n      isPortRangeStr(v) ? parsePortRangeToNumbers(v) : parseInt(v),\n    ),\n  );\n};\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useBAISettingUserState } from '../hooks/useBAISetting';\nimport { Tour, TourProps } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionLauncherValidationTourProps extends Omit<TourProps, 'steps'> {}\nconst SessionLauncherValidationTour: React.FC<\n  SessionLauncherValidationTourProps\n> = ({ open, onClose, ...otherProps }) => {\n  const { t } = useTranslation();\n  const [hasOpenedValidationTour, setHasOpenedValidationTour] =\n    useBAISettingUserState('has_opened_tour_neo_session_validation');\n\n  const steps = [\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourguide.NeoSessionLauncher.ValidationErrorText'),\n      target: () =>\n        document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement,\n    },\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t(\n        'tourguide.NeoSessionLauncher.FixErrorFieldbyModifyButton',\n      ),\n      target: () =>\n        (\n          document.getElementsByClassName('bai-card-error')?.[0] as HTMLElement\n        )?.querySelector('.ant-card-extra') as HTMLElement,\n    },\n    {\n      title: t('tourguide.NeoSessionLauncher.ValidationErrorTitle'),\n      description: t('tourguide.NeoSessionLauncher.FixErrorAndTryAgainText'),\n      target: () =>\n        document.querySelector(\n          '[data-test-id=\"neo-session-launcher-tour-step-navigation\"]',\n        ) as HTMLElement,\n    },\n  ];\n  return (\n    <Tour\n      steps={steps}\n      onClose={(e) => {\n        onClose?.(e);\n        setHasOpenedValidationTour(true);\n      }}\n      open={!hasOpenedValidationTour && open}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SessionLauncherValidationTour;\n","import { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={[\n        {\n          min: 4,\n          message: t('session.Validation.SessionNameTooShort'),\n        },\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          validator(f, value) {\n            if (_.isEmpty(value)) {\n              return Promise.resolve();\n            }\n            if (!/^\\w/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldStartWith'),\n              );\n            }\n\n            if (!/^[\\w.-]*$/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameInvalidCharacter'),\n              );\n            }\n\n            if (!/\\w$/.test(value) && value.length >= 4) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldEndWith'),\n              );\n            }\n            return Promise.resolve();\n          },\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import BAICard, { BAICardProps } from '../BAICard';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAISelect from './BAISelect';\nimport Flex from './Flex';\nimport HiddenFormItem from './HiddenFormItem';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { SessionOwnerSetterCardQuery } from './__generated__/SessionOwnerSetterCardQuery.graphql';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport { CardProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport { CheckIcon } from 'lucide-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { fetchQuery, useRelayEnvironment } from 'react-relay';\n\nexport interface SessionOwnerSetterFormValues {\n  owner?:\n    | {\n        email: string;\n        accesskey: string;\n        project: string;\n        resourceGroup: string;\n        enabled: true;\n        domainName: string;\n      }\n    | {\n        email?: string;\n        accesskey?: string;\n        project?: string;\n        resourceGroup?: string;\n        enabled: false;\n        domainName?: string;\n      };\n}\n\nconst SessionOwnerSetterCard: React.FC<CardProps> = (props) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const form = Form.useFormInstance<SessionOwnerSetterFormValues>();\n\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n\n  const [fetchingEmail, setFetchingEmail] = useState<string>();\n  const relayEvn = useRelayEnvironment();\n\n  const { data, isFetching } = useTanQuery({\n    queryKey: ['SessionOwnerSetterCard', 'ownerInfo', fetchingEmail],\n    queryFn: () => {\n      const email = form.getFieldValue(['owner', 'email']);\n      if (!email) return;\n\n      const query = graphql`\n        query SessionOwnerSetterCardQuery($email: String!) {\n          keypairs(email: $email) {\n            access_key\n          }\n          user(email: $email) {\n            domain_name\n            groups {\n              name\n              id\n            }\n          }\n        }\n      `;\n      return fetchQuery<SessionOwnerSetterCardQuery>(relayEvn, query, {\n        email,\n      }).toPromise();\n    },\n    enabled: !!fetchingEmail,\n  });\n\n  const ownerKeypairs = form.getFieldValue(['owner', 'email'])\n    ? data?.keypairs\n    : undefined;\n  const owner = form.getFieldValue(['owner', 'email']) ? data?.user : undefined;\n\n  const nonExistentOwner = !isFetching && fetchingEmail && !owner;\n  return (\n    <Card\n      title={t('session.launcher.SetSessionOwner')}\n      extra={\n        <Form.Item name={['owner', 'enabled']} valuePropName=\"checked\" noStyle>\n          <Switch />\n        </Form.Item>\n      }\n      styles={\n        isActive\n          ? undefined\n          : {\n              header: {\n                borderBottom: 'none',\n              },\n              body: {\n                display: isActive ? 'block' : 'none',\n              },\n            }\n      }\n      {...props}\n    >\n      <HiddenFormItem\n        name={['owner', 'domainName']}\n        value={owner?.domain_name}\n      />\n      <Form.Item dependencies={[['owner', 'enabled']]} noStyle>\n        {({ getFieldValue }) => {\n          return (\n            <>\n              <Flex>\n                <Form.Item\n                  name={['owner', 'email']}\n                  label={t('session.launcher.OwnerEmail')}\n                  rules={[\n                    {\n                      required: isActive,\n                    },\n                    {\n                      type: 'email',\n                      message: t('credential.validation.InvalidEmailAddress'),\n                    },\n                  ]}\n                  style={{ flex: 1 }}\n                  validateStatus={nonExistentOwner ? 'error' : undefined}\n                  help={\n                    nonExistentOwner\n                      ? t('credential.NoUserToDisplay')\n                      : undefined\n                  }\n                >\n                  <Input.Search\n                    onSearch={(v) => {\n                      // startTransition(()=>{\n\n                      form\n                        .validateFields([['owner', 'email']])\n                        .then(() => {\n                          setFetchingEmail(v);\n                        })\n                        .catch(() => {});\n                      // })\n                    }}\n                    onChange={() => {\n                      setFetchingEmail('');\n                      form.setFieldsValue({\n                        owner: {\n                          accesskey: '',\n                          project: undefined,\n                          resourceGroup: undefined,\n                        },\n                      });\n                    }}\n                    loading={isFetching}\n                    enterButton={\n                      !isFetching && owner ? (\n                        <Button icon={<CheckIcon />} />\n                      ) : undefined\n                    }\n                  />\n                </Form.Item>\n              </Flex>\n              <Form.Item\n                name={['owner', 'accesskey']}\n                label={t('session.launcher.OwnerAccessKey')}\n                rules={[\n                  {\n                    required: getFieldValue(['owner', 'enabled']),\n                  },\n                ]}\n              >\n                <BAISelect\n                  options={_.map(ownerKeypairs, (k) => {\n                    return {\n                      label: k?.access_key,\n                      value: k?.access_key,\n                    };\n                  })}\n                  autoSelectOption\n                  disabled={_.isEmpty(fetchingEmail) || isFetching}\n                  // defaultActiveFirstOption\n                />\n              </Form.Item>\n              <Row gutter={token.marginSM}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['owner', 'project']}\n                    label={t('session.launcher.OwnerGroup')}\n                    rules={[\n                      {\n                        required: getFieldValue(['owner', 'enabled']),\n                      },\n                    ]}\n                  >\n                    <BAISelect\n                      options={_.map(owner?.groups, (g) => {\n                        return {\n                          label: g?.name,\n                          value: g?.name,\n                        };\n                      })}\n                      autoSelectOption\n                      disabled={_.isEmpty(fetchingEmail) || isFetching}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item dependencies={[['owner', 'project']]} noStyle>\n                    {({ getFieldValue }) => {\n                      return (\n                        <Suspense\n                          fallback={\n                            <Form.Item\n                              label={t('session.launcher.OwnerResourceGroup')}\n                              rules={[\n                                {\n                                  required: getFieldValue(['owner', 'enabled']),\n                                },\n                              ]}\n                            >\n                              <Select loading />\n                            </Form.Item>\n                          }\n                        >\n                          <Form.Item\n                            name={['owner', 'resourceGroup']}\n                            label={t('session.launcher.OwnerResourceGroup')}\n                            rules={[\n                              {\n                                required: getFieldValue(['owner', 'enabled']),\n                              },\n                            ]}\n                          >\n                            {getFieldValue(['owner', 'project']) ? (\n                              <ResourceGroupSelect\n                                projectName={getFieldValue([\n                                  'owner',\n                                  'project',\n                                ])}\n                                disabled={\n                                  _.isEmpty(fetchingEmail) || isFetching\n                                }\n                                autoSelectDefault\n                              />\n                            ) : (\n                              <Select disabled />\n                            )}\n                          </Form.Item>\n                        </Suspense>\n                      );\n                    }}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </>\n          );\n        }}\n      </Form.Item>\n    </Card>\n  );\n};\n\nexport const SessionOwnerSetterPreviewCard: React.FC<BAICardProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  const isActive = Form.useWatch(['owner', 'enabled'], form);\n  const currentUserRole = useCurrentUserRole();\n  return (\n    (currentUserRole === 'admin' || currentUserRole === 'superadmin') &&\n    isActive && (\n      <BAICard\n        title={t('session.launcher.SetSessionOwner')}\n        size=\"small\"\n        status={\n          form.getFieldError(['owner', 'email']).length > 0 ||\n          form.getFieldError(['owner', 'accesskey']).length > 0 ||\n          form.getFieldError(['owner', 'project']).length > 0 ||\n          form.getFieldError(['owner', 'resourceGroup']).length > 0\n            ? 'error'\n            : undefined\n        }\n        extraButtonTitle={t('button.Edit')}\n        {...props}\n      >\n        <Descriptions size=\"small\" column={1}>\n          <Descriptions.Item label={t('session.launcher.OwnerEmail')}>\n            {form.getFieldValue(['owner', 'email'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerAccessKey')}>\n            {form.getFieldValue(['owner', 'accesskey'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerGroup')}>\n            {form.getFieldValue(['owner', 'project'])}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('session.launcher.OwnerResourceGroup')}>\n            {form.getFieldValue(['owner', 'resourceGroup'])}\n          </Descriptions.Item>\n        </Descriptions>\n      </BAICard>\n    )\n  );\n};\n\nexport default SessionOwnerSetterCard;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\nimport {\n  ResourceNumbersOfSession,\n  SessionLauncherFormValue,\n} from '../pages/SessionLauncherPage';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport ImageMetaIcon from './ImageMetaIcon';\nimport { Divider, Table, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionTemplateModalProps\n  extends Omit<BAIModalProps, 'onOk' | 'onCancel'> {\n  onRequestClose: (formValue?: SessionLauncherFormValue) => void;\n}\nconst SessionTemplateModal: React.FC<SessionTemplateModalProps> = ({\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const [sessionHistory] = useRecentSessionHistory();\n\n  const [, { getImageAliasName, getBaseVersion }] = useBackendAIImageMetaData();\n\n  const [selectedHistoryId, setSelectedHistoryId] = useState<string>();\n\n  const parsedSessionHistory = useMemo(() => {\n    return _.map(sessionHistory, (history) => {\n      const params = new URLSearchParams(history.params);\n      const formValues: SessionLauncherFormValue = JSON.parse(\n        params.get('formValues') || '{}',\n      );\n      return {\n        ...history,\n        ...formValues,\n        // resourceAllocation: `${history.cpu}CPU ${history.memory}GB`,\n      };\n    });\n  }, [sessionHistory]);\n\n  return (\n    <BAIModal\n      width={800}\n      title={t('session.launcher.RecentHistory')}\n      okButtonProps={{ disabled: !selectedHistoryId }}\n      okText={t('button.Apply')}\n      {...modalProps}\n      onOk={(e) => {\n        const params = _.find(sessionHistory, {\n          id: selectedHistoryId,\n        })?.params;\n        modalProps.onRequestClose?.(\n          JSON.parse(new URLSearchParams(params).get('formValues') || '{}'),\n        );\n      }}\n      onCancel={() => {\n        // reset\n        setSelectedHistoryId(undefined);\n        modalProps.onRequestClose();\n      }}\n    >\n      <Divider style={{ margin: 0 }} />\n      <Table\n        showHeader={false}\n        scroll={{ x: 'max-content' }}\n        dataSource={parsedSessionHistory}\n        pagination={false}\n        rowSelection={{\n          type: 'radio',\n          selectedRowKeys: selectedHistoryId ? [selectedHistoryId] : [],\n          onSelect: (record) => {\n            setSelectedHistoryId(record.id);\n          },\n        }}\n        onRow={(record) => ({\n          onClick: () => {\n            setSelectedHistoryId(record.id);\n          },\n        })}\n        rowKey={(record) => record.id}\n        columns={[\n          // {\n          //   title: t('session.launcher.SessionName'),\n          //   dataIndex: 'sessionName',\n          //   render: (sessionName, record) => {\n          //     return sessionName ?? '-';\n          //   },\n          // },\n          {\n            title: t('general.Image'),\n            dataIndex: ['environments', 'version'],\n            render: (version, record) => {\n              const imageStr =\n                record.environments.version || record.environments.manual;\n              return (\n                !!imageStr && (\n                  <Flex gap={'xs'}>\n                    <ImageMetaIcon image={imageStr} />\n                    <Typography.Text>\n                      {getImageAliasName(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {getBaseVersion(imageStr)}\n                    </Typography.Text>\n                    <Typography.Text>\n                      {record.sessionName ? `(${record.sessionName})` : null}\n                    </Typography.Text>\n                  </Flex>\n                )\n              );\n            },\n            // onCell: () => ({\n            //   style: { maxWidth: 250, textOverflow: 'ellipsis' },\n            // }),\n          },\n          {\n            title: t('session.launcher.ResourceAllocation'),\n            dataIndex: 'resource',\n            render: (resource) => {\n              // return JSON.stringify(resource)\n              return (\n                <Flex>\n                  <ResourceNumbersOfSession resource={resource} />\n                </Flex>\n              );\n            },\n          },\n          // {\n          //   dataIndex: 'mounts',\n          //   render: (value, record) => {\n          //     record.mou\n          //   }\n          // },\n          {\n            title: t('session.launcher.CreatedAt'),\n            dataIndex: 'createdAt',\n            render: (createdAt: string) => {\n              return dayjs(createdAt).fromNow();\n            },\n          },\n        ]}\n      />\n      {/* <Tabs\n        defaultActiveKey=\"history\"\n        items={[\n          {\n            key: 'template',\n            label: t('session.launcher.Template'),\n            children: <div>Template</div>,\n          },\n          {\n            key: 'history',\n            label: t('session.launcher.RecentHistory'),\n            children: (\n              \n            ),\n          },\n        ]}\n      /> */}\n    </BAIModal>\n  );\n};\n\nexport default SessionTemplateModal;\n","/**\n * @generated SignedSource<<d19e05501e2f8044559e0684fe36364e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type SessionOwnerSetterCardQuery$variables = {\n  email: string;\n};\nexport type SessionOwnerSetterCardQuery$data = {\n  readonly keypairs: ReadonlyArray<{\n    readonly access_key: string | null | undefined;\n  } | null | undefined> | null | undefined;\n  readonly user: {\n    readonly domain_name: string | null | undefined;\n    readonly groups: ReadonlyArray<{\n      readonly id: string | null | undefined;\n      readonly name: string | null | undefined;\n    } | null | undefined> | null | undefined;\n  } | null | undefined;\n};\nexport type SessionOwnerSetterCardQuery = {\n  response: SessionOwnerSetterCardQuery$data;\n  variables: SessionOwnerSetterCardQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"access_key\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"domain_name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"UserGroup\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"groups\",\n  \"plural\": true,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"name\",\n      \"storageKey\": null\n    },\n    (v4/*: any*/)\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"KeyPair\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"keypairs\",\n        \"plural\": true,\n        \"selections\": [\n          (v2/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v3/*: any*/),\n          (v5/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"a8de553c14d6730a6825cba2f409be0d\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"SessionOwnerSetterCardQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query SessionOwnerSetterCardQuery(\\n  $email: String!\\n) {\\n  keypairs(email: $email) {\\n    access_key\\n    id\\n  }\\n  user(email: $email) {\\n    domain_name\\n    groups {\\n      name\\n      id\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"ba086835ea654ab889e0e6aaefa0abfe\";\n\nexport default node;\n","import { generateRandomString } from '../helper';\nimport { SessionHistory, useBAISettingUserState } from './useBAISetting';\nimport { useEventNotStable } from './useEventNotStable';\n\nexport const useRecentSessionHistory = () => {\n  const [recentSessionHistory, setRecentSessionHistory] =\n    useBAISettingUserState('recentSessionHistory');\n\n  const push = useEventNotStable(\n    ({\n      id,\n      params,\n      createdAt,\n    }: SelectivePartial<SessionHistory, 'id' | 'createdAt'>) => {\n      const newHistory: SessionHistory = {\n        id: id ?? generateRandomString(8),\n        params,\n        createdAt: createdAt ?? new Date().toISOString(),\n      };\n      // push new history to the top of recentSessionHistory and keep it up to 5\n      const newRecentSessionHistory = [\n        newHistory,\n        ...(recentSessionHistory || []),\n      ].slice(0, 5);\n      setRecentSessionHistory(newRecentSessionHistory);\n    },\n  );\n  const clear = useEventNotStable(() => setRecentSessionHistory([]));\n  const remove = useEventNotStable((id: string) => {\n    const newRecentSessionHistory = (recentSessionHistory || []).filter(\n      (item) => item.id !== id,\n    );\n    setRecentSessionHistory(newRecentSessionHistory);\n  });\n  return [\n    recentSessionHistory,\n    {\n      push,\n      clear,\n      remove,\n    },\n  ] as const;\n};\n","import BAICard from '../BAICard';\nimport BAIIntervalView from '../components/BAIIntervalView';\nimport DatePickerISO from '../components/DatePickerISO';\nimport DoubleTag from '../components/DoubleTag';\nimport EnvVarFormList, {\n  sanitizeSensitiveEnv,\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport { ImageTags } from '../components/ImageTags';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n  transformPortValuesToNumbers,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionLauncherValidationTour from '../components/SessionLauncherErrorTourProps';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport SessionOwnerSetterCard, {\n  SessionOwnerSetterFormValues,\n} from '../components/SessionOwnerSetterCard';\nimport { SessionOwnerSetterPreviewCard } from '../components/SessionOwnerSetterCard';\nimport SessionTemplateModal from '../components/SessionTemplateModal';\nimport SourceCodeViewer from '../components/SourceCodeViewer';\nimport VFolderTableFormItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport {\n  compareNumberWithUnits,\n  formatDuration,\n  generateRandomString,\n  getImageFullName,\n  convertBinarySizeUnit,\n  preserveDotStartCase,\n} from '../helper';\nimport {\n  useBackendAIImageMetaData,\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useCurrentUserRole } from '../hooks/backendai';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport {\n  useCurrentProjectValue,\n  useCurrentResourceGroupState,\n} from '../hooks/useCurrentProject';\nimport { useRecentSessionHistory } from '../hooks/useRecentSessionHistory';\nimport { useThemeMode } from '../hooks/useThemeMode';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn, useToggle } from 'ahooks';\nimport {\n  Alert,\n  App,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Divider,\n  Form,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n  bootstrap_script?: string;\n  agent_list?: string[];\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  batchTimeout?: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n    timeoutEnabled?: boolean;\n    timeout?: string;\n    timeoutUnit?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n  bootstrap_script?: string;\n}\n\nexport type SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues &\n  SessionOwnerSetterFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\n\nexport type AppOption = {\n  'session-name'?: string;\n  'session-uuid'?: string;\n  'access-key'?: string;\n  mode?: SessionMode;\n  'app-services'?: Array<string>;\n  runtime?: string;\n  filename?: string;\n  // [key in string]: any;\n};\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useAtomValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n  const currentUserRole = useCurrentUserRole();\n  const [currentGlobalResourceGroup, setCurrentGlobalResourceGroup] =\n    useCurrentResourceGroupState();\n  const [, { getBaseVersion, getBaseImage, tagAlias }] =\n    useBackendAIImageMetaData();\n\n  const supportExtendedImageInfo =\n    baiClient?.supports('extended-image-info') ?? false;\n  const supportBatchTimeout = baiClient?.supports('batch-timeout') ?? false;\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: DeepPartial<SessionLauncherFormValue> = useMemo(\n    () => ({\n      sessionType: 'interactive',\n      // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n      allocationPreset: 'auto-preset',\n      hpcOptimization: {\n        autoEnabled: true,\n        OMP_NUM_THREADS: '1',\n        OPENBLAS_NUM_THREADS: '1',\n      },\n      batch: {\n        enabled: false,\n        command: undefined,\n        scheduleDate: undefined,\n        ...(supportBatchTimeout && {\n          timeoutEnabled: false,\n          timeout: undefined,\n          timeoutUnit: 's',\n        }),\n      },\n      envvars: [],\n      // set default_session_environment only if set\n      ...(baiClient._config?.default_session_environment && {\n        environments: {\n          environment: baiClient._config?.default_session_environment,\n        },\n      }),\n      ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n      resourceGroup: currentGlobalResourceGroup || undefined,\n    }),\n    [\n      baiClient._config?.default_session_environment,\n      currentGlobalResourceGroup,\n      supportBatchTimeout,\n    ],\n  );\n  const StepParam = withDefault(NumberParam, 0);\n  const FormValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const AppOptionParam = withDefault(JsonParam, {});\n  const [\n    {\n      step: currentStep,\n      formValues: formValuesFromQueryParams,\n      redirectTo,\n      appOption: appOptionFromQueryParams,\n    },\n    setQuery,\n  ] = useQueryParams({\n    step: StepParam,\n    formValues: FormValuesParam,\n    redirectTo: StringParam,\n    appOption: AppOptionParam,\n  });\n  const { search } = useLocation();\n\n  const { isDarkMode } = useThemeMode();\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const [isOpenTemplateModal, { toggle: toggleIsOpenTemplateModal }] =\n    useToggle();\n  const { upsertNotification } = useSetBAINotification();\n  const [, { push: pushSessionHistory }] = useRecentSessionHistory();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      const currentValue = form.getFieldsValue();\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.extend(\n            _.omit(\n              form.getFieldsValue(),\n              ['environments.image'],\n              ['environments.customizedTag'],\n              ['autoMountedFolderNames'],\n              ['owner'],\n              ['envvars'],\n            ),\n            {\n              envvars: sanitizeSensitiveEnv(currentValue.envvars),\n            },\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  useEffect(() => {\n    if (!_.isEmpty(formValuesFromQueryParams)) {\n      form.validateFields().catch((e) => {});\n    }\n    // Run this memo only for the first time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const mergedInitialValues = useMemo(() => {\n    return _.merge({}, INITIAL_FORM_VALUES, formValuesFromQueryParams);\n  }, [INITIAL_FORM_VALUES, formValuesFromQueryParams]);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: <PlayCircleFilled />,\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [finalStepLastValidateTime, setFinalStepLastValidateTime] =\n    useUpdatableState('first'); // Force re-render after validation in final step.\n\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch((error) => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  useEffect(() => {\n    if (finalStepLastValidateTime !== 'first') {\n      if (hasError) {\n        setValidationTourOpen(true);\n      } else {\n        setValidationTourOpen(false);\n      }\n    }\n  }, [finalStepLastValidateTime, hasError]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n    setIsStartingSession(true);\n    const usedSearchParams = search;\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          ...(supportBatchTimeout &&\n          values?.batch?.timeoutEnabled &&\n          !_.isUndefined(values?.batch?.timeout)\n            ? {\n                batchTimeout:\n                  _.toString(values.batch.timeout) + values?.batch?.timeoutUnit,\n              }\n            : undefined),\n          config: {\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n            type: values.sessionType,\n            ...(_.isEmpty(values.bootstrap_script)\n              ? {}\n              : {\n                  bootstrap_script: values.bootstrap_script,\n                }),\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            ...(values.owner?.enabled\n              ? {\n                  group_name: values.owner.project,\n                  domain: values.owner.domainName,\n                  scaling_group: values.owner.project,\n                  owner_access_key: values.owner.accesskey,\n                }\n              : {\n                  group_name: currentProject.name,\n                  domain: baiClient._config.domainName,\n                  scaling_group: values.resourceGroup,\n                }),\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: transformPortValuesToNumbers(values.ports),\n            ...(baiClient.supports('agent-select') &&\n            !baiClient?._config?.hideAgents &&\n            values.agent !== 'auto'\n              ? {\n                  agent_list: [values.agent].filter(\n                    (agent): agent is string => !!agent,\n                  ),\n                } // Filter out undefined values\n              : undefined),\n          },\n        };\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                30000,\n                sessionInfo.architecture,\n                sessionInfo.batchTimeout,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                if (err?.message?.includes('The session already exists')) {\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                } else {\n                  throw err;\n                }\n              });\n          },\n        );\n        // After sending a create request, navigate to job page and set current resource group\n        setCurrentGlobalResourceGroup(values.resourceGroup);\n        const backupTo = window.location.pathname + window.location.search;\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            statusDescriptions: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(\n            ([firstSession]: Array<{\n              kernelId?: string;\n              sessionId: string;\n              sessionName: string;\n              servicePorts: Array<{ name: string }>;\n            }>) => {\n              // After the session is created, add a \"See Details\" button to navigate to the session page.\n              upsertNotification({\n                key: 'session-launcher:' + sessionName,\n                to: `/session?sessionDetail=${firstSession.sessionId}`,\n              });\n              pushSessionHistory({\n                id: firstSession.sessionId,\n                params: usedSearchParams,\n                name: firstSession.sessionName,\n              });\n              if (\n                values.num_of_sessions === 1 &&\n                values.sessionType !== 'batch'\n              ) {\n                const res = firstSession;\n                let appOptions: AppOption = _.cloneDeep(\n                  appOptionFromQueryParams,\n                );\n                if ('kernelId' in res) {\n                  // API v4\n                  appOptions = _.extend(appOptions, {\n                    'session-name': res.kernelId,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                } else {\n                  // API >= v5\n                  appOptions = _.extend(appOptions, {\n                    'session-uuid': res.sessionId,\n                    'session-name': res.sessionName,\n                    'access-key': '',\n                    mode: sessionMode,\n                    // mode: this.mode,\n                  });\n                }\n                const service_info = res.servicePorts;\n                if (Array.isArray(service_info) === true) {\n                  appOptions['app-services'] = service_info.map(\n                    (a: { name: string }) => a.name,\n                  );\n                } else {\n                  appOptions['app-services'] = [];\n                }\n                // TODO: support import and inference\n                // if (sessionMode === 'import') {\n                //   appOptions['runtime'] = 'jupyter';\n                //   appOptions['filename'] = this.importFilename;\n                // }\n                // if (sessionMode === 'inference') {\n                //   appOptions['runtime'] = appOptions['app-services'].find(\n                //     (element: any) => !['ttyd', 'sshd'].includes(element),\n                //   );\n                // }\n\n                // only launch app when it has valid service ports\n                if (service_info.length > 0) {\n                  // @ts-ignore\n                  globalThis.appLauncher.showLauncher(appOptions);\n                }\n              }\n            },\n          )\n          .catch(() => {\n            upsertNotification({\n              key: 'session-launcher:' + sessionName,\n              to: backupTo,\n              toText: t('button.Edit'),\n            });\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n\n  const [validationTourOpen, setValidationTourOpen] = useState(false);\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={4} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                // icon={<BlockOutlined />}\n                // disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n                onClick={() => toggleIsOpenTemplateModal()}\n              >\n                {t('session.launcher.RecentHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={mergedInitialValues}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                  <Form.Item\n                    name=\"bootstrap_script\"\n                    label=\"Bootstrap Script\"\n                    hidden\n                  >\n                    <Input />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      noStyle\n                      dependencies={[['batch', 'scheduleDate']]}\n                    >\n                      {() => {\n                        const scheduleDate = form.getFieldValue([\n                          'batch',\n                          'scheduleDate',\n                        ]);\n                        return (\n                          <BAIIntervalView\n                            delay={1000}\n                            callback={() => {\n                              const scheduleDate = form.getFieldValue([\n                                'batch',\n                                'scheduleDate',\n                              ]);\n                              if (scheduleDate) {\n                                if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                  if (\n                                    form.getFieldError([\n                                      'batch',\n                                      'scheduleDate',\n                                    ]).length === 0\n                                  ) {\n                                    form.validateFields([\n                                      ['batch', 'scheduleDate'],\n                                    ]);\n                                  }\n                                  return undefined;\n                                } else {\n                                  return dayjs(scheduleDate).fromNow();\n                                }\n                              } else {\n                                return undefined;\n                              }\n                            }}\n                            triggerKey={scheduleDate ? scheduleDate : 'none'}\n                            render={(time) => {\n                              return (\n                                <Form.Item\n                                  label={t('session.launcher.SessionStartTime')}\n                                  extra={time}\n                                >\n                                  <Flex direction=\"row\" gap={'xs'}>\n                                    <Form.Item\n                                      noStyle\n                                      name={['batch', 'enabled']}\n                                      valuePropName=\"checked\"\n                                    >\n                                      <Checkbox\n                                        onChange={(e) => {\n                                          if (\n                                            e.target.checked &&\n                                            _.isEmpty(\n                                              form.getFieldValue([\n                                                'batch',\n                                                'scheduleDate',\n                                              ]),\n                                            )\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              dayjs()\n                                                .add(2, 'minutes')\n                                                .toISOString(),\n                                            );\n                                          } else if (\n                                            e.target.checked === false\n                                          ) {\n                                            form.setFieldValue(\n                                              ['batch', 'scheduleDate'],\n                                              undefined,\n                                            );\n                                          }\n                                          form.validateFields([\n                                            ['batch', 'scheduleDate'],\n                                          ]);\n                                        }}\n                                      >\n                                        {t('session.launcher.Enable')}\n                                      </Checkbox>\n                                    </Form.Item>\n                                    <Form.Item\n                                      noStyle\n                                      // dependencies={[['batch', 'enabled']]}\n                                      shouldUpdate={(prev, next) => {\n                                        return (\n                                          // @ts-ignore\n                                          prev.batch?.enabled !==\n                                          next.batch?.enabled\n                                        );\n                                      }}\n                                    >\n                                      {() => {\n                                        const disabled =\n                                          form.getFieldValue('batch')\n                                            ?.enabled !== true;\n                                        return (\n                                          <>\n                                            <Form.Item\n                                              name={['batch', 'scheduleDate']}\n                                              noStyle\n                                              rules={[\n                                                {\n                                                  // required: true,\n                                                  validator: async (\n                                                    rule,\n                                                    value,\n                                                  ) => {\n                                                    if (\n                                                      value &&\n                                                      dayjs(value).isBefore(\n                                                        dayjs(),\n                                                      )\n                                                    ) {\n                                                      return Promise.reject(\n                                                        t(\n                                                          'session.launcher.StartTimeMustBeInTheFuture',\n                                                        ),\n                                                      );\n                                                    }\n                                                    return Promise.resolve();\n                                                  },\n                                                },\n                                              ]}\n                                            >\n                                              <DatePickerISO\n                                                disabled={disabled}\n                                                showTime\n                                                localFormat\n                                                disabledDate={(value) => {\n                                                  return value.isBefore(\n                                                    dayjs().startOf('day'),\n                                                  );\n                                                }}\n                                              />\n                                            </Form.Item>\n                                            {/* <Form.Item\n                                              noStyle\n                                              name={['batch', 'scheduleTime']}\n                                            >\n                                              <TimePicker disabled={disabled} />\n                                            </Form.Item> */}\n                                          </>\n                                        );\n                                      }}\n                                    </Form.Item>\n                                  </Flex>\n                                </Form.Item>\n                              );\n                            }}\n                          />\n                        );\n                      }}\n                    </Form.Item>\n\n                    {supportBatchTimeout ? (\n                      <Form.Item\n                        noStyle\n                        dependencies={[\n                          ['batch', 'timeoutEnabled'],\n                          ['batch', 'timeoutUnit'],\n                        ]}\n                      >\n                        {() => {\n                          const timeout = form.getFieldValue([\n                            'batch',\n                            'timeout',\n                          ]);\n                          const unit = form.getFieldValue([\n                            'batch',\n                            'timeoutUnit',\n                          ]);\n\n                          const timeDuration = dayjs.duration(\n                            timeout,\n                            unit ?? 's',\n                          );\n\n                          const formattedDuration = formatDuration(\n                            timeDuration,\n                            t,\n                          );\n\n                          const durationText =\n                            !_.isNull(timeout) && _.toFinite(timeout) > 0\n                              ? formattedDuration\n                              : null;\n                          return (\n                            <Form.Item\n                              label={t(\n                                'session.launcher.BatchJobTimeoutDuration',\n                              )}\n                              tooltip={t(\n                                'session.launcher.BatchJobTimeoutDurationDesc',\n                              )}\n                              // extra={durationText}\n                              help={durationText}\n                            >\n                              <Flex direction=\"row\" gap={'xs'}>\n                                <Form.Item\n                                  noStyle\n                                  name={['batch', 'timeoutEnabled']}\n                                  valuePropName=\"checked\"\n                                >\n                                  <Checkbox\n                                    onChange={(e) => {\n                                      if (e.target.checked === false) {\n                                        form.setFieldValue(\n                                          ['batch', 'timeout'],\n                                          undefined,\n                                        );\n                                      }\n                                      form.validateFields([\n                                        ['batch', 'timeout'],\n                                      ]);\n                                    }}\n                                  >\n                                    {t('session.launcher.Enable')}\n                                  </Checkbox>\n                                </Form.Item>\n                                <Form.Item\n                                  noStyle\n                                  dependencies={[['batch', 'timeoutEnabled']]}\n                                >\n                                  {() => {\n                                    const disabled =\n                                      form.getFieldValue([\n                                        'batch',\n                                        'timeoutEnabled',\n                                      ]) !== true;\n                                    return (\n                                      <>\n                                        <Form.Item\n                                          name={['batch', 'timeout']}\n                                          label={t(\n                                            'session.launcher.BatchJobTimeoutDuration',\n                                          )}\n                                          noStyle\n                                          rules={[\n                                            {\n                                              min: 0,\n                                              type: 'number',\n                                              message: t(\n                                                'error.AllowsPositiveNumberOnly',\n                                              ),\n                                            },\n                                            {\n                                              required: !disabled,\n                                            },\n                                          ]}\n                                        >\n                                          <InputNumber\n                                            disabled={disabled}\n                                            min={1}\n                                            addonAfter={\n                                              <Form.Item\n                                                noStyle\n                                                name={['batch', 'timeoutUnit']}\n                                              >\n                                                <Select\n                                                  tabIndex={-1}\n                                                  style={{ minWidth: 75 }}\n                                                  options={[\n                                                    {\n                                                      label: t('time.sec'),\n                                                      value: 's',\n                                                    },\n                                                    {\n                                                      label: t('time.min'),\n                                                      value: 'm',\n                                                    },\n                                                    {\n                                                      label: t('time.hour'),\n                                                      value: 'h',\n                                                    },\n                                                    {\n                                                      label: t('time.day'),\n                                                      value: 'd',\n                                                    },\n                                                    {\n                                                      label: t('time.week'),\n                                                      value: 'w',\n                                                    },\n                                                  ]}\n                                                />\n                                              </Form.Item>\n                                            }\n                                          />\n                                        </Form.Item>\n                                      </>\n                                    );\n                                  }}\n                                </Form.Item>\n                              </Flex>\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    ) : null}\n                  </Card>\n                )}\n\n                {(currentUserRole === 'admin' ||\n                  currentUserRole === 'superadmin') && (\n                  <SessionOwnerSetterCard\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  />\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableAgentSelect={\n                      !baiClient._config.hideAgents &&\n                      baiClient.supports('agent-select')\n                    }\n                    enableNumOfSessions\n                    enableResourcePresets\n                    showRemainingWarning\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFormItem\n                    filter={(vfolder) => {\n                      return (\n                        vfolder.status === 'ready' &&\n                        !vfolder.name?.startsWith('.')\n                      );\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('sessionName').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item label={t('session.SessionType')}>\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('sessionName')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                          >\n                            {form.getFieldValue('sessionName')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              labelStyle={{ whiteSpace: 'nowrap' }}\n                              contentStyle={{\n                                overflow: 'auto',\n                              }}\n                            >\n                              {form.getFieldValue(['batch', 'command']) ? (\n                                <SourceCodeViewer language=\"shell\">\n                                  {form.getFieldValue(['batch', 'command'])}\n                                </SourceCodeViewer>\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.SessionStartTime')}\n                            >\n                              {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                                dayjs(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                ).format('LLL (Z)')\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                            {supportBatchTimeout ? (\n                              <Descriptions.Item\n                                label={t(\n                                  'session.launcher.BatchJobTimeoutDuration',\n                                )}\n                              >\n                                {form.getFieldValue(['batch', 'timeout']) ? (\n                                  <Typography.Text>\n                                    {form.getFieldValue(['batch', 'timeout'])}\n                                    {form.getFieldValue([\n                                      'batch',\n                                      'timeoutUnit',\n                                    ]) || 's'}\n                                  </Typography.Text>\n                                ) : (\n                                  <Typography.Text type=\"secondary\">\n                                    {t('general.None')}\n                                  </Typography.Text>\n                                )}\n                              </Descriptions.Item>\n                            ) : null}\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <SessionOwnerSetterPreviewCard\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                    />\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(\n                          form.getFieldValue(\n                            'envvars',\n                          ) as SessionLauncherFormValue['envvars'],\n                          (v, idx) => {\n                            return (\n                              form.getFieldError(['envvars', idx, 'variable'])\n                                .length > 0 ||\n                              form.getFieldError(['envvars', idx, 'value'])\n                                .length > 0\n                            );\n                          },\n                        )\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')}>\n                          {supportExtendedImageInfo ? (\n                            <Row style={{ flexFlow: 'nowrap' }}>\n                              <Col>\n                                <ImageMetaIcon\n                                  image={\n                                    form.getFieldValue('environments')\n                                      ?.version ||\n                                    form.getFieldValue('environments')?.manual\n                                  }\n                                  style={{ marginRight: token.marginXS }}\n                                />\n                              </Col>\n                              <Col>\n                                <Flex direction=\"row\" wrap=\"wrap\">\n                                  {form.getFieldValue('environments')\n                                    ?.manual ? (\n                                    <Typography.Text\n                                      code\n                                      style={{ wordBreak: 'break-all' }}\n                                      copyable={{\n                                        text: form.getFieldValue('environments')\n                                          ?.manual,\n                                      }}\n                                    >\n                                      {\n                                        form.getFieldValue('environments')\n                                          ?.manual\n                                      }\n                                    </Typography.Text>\n                                  ) : (\n                                    <>\n                                      <Typography.Text>\n                                        {tagAlias(\n                                          form.getFieldValue('environments')\n                                            ?.image?.base_image_name,\n                                        )}\n                                      </Typography.Text>\n                                      <Divider type=\"vertical\" />\n                                      <Typography.Text>\n                                        {\n                                          form.getFieldValue('environments')\n                                            ?.image?.version\n                                        }\n                                      </Typography.Text>\n                                      <Divider type=\"vertical\" />\n                                      <Typography.Text>\n                                        {\n                                          form.getFieldValue('environments')\n                                            ?.image?.architecture\n                                        }\n                                      </Typography.Text>\n                                      <Divider type=\"vertical\" />\n                                      {/* TODO: replace this with AliasedImageDoubleTags after image list query with ImageNode is implemented. */}\n                                      {_.map(\n                                        form.getFieldValue('environments')\n                                          ?.image?.tags,\n                                        (tag: {\n                                          key: string;\n                                          value: string;\n                                        }) => {\n                                          const isCustomized = _.includes(\n                                            tag.key,\n                                            'customized_',\n                                          );\n                                          const tagValue = isCustomized\n                                            ? _.find(\n                                                form.getFieldValue(\n                                                  'environments',\n                                                )?.image?.labels,\n                                                {\n                                                  key: 'ai.backend.customized-image.name',\n                                                },\n                                              )?.value\n                                            : tag.value;\n                                          const aliasedTag = tagAlias(\n                                            tag.key + tagValue,\n                                          );\n                                          return _.isEqual(\n                                            aliasedTag,\n                                            preserveDotStartCase(\n                                              tag.key + tagValue,\n                                            ),\n                                          ) ? (\n                                            <DoubleTag\n                                              key={tag.key}\n                                              values={[\n                                                {\n                                                  label: tagAlias(tag.key),\n                                                  color: isCustomized\n                                                    ? 'cyan'\n                                                    : 'blue',\n                                                },\n                                                {\n                                                  label: tagValue,\n                                                  color: isCustomized\n                                                    ? 'cyan'\n                                                    : 'blue',\n                                                },\n                                              ]}\n                                            />\n                                          ) : (\n                                            <Tag\n                                              key={tag.key}\n                                              color={\n                                                isCustomized ? 'cyan' : 'blue'\n                                              }\n                                            >\n                                              {aliasedTag}\n                                            </Tag>\n                                          );\n                                        },\n                                      )}\n                                      <Typography.Text\n                                        style={{ color: token.colorPrimary }}\n                                        copyable={{\n                                          text:\n                                            getImageFullName(\n                                              form.getFieldValue('environments')\n                                                ?.image,\n                                            ) ||\n                                            form.getFieldValue('environments')\n                                              ?.version,\n                                        }}\n                                      />\n                                    </>\n                                  )}\n                                </Flex>\n                              </Col>\n                            </Row>\n                          ) : (\n                            <Row\n                              style={{ flexFlow: 'nowrap', gap: token.sizeXS }}\n                            >\n                              <Col>\n                                <ImageMetaIcon\n                                  image={\n                                    form.getFieldValue('environments')\n                                      ?.version ||\n                                    form.getFieldValue('environments')?.manual\n                                  }\n                                />\n                              </Col>\n                              <Col>\n                                {/* {form.getFieldValue('environments').image} */}\n                                <Flex direction=\"row\" wrap=\"wrap\">\n                                  {form.getFieldValue('environments')\n                                    ?.manual ? (\n                                    <Typography.Text\n                                      code\n                                      style={{ wordBreak: 'break-all' }}\n                                      copyable={{\n                                        text: form.getFieldValue('environments')\n                                          ?.manual,\n                                      }}\n                                    >\n                                      {\n                                        form.getFieldValue('environments')\n                                          ?.manual\n                                      }\n                                    </Typography.Text>\n                                  ) : (\n                                    <>\n                                      <Typography.Text>\n                                        {tagAlias(\n                                          getBaseImage(\n                                            form.getFieldValue('environments')\n                                              ?.version,\n                                          ),\n                                        )}\n                                      </Typography.Text>\n                                      <Divider type=\"vertical\" />\n                                      <Typography.Text>\n                                        {getBaseVersion(\n                                          form.getFieldValue('environments')\n                                            ?.version,\n                                        )}\n                                      </Typography.Text>\n                                      <Divider type=\"vertical\" />\n                                      <Typography.Text>\n                                        {\n                                          form.getFieldValue('environments')\n                                            ?.image?.architecture\n                                        }\n                                      </Typography.Text>\n                                      <Divider type=\"vertical\" />\n                                      <ImageTags\n                                        tag={\n                                          form.getFieldValue('environments')\n                                            ?.image?.tag\n                                        }\n                                        labels={\n                                          form.getFieldValue('environments')\n                                            ?.image?.labels as Array<{\n                                            key: string;\n                                            value: string;\n                                          }>\n                                        }\n                                      />\n                                      <Typography.Text\n                                        style={{ color: token.colorPrimary }}\n                                        copyable={{\n                                          text:\n                                            getImageFullName(\n                                              form.getFieldValue('environments')\n                                                ?.image,\n                                            ) ||\n                                            form.getFieldValue('environments')\n                                              ?.version,\n                                        }}\n                                      />\n                                    </>\n                                  )}\n                                </Flex>\n                              </Col>\n                            </Row>\n                          )}\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={isDarkMode ? dark : undefined}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          return (\n                            // @ts-ignore\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        }) ||\n                        form.getFieldError(['num_of_sessions']).length > 0 ||\n                        form.getFieldError('resourceGroup').length > 0\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(\n                          form.getFieldValue('resource'),\n                          (\n                            v,\n                            key: keyof SessionLauncherFormValue['resource'],\n                          ) => {\n                            return (\n                              // @ts-ignore\n                              form.getFieldWarning(['resource', key]).length > 0\n                            );\n                          },\n                        ) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t('general.ResourceGroup')}\n                            span={2}\n                          >\n                            {form.getFieldValue('resourceGroup') || (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <ResourceNumbersOfSession\n                                resource={form.getFieldValue('resource')}\n                              />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          {baiClient.supports('agent-select') &&\n                            !baiClient?._config?.hideAgents && (\n                              <Descriptions.Item\n                                label={t('session.launcher.AgentNode')}\n                              >\n                                {form.getFieldValue('agent') ||\n                                  t('session.launcher.AutoSelect')}\n                              </Descriptions.Item>\n                            )}\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <ResourceNumbersOfSession\n                              resource={form.getFieldValue('resource')}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n                      {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n                      <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n                        {form.getFieldValue('mounts')?.length > 0 ? (\n                          <Table\n                            rowKey=\"name\"\n                            size=\"small\"\n                            pagination={false}\n                            columns={[\n                              {\n                                dataIndex: 'name',\n                                title: t('data.folders.Name'),\n                              },\n                              {\n                                dataIndex: 'alias',\n                                title: t('session.launcher.FolderAlias'),\n                                render: (value, record) => {\n                                  return _.isEmpty(value) ? (\n                                    <Typography.Text\n                                      type=\"secondary\"\n                                      style={{\n                                        opacity: 0.7,\n                                      }}\n                                    >\n                                      {`/home/work/${record.name}`}\n                                    </Typography.Text>\n                                  ) : (\n                                    value\n                                  );\n                                },\n                              },\n                            ]}\n                            dataSource={_.map(\n                              form.getFieldValue('mounts'),\n                              (v) => {\n                                return {\n                                  name: v,\n                                  alias:\n                                    form.getFieldValue('vfoldersAliasMap')?.[v],\n                                };\n                              },\n                            )}\n                          ></Table>\n                        ) : (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t('session.launcher.NoFolderMounted')}\n                          />\n                        )}\n                        {form.getFieldValue('autoMountedFolderNames')?.length >\n                        0 ? (\n                          <Descriptions size=\"small\">\n                            <Descriptions.Item\n                              label={t('data.AutomountFolders')}\n                            >\n                              {_.map(\n                                form.getFieldValue('autoMountedFolderNames'),\n                                (name) => {\n                                  return <Tag>{name}</Tag>;\n                                },\n                              )}\n                            </Descriptions.Item>\n                          </Descriptions>\n                        ) : null}\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        webuiNavigate('/session/start');\n                        form.resetFields();\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex\n                    data-test-id=\"neo-session-launcher-tour-step-navigation\"\n                    direction=\"row\"\n                    gap=\"sm\"\n                  >\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex\n            data-test-id=\"neo-session-launcher-tour-step\"\n            style={{ position: 'sticky', top: 80 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      <SessionTemplateModal\n        onRequestClose={(formValue) => {\n          if (formValue) {\n            const fieldsValue = _.merge(\n              {\n                // reset fields related to optional and nested fields\n                sessionName: '',\n                ports: [],\n                mounts: [],\n                vfoldersAliasMap: {},\n                bootstrap_script: '',\n                num_of_sessions: 1,\n                owner: {\n                  enabled: false,\n                  accesskey: '',\n                  domainName: '',\n                  email: undefined,\n                  project: '',\n                  resourceGroup: '',\n                },\n                environments: {\n                  manual: '',\n                },\n                batch: {\n                  enabled: false,\n                  command: undefined,\n                  scheduleDate: undefined,\n                },\n                agent: 'auto', // Add the missing 'agent' property\n              } as Omit<\n                Required<OptionalFieldsOnly<SessionLauncherFormValue>>,\n                'autoMountedFolderNames'\n              >,\n              formValue,\n            );\n\n            if (!_.isEmpty(fieldsValue.sessionName)) {\n              fieldsValue.sessionName =\n                fieldsValue.sessionName + '-' + generateRandomString(4);\n            }\n            form.setFieldsValue(fieldsValue);\n            setCurrentStep(steps.length - 1);\n            form.validateFields().catch(() => {});\n          }\n          toggleIsOpenTemplateModal();\n        }}\n        open={isOpenTemplateModal}\n      />\n      {currentStep === steps.length - 1 ? (\n        <ErrorBoundary fallback={null}>\n          <SessionLauncherValidationTour\n            open={validationTourOpen}\n            onClose={() => {\n              setValidationTourOpen(false);\n            }}\n            scrollIntoViewOptions\n          />\n        </ErrorBoundary>\n      ) : undefined}\n    </Flex>\n  );\n};\n\ntype FormOrResourceRequired = {\n  resource: ResourceAllocationFormValue['resource'];\n  containerCount?: number;\n};\n\nexport const ResourceNumbersOfSession: React.FC<FormOrResourceRequired> = ({\n  resource,\n  containerCount = 1,\n}) => {\n  return (\n    <>\n      {_.map(\n        _.omit(resource, 'shmem', 'accelerator', 'acceleratorType'),\n        (value, type) => {\n          return value === '0' ? null : (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (convertBinarySizeUnit(value.toString(), 'b')?.number ||\n                      0) *\n                      containerCount +\n                    ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: resource.shmem\n                  ? (convertBinarySizeUnit(resource.shmem, 'b')?.number || 0) *\n                    containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {resource &&\n      resource.accelerator &&\n      resource.acceleratorType &&\n      _.isNumber(resource.accelerator) ? (\n        <ResourceNumber\n          // @ts-ignore\n          type={resource.acceleratorType}\n          value={_.toString(resource.accelerator * containerCount)}\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nexport default SessionLauncherPage;\n"],"names":["_ref","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","token","theme","useToken","_extra","_jsx","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","undefined","onClick","children","Card","className","_","borderColor","colorSuccess","React","ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","DatePicker","dayjs","_value","_value2","_value2$tz","newValue","format","tz","toISOString","props","form","Form","useFormInstance","useEffect","setFieldValue","name","Item","hidden","MIN_PORT","MAX_PORT","PortTag","_ref2","inValid","tagProps","Tag","color","isValidPortStr","portStr","isPortRangeStr","splitPortRange","split","start","end","map","v","parseInt","toString","portRange","length","transformPortValuesToNumbers","values","parsePortRangeToNumbers","formItemProps","t","useTranslation","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","rules","validator","rule","_config","maxCountForPreopenPorts","Promise","resolve","reject","Error","count","allPorts","port","Select","mode","tagRender","hasDuplicated","getFieldValue","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","otherProps","hasOpenedValidationTour","setHasOpenedValidationTour","useBAISettingUserState","steps","title","description","target","_document$getElements","document","getElementsByClassName","_document$getElements2","_document$getElements3","querySelector","Tour","min","message","max","f","test","Input","allowClear","autoComplete","SessionOwnerSetterPreviewCard","isActive","useWatch","currentUserRole","useCurrentUserRole","BAICard","size","getFieldError","_jsxs","Descriptions","column","fetchingEmail","setFetchingEmail","useState","relayEvn","useRelayEnvironment","data","isFetching","useTanQuery","queryKey","queryFn","email","query","_SessionOwnerSetterCardQuery","require","fetchQuery","toPromise","enabled","ownerKeypairs","keypairs","owner","user","nonExistentOwner","valuePropName","noStyle","Switch","styles","header","borderBottom","body","display","HiddenFormItem","domain_name","dependencies","_Fragment","Flex","required","flex","validateStatus","help","Search","onSearch","validateFields","then","catch","setFieldsValue","accesskey","project","resourceGroup","loading","enterButton","CheckIcon","BAISelect","options","k","access_key","autoSelectOption","disabled","Row","gutter","marginSM","Col","span","groups","g","Suspense","fallback","ResourceGroupSelect","projectName","autoSelectDefault","modalProps","sessionHistory","useRecentSessionHistory","getImageAliasName","getBaseVersion","useBackendAIImageMetaData","selectedHistoryId","setSelectedHistoryId","parsedSessionHistory","useMemo","history","params","URLSearchParams","formValues","JSON","parse","get","BAIModal","okButtonProps","okText","onOk","_$find","_modalProps$onRequest","id","onRequestClose","call","onCancel","Divider","margin","Table","showHeader","scroll","x","dataSource","pagination","rowSelection","selectedRowKeys","onSelect","record","onRow","rowKey","columns","dataIndex","render","version","imageStr","environments","manual","gap","ImageMetaIcon","image","Typography","Text","sessionName","resource","ResourceNumbersOfSession","createdAt","fromNow","node","v0","v1","v2","v3","v4","v5","hash","recentSessionHistory","setRecentSessionHistory","push","useEventNotStable","newRecentSessionHistory","generateRandomString","Date","slice","clear","remove","filter","item","SessionLauncherPage","_baiClient$supports","_baiClient$supports2","_baiClient$_config3","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue7","_form$getFieldValue7$","_form$getFieldValue8","_form$getFieldValue8$","_form$getFieldValue9","_form$getFieldValue9$","_form$getFieldValue10","_form$getFieldValue11","_form$getFieldValue14","_form$getFieldValue15","_form$getFieldValue16","_form$getFieldValue17","_form$getFieldValue18","_form$getFieldValue19","_form$getFieldValue20","_form$getFieldValue21","_form$getFieldValue22","_form$getFieldValue23","_form$getFieldValue24","_form$getFieldValue25","_form$getFieldValue26","_form$getFieldValue27","_form$getFieldValue28","_form$getFieldValue29","_form$getFieldValue30","_form$getFieldValue31","_form$getFieldValue32","_baiClient$_config6","_form$getFieldValue33","_form$getFieldValue35","_form$getFieldValue36","app","App","useApp","sessionMode","mainContentDivRef","useAtomValue","mainContentDivRefState","currentGlobalResourceGroup","setCurrentGlobalResourceGroup","useCurrentResourceGroupState","getBaseImage","tagAlias","supportExtendedImageInfo","supports","supportBatchTimeout","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","_baiClient$_config","_baiClient$_config2","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","command","scheduleDate","timeoutEnabled","timeout","timeoutUnit","envvars","default_session_environment","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","StepParam","withDefault","NumberParam","FormValuesParam","JsonParam","AppOptionParam","step","currentStep","formValuesFromQueryParams","redirectTo","appOption","appOptionFromQueryParams","setQuery","useQueryParams","StringParam","search","useLocation","isDarkMode","useThemeMode","webuiNavigate","useWebUINavigate","currentProject","useCurrentProjectValue","isOpenTemplateModal","toggle","toggleIsOpenTemplateModal","useToggle","upsertNotification","useSetBAINotification","pushSessionHistory","run","syncFormToURLWithDebounce","useDebounceFn","currentValue","getFieldsValue","sanitizeSensitiveEnv","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","useForm","mergedInitialValues","_mainContentDivRef$cu","current","scrollTo","preserve","key","PlayCircleFilled","currentStepKey","hasError","getFieldsError","errors","finalStepLastValidateTime","setFinalStepLastValidateTime","useUpdatableState","error","finally","setValidationTourOpen","validationTourOpen","direction","align","justifyContent","customCSS","maxWidth","justify","Title","level","marginTop","paddingRight","paddingLeft","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","code","SessionNameFormItem","TextArea","autoSize","BAIIntervalView","delay","callback","isBefore","triggerKey","time","Checkbox","checked","add","shouldUpdate","prev","next","_prev$batch","_next$batch","_form$getFieldValue","async","DatePickerISO","showTime","disabledDate","startOf","unit","timeDuration","formattedDuration","formatDuration","durationText","InputNumber","addonAfter","tabIndex","minWidth","SessionOwnerSetterCard","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceAllocationFormItems","enableAgentSelect","hideAgents","enableNumOfSessions","enableResourcePresets","showRemainingWarning","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","marginMD","xs","sm","stringMode","VFolderTableFormItem","vfolder","_vfolder$name","startsWith","PortSelectFormItem","findIndex","labelStyle","whiteSpace","contentStyle","overflow","SourceCodeViewer","language","idx","flexFlow","marginRight","marginXS","wrap","wordBreak","copyable","text","base_image_name","architecture","tags","tag","_form$getFieldValue12","_form$getFieldValue13","isCustomized","tagValue","labels","aliasedTag","preserveDotStartCase","DoubleTag","colorPrimary","getImageFullName","sizeXS","ImageTags","SyntaxHighlighter","dark","codeTagProps","customStyle","variable","join","getFieldWarning","Alert","showIcon","containerCount","opacity","_form$getFieldValue34","alias","Popconfirm","onConfirm","resetFields","QuestionCircleOutlined","danger","LeftOutlined","Tooltip","PlayCircleOutlined","startSession","usedSearchParams","_values$batch","_values$batch2","_values$batch3","_baiClient$_config4","_values$owner","_baiClient$_config5","mounts","modal","confirm","content","imageFullName","kernelName","generateSessionId","sessionInfo","batchTimeout","config","agent","agent_list","bootstrap_script","startsAt","startupCommand","group_name","domain","domainName","scaling_group","owner_access_key","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","shmem","compareNumberWithUnits","accelerator","acceleratorType","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","i","formattedSessionName","createIfNotExists","res","created","err","_err$message","includes","backupTo","window","location","pathname","backgroundTask","promise","all","statusDescriptions","pending","resolved","duration","firstSession","to","sessionId","appOptions","kernelId","service_info","servicePorts","Array","isArray","a","globalThis","appLauncher","showLauncher","toText","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","items","s","SessionTemplateModal","formValue","fieldsValue","SessionLauncherValidationTour","scrollIntoViewOptions","_convertBinarySizeUni","_convertBinarySizeUni2","ResourceNumber","convertBinarySizeUnit","number","opts","possible","charAt","Math","floor","random"],"sourceRoot":""}