{"version":3,"file":"static/js/310.ce0af217.chunk.js","mappings":"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","sources":["hooks/useIntervalValue.tsx","components/BAIIntervalText.tsx","components/DatePickerISO.tsx","components/ImageTags.tsx","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","BAICard.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","components/SessionNameFormItem.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/**\n * Custom hook that executes a callback function at a specified interval.\n *\n * @param callback The function to be executed at the specified interval.\n * @param delay The delay (in milliseconds) between each execution of the callback function. If `null`, the interval is cleared(pause).\n */\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n/**\n * Custom hook that provides a value updated at a specified interval.\n *\n * @param calculator - A function that calculates the value.\n * @param delay - The delay in milliseconds between updates.\n * @param triggerKey - An optional key that triggers an immediate update when changed.\n * @returns The updated value.\n */\nexport const useIntervalValue = (\n  calculator: () => any,\n  delay: number,\n  triggerKey?: string,\n) => {\n  const [result, setResult] = useState(calculator());\n\n  useEffect(() => {\n    if (triggerKey) {\n      setResult(calculator());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [triggerKey]);\n\n  useInterval(() => {\n    const newResult = calculator();\n    if (newResult !== result) setResult(newResult);\n  }, delay);\n\n  return result;\n};\n","import { useIntervalValue } from '../hooks/useIntervalValue';\nimport React from 'react';\n\nconst BAIIntervalText: React.FC<{\n  callback: () => any;\n  delay: number;\n  triggerKey?: string;\n}> = ({ callback, delay, triggerKey }) => {\n  const value = useIntervalValue(callback, delay, triggerKey);\n  return value;\n};\n\nexport default BAIIntervalText;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport _ from 'lodash';\nimport React from 'react';\n\nexport interface DatePickerISOProps\n  extends Omit<PickerProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        if (_.isArray(value)) {\n          value = value[0];\n        }\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","import { useBackendAIImageMetaData } from '../hooks';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport { Tag, TagProps } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\n\ninterface ImageAliasNameAndBaseVersionTagsProps\n  extends Omit<DoubleTagObjectValue, 'label'> {\n  image: string | null;\n}\nexport const ImageAliasNameAndBaseVersionTags: React.FC<\n  ImageAliasNameAndBaseVersionTagsProps\n> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageAliasName, getBaseVersion, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <DoubleTag\n      values={[\n        {\n          label: tagAlias(getImageAliasName(image)),\n          color: 'blue',\n        },\n        {\n          label: getBaseVersion(image),\n          color: 'green',\n        },\n      ]}\n      {...props}\n    />\n  );\n};\n\ninterface BaseVersionTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseVersionTags: React.FC<BaseVersionTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseVersion, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseVersion(image))}\n    </Tag>\n  );\n};\n\ninterface BaseImageTagsProps extends TagProps {\n  image: string | null;\n}\nexport const BaseImageTags: React.FC<BaseImageTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getBaseImage, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getBaseImage(image))}\n    </Tag>\n  );\n};\n\ninterface ArchitectureTagsProps extends TagProps {\n  image: string | null;\n}\nexport const ArchitectureTags: React.FC<ArchitectureTagsProps> = ({\n  image,\n  ...props\n}) => {\n  image = image || '';\n  const [, { getArchitecture, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getArchitecture(image))}\n    </Tag>\n  );\n};\n\ninterface LangTagsProps extends TagProps {\n  image: string | null;\n}\nexport const LangTags: React.FC<LangTagsProps> = ({ image, ...props }) => {\n  image = image || '';\n  const [, { getImageLang, tagAlias }] = useBackendAIImageMetaData();\n  return (\n    <Tag color=\"green\" {...props}>\n      {tagAlias(getImageLang(image))}\n    </Tag>\n  );\n};\n\ninterface ConstraintTagsProps extends TagProps {\n  image: string | null;\n  labels: { key: string; value: string }[];\n}\nexport const ConstraintTags: React.FC<ConstraintTagsProps> = ({\n  image,\n  labels,\n  ...props\n}) => {\n  image = image || '';\n  labels = labels || [];\n  const [, { getFilteredRequirementsTags, getCustomTag, tagAlias }] =\n    useBackendAIImageMetaData();\n  return (\n    <Flex>\n      {_.map(getFilteredRequirementsTags(image), (tag, index) => (\n        <Tag key={index} color=\"blue\" {...props}>\n          {tagAlias(tag || '')}\n        </Tag>\n      ))}\n      <DoubleTag\n        color=\"cyan\"\n        values={[\n          {\n            label: 'Customized',\n            color: 'cyan',\n          },\n          {\n            label: getCustomTag(labels),\n            color: 'cyan',\n          },\n        ]}\n        {...props}\n      />\n    </Flex>\n  );\n};\n\nconst SessionKernelTags: React.FC<{\n  image: string | null;\n  style?: React.CSSProperties;\n  border?: boolean;\n}> = ({ image, style = {} }, bordered) => {\n  image = image || '';\n  return (\n    <>\n      <ImageAliasNameAndBaseVersionTags image={image} />\n      <BaseImageTags image={image} />\n      <ArchitectureTags image={image} />\n    </>\n  );\n};\n\nexport default React.memo(SessionKernelTags);\n","/**\n * @generated SignedSource<<a6063364be2bb8e0d0d7ede25c023b08>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null | undefined;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n              ? token.colorWarning\n              : status === 'success'\n                ? token.colorSuccess\n                : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  const form = Form.useFormInstance();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          !_.isEmpty(variableName) &&\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                    onChange={() => {\n                      const fieldNames = fields.map((field, index) => [\n                        props.name,\n                        index,\n                        'variable',\n                      ]);\n                      form.validateFields(fieldNames);\n                    }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        'session.launcher.EnvironmentVariableValueRequired',\n                      ),\n                    },\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input\n                    placeholder=\"Value\"\n                    // onChange={() => {\n                    //   const valueFields = fields.map((field, index) => [\n                    //     props.name,\n                    //     index,\n                    //     'value',\n                    //   ]);\n                    //   form.validateFields(valueFields);\n                    // }}\n                  />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                {t('session.launcher.AddEnvironmentVariable')}\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        {\n          max: baiClient._config.maxCountForPreopenPorts,\n          type: 'array',\n          message: t('session.launcher.PreOpenPortMaxCountLimit', {\n            count: baiClient._config.maxCountForPreopenPorts,\n          }),\n        },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  sessionName: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"sessionName\"\n      // Original rule : /^(?=.{4,64}$)\\w[\\w.-]*\\w$/\n      // https://github.com/lablup/backend.ai/blob/main/src/ai/backend/manager/api/session.py#L355-L356\n      rules={[\n        {\n          min: 4,\n          message: t('session.Validation.SessionNameTooShort'),\n        },\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          validator(f, value) {\n            if (_.isEmpty(value)) {\n              return Promise.resolve();\n            }\n            if (!/^\\w/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldStartWith'),\n              );\n            }\n\n            if (!/^[\\w.-]*$/.test(value)) {\n              return Promise.reject(\n                t('session.Validation.SessionNameInvalidCharacter'),\n              );\n            }\n\n            if (!/\\w$/.test(value) && value.length >= 4) {\n              return Promise.reject(\n                t('session.Validation.SessionNameShouldEndWith'),\n              );\n            }\n            return Promise.resolve();\n          },\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear autoComplete=\"off\" />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useEventNotStable } from '../hooks/useEventNotStable';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Descriptions,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\nexport interface VFolderTableProps extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n  onChangeAutoMountedFolders?: (names: Array<string>) => void;\n  showAutoMountedFoldersSection?: boolean;\n}\n\nexport const vFolderAliasNameRegExp = /^[a-zA-Z0-9_/-]*$/;\n\nconst VFolderTable: React.FC<VFolderTableProps> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  onChangeAutoMountedFolders,\n  showAutoMountedFoldersSection,\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey, currentProject.id],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n\n  const autoMountedFolderNames = useMemo(\n    () =>\n      _.chain(allFolderList)\n        .filter((vf) => vf.status === 'ready' && vf.name?.startsWith('.'))\n        .map((vf) => vf.name)\n        .value(),\n    [allFolderList],\n  );\n\n  useEffect(() => {\n    _.isFunction(onChangeAutoMountedFolders) &&\n      onChangeAutoMountedFolders(autoMountedFolderNames);\n    // Do not need to run when `autoMountedFolderNames` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoMountedFolderNames]);\n\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.chain(allFolderList)\n    .filter((vf) => (filter ? filter(vf) : true))\n    .filter((vf) => {\n      if (selectedRowKeys.includes(getRowKey(vf))) {\n        return true;\n      }\n      return !searchKey || vf.name.includes(searchKey);\n    })\n    .value();\n\n  const mapAliasToPath = useEventNotStable(\n    (name: VFolderKey, input?: string) => {\n      if (_.isEmpty(input)) {\n        return `${aliasBasePath}${name}`;\n      } else if (input?.startsWith('/')) {\n        return input;\n      } else {\n        return `${aliasBasePath}${input}`;\n      }\n    },\n  );\n\n  const handleAliasUpdate = useEventNotStable(() => {\n    setAliasMap(\n      _.mapValues(\n        _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n        (v, k) => mapAliasToPath(k, v), // add alias base path\n      ),\n    );\n    internalForm.validateFields().catch(() => {});\n  });\n\n  useEffect(() => {\n    handleAliasUpdate();\n    // `selectedRowKeys` can be changed by parents at any time, so we need to check whether `selectedRowKeys` has changed using JSON.stringify\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(selectedRowKeys), handleAliasUpdate]);\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : {\n                    maxWidth: 200,\n                  }\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: vFolderAliasNameRegExp,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        allowClear\n                        onChange={() => {\n                          handleAliasUpdate();\n                        }}\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm} component={false}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n      {showAutoMountedFoldersSection && autoMountedFolderNames.length > 0 ? (\n        <>\n          <Descriptions size=\"small\">\n            <Descriptions.Item label={t('data.AutomountFolders')}>\n              {_.map(autoMountedFolderNames, (name) => {\n                return <Tag>{name}</Tag>;\n              })}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ) : null}\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, {\n  AliasMap,\n  VFolderTableProps,\n  vFolderAliasNameRegExp,\n} from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {\n  filter?: VFolderTableProps['filter'];\n}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  filter,\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              if (_.some(arr, (alias) => !vFolderAliasNameRegExp.test(alias))) {\n                return Promise.reject(t('session.launcher.FolderAliasInvalid'));\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item hidden name=\"autoMountedFolderNames\" />\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n          filter={filter}\n          showAutoMountedFoldersSection\n          onChangeAutoMountedFolders={(names) => {\n            form.setFieldValue('autoMountedFolderNames', names);\n          }}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport BAIIntervalText from '../components/BAIIntervalText';\nimport DatePickerISO from '../components/DatePickerISO';\nimport DoubleTag from '../components/DoubleTag';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport SessionKernelTags from '../components/ImageTags';\nimport { mainContentDivRefState } from '../components/MainLayout/MainLayout';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport VFolderTableFromItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport {\n  useCurrentProjectValue,\n  useSuspendedBackendaiClient,\n  useUpdatableState,\n  useWebUINavigate,\n} from '../hooks';\nimport { useSetBAINotification } from '../hooks/useBAINotification';\nimport { useThemeMode } from '../hooks/useThemeMode';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  DoubleRightOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Alert,\n  App,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  FormInstance,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Tooltip,\n  Typography,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { useRecoilValue } from 'recoil';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n}\n\ntype SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\nconst SessionLauncherPage = () => {\n  const app = App.useApp();\n  let sessionMode: SessionMode = 'normal';\n\n  const mainContentDivRef = useRecoilValue(mainContentDivRefState);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const INITIAL_FORM_VALUES: SessionLauncherValue = {\n    sessionType: 'interactive',\n    // If you set `allocationPreset` to 'custom', `allocationPreset` is not changed automatically any more.\n    allocationPreset: 'auto-preset',\n    hpcOptimization: {\n      autoEnabled: true,\n      OMP_NUM_THREADS: '1',\n      OPENBLAS_NUM_THREADS: '1',\n    },\n    batch: {\n      enabled: false,\n      command: undefined,\n      scheduleDate: undefined,\n    },\n    envvars: [],\n    // set default_session_environment only if set\n    ...(baiClient._config?.default_session_environment && {\n      environments: {\n        environment: baiClient._config?.default_session_environment,\n      },\n    }),\n    ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  };\n  const stepParam = withDefault(NumberParam, 0);\n  const formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n  const [\n    { step: currentStep, formValues: formValuesFromQueryParams, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const { isDarkMode } = useThemeMode();\n  const navigate = useNavigate();\n  // const { moveTo } = useWebComponentInfo();\n  const webuiNavigate = useWebUINavigate();\n  const currentProject = useCurrentProjectValue();\n\n  const { upsertNotification } = useSetBAINotification();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(\n            form.getFieldsValue(),\n            ['environments.image'],\n            ['environments.customizedTag'],\n            ['autoMountedFolderNames'],\n          ),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  // After first render, set fields value using query params if it is NOT same as initial values\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !==\n      JSON.stringify(formValuesFromQueryParams)\n    ) {\n      form.setFieldsValue(formValuesFromQueryParams);\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // ScrollTo top when step is changed\n  useEffect(() => {\n    mainContentDivRef.current?.scrollTo(0, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  const [, setFinalStepLastValidateTime] = useUpdatableState('first'); // Force re-render after validation in final step.\n  useEffect(() => {\n    if (currentStep === steps.length - 1) {\n      form\n        .validateFields()\n        .catch(() => {})\n        .finally(() => setFinalStepLastValidateTime());\n    }\n  }, [currentStep, form, setFinalStepLastValidateTime, steps.length]);\n\n  const startSession = () => {\n    // TODO: support inference mode, support import mode\n\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        if (_.isEmpty(values.mounts) || values.mounts.length === 0) {\n          const isConformed = await new Promise((resolve) => {\n            app.modal.confirm({\n              title: t('session.launcher.NoFolderMounted'),\n              content: (\n                <>\n                  {t('session.launcher.HomeDirectoryDeletionDialog')}\n                  <br />\n                  <br />\n                  {t('session.launcher.LaunchConfirmationDialog')}\n                  <br />\n                  <br />\n                  {t('dialog.ask.DoYouWantToProceed')}\n                </>\n              ),\n              onOk: () => {\n                resolve(true);\n              },\n              okText: t('session.launcher.Start'),\n              onCancel: () => {\n                resolve(false);\n              },\n              closable: true,\n            });\n          });\n          if (!isConformed) return;\n        }\n\n        // If manual image is selected, use it as kernelName\n        const imageFullName =\n          values.environments.manual || values.environments.version;\n        let [kernelName, architecture] = imageFullName\n          ? imageFullName.split('@')\n          : ['', ''];\n\n        const sessionName = _.isEmpty(values.sessionName)\n          ? generateSessionId()\n          : values.sessionName;\n\n        const sessionInfo: CreateSessionInfo = {\n          kernelName,\n          architecture,\n          sessionName: sessionName,\n          config: {\n            type: values.sessionType,\n\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: _.map(values.ports, (v) => parseInt(v)),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean; status: string }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  // message.warning(t('session.launcher.SessionAlreadyExists'));\n                  throw new Error(t('session.launcher.SessionAlreadyExists'));\n                }\n                if (res?.status === 'CANCELLED') {\n                  // Case about failed to start new session kind of \"docker image not found\" or etc.\n                  throw new Error(\n                    t('session.launcher.FailedToStartNewSession'),\n                  );\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                throw err;\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n        webuiNavigate(redirectTo || '/job');\n        upsertNotification({\n          key: 'session-launcher:' + sessionName,\n          backgroundTask: {\n            promise: Promise.all(sessionPromises),\n            status: 'pending',\n            statusDescriptions: {\n              pending: t('session.PreparingSession'),\n              resolved: t('eduapi.ComputeSessionPrepared'),\n            },\n          },\n          duration: 0,\n          message: t('general.Session') + ': ' + sessionName,\n          open: true,\n        });\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: {\n                [key in string]: any;\n              };\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              } else {\n                // API >= v5\n                appOptions = {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n          })\n          .catch(() => {\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n      gap={'md'}\n    >\n      <style>{customCSS}</style>\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                webuiNavigate(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          {/* <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex> */}\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={INITIAL_FORM_VALUES}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      className=\"session-type-radio-group\"\n                      options={[\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.InteractiveMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.InteractiveModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <>\n                              <Typography.Text code>\n                                {t('session.launcher.BatchMode')}\n                              </Typography.Text>{' '}\n                              <Typography.Text type=\"secondary\">\n                                {t('session.launcher.BatchModeDesc')}\n                              </Typography.Text>\n                            </>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item\n                      label={t('session.launcher.SessionStartTime')}\n                      extra={\n                        <Form.Item\n                          noStyle\n                          shouldUpdate={(prev, next) =>\n                            prev.batch.scheduleDate !== next.batch.scheduleDate\n                          }\n                        >\n                          {() => {\n                            const scheduleDate = form.getFieldValue([\n                              'batch',\n                              'scheduleDate',\n                            ]);\n                            return (\n                              <BAIIntervalText\n                                delay={1000}\n                                callback={() => {\n                                  const scheduleDate = form.getFieldValue([\n                                    'batch',\n                                    'scheduleDate',\n                                  ]);\n                                  if (scheduleDate) {\n                                    if (dayjs(scheduleDate).isBefore(dayjs())) {\n                                      if (\n                                        form.getFieldError([\n                                          'batch',\n                                          'scheduleDate',\n                                        ]).length === 0\n                                      ) {\n                                        form.validateFields([\n                                          ['batch', 'scheduleDate'],\n                                        ]);\n                                      }\n                                      return undefined;\n                                    } else {\n                                      return dayjs(scheduleDate).fromNow();\n                                    }\n                                  } else {\n                                    return undefined;\n                                  }\n                                }}\n                                triggerKey={\n                                  scheduleDate ? scheduleDate : 'none'\n                                }\n                              />\n                            );\n                          }}\n                        </Form.Item>\n                      }\n                    >\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                              form.validateFields([['batch', 'scheduleDate']]);\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label={t('session.launcher.EnvironmentVariable')}>\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems\n                    enableNumOfSessions\n                    enableResourcePresets\n                  />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem\n                    filter={(vfolder) => {\n                      return (\n                        vfolder.status === 'ready' &&\n                        !vfolder.name?.startsWith('.')\n                      );\n                    }}\n                  />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('sessionName').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item label={t('session.SessionType')}>\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('sessionName')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                          >\n                            {form.getFieldValue('sessionName')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                            >\n                              {form.getFieldValue(['batch', 'command']) ? (\n                                <SyntaxHighlighter\n                                  style={isDarkMode ? dark : undefined}\n                                  language=\"shell\"\n                                  customStyle={{\n                                    margin: 0,\n                                    width: '100%',\n                                  }}\n                                >\n                                  {form.getFieldValue(['batch', 'command'])}\n                                </SyntaxHighlighter>\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                            >\n                              {form.getFieldValue(['batch', 'scheduleDate']) ? (\n                                dayjs(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                ).format('LLL (Z)')\n                              ) : (\n                                <Typography.Text type=\"secondary\">\n                                  {t('general.None')}\n                                </Typography.Text>\n                              )}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={1}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')}>\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version ||\n                                form.getFieldValue('environments')?.manual\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Flex direction=\"row\">\n                              {form.getFieldValue('environments')?.manual ? (\n                                <Typography.Text copyable code>\n                                  {form.getFieldValue('environments')?.manual}\n                                </Typography.Text>\n                              ) : (\n                                <>\n                                  <SessionKernelTags\n                                    image={\n                                      form.getFieldValue('environments')\n                                        ?.version\n                                    }\n                                  />\n                                  {form.getFieldValue('environments')\n                                    ?.customizedTag ? (\n                                    <DoubleTag\n                                      values={[\n                                        {\n                                          label: 'Customized',\n                                          color: 'cyan',\n                                        },\n                                        {\n                                          label:\n                                            form.getFieldValue('environments')\n                                              ?.customizedTag,\n                                          color: 'cyan',\n                                        },\n                                      ]}\n                                    />\n                                  ) : null}\n                                  <Typography.Text\n                                    copyable={{\n                                      text: form.getFieldValue('environments')\n                                        ?.version,\n                                    }}\n                                  />\n                                </>\n                              )}\n                            </Flex>\n                          </Flex>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={isDarkMode ? dark : undefined}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        }) ||\n                        form.getFieldError(['num_of_sessions']).length > 0 ||\n                        form.getFieldError('resourceGroup').length > 0\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(\n                          form.getFieldValue('resource')?.resource,\n                          (v, key) => {\n                            return (\n                              form.getFieldWarning(['resource', key]).length > 0\n                            );\n                          },\n                        ) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t('general.ResourceGroup')}\n                            span={2}\n                          >\n                            {form.getFieldValue('resourceGroup') || (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <FormResourceNumbers form={form} />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <FormResourceNumbers\n                              form={form}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {/* {console.log(_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames')]))} */}\n                      {/* {_.sum([form.getFieldValue('mounts')?.length, form.getFieldValue('autoMountedFolderNames').length]) > 0 ? ( */}\n                      <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n                        {form.getFieldValue('mounts')?.length > 0 ? (\n                          <Table\n                            rowKey=\"name\"\n                            size=\"small\"\n                            pagination={false}\n                            columns={[\n                              {\n                                dataIndex: 'name',\n                                title: t('data.folders.Name'),\n                              },\n                              {\n                                dataIndex: 'alias',\n                                title: t('session.launcher.FolderAlias'),\n                                render: (value, record) => {\n                                  return _.isEmpty(value) ? (\n                                    <Typography.Text\n                                      type=\"secondary\"\n                                      style={{\n                                        opacity: 0.7,\n                                      }}\n                                    >\n                                      {`/home/work/${record.name}`}\n                                    </Typography.Text>\n                                  ) : (\n                                    value\n                                  );\n                                },\n                              },\n                            ]}\n                            dataSource={_.map(\n                              form.getFieldValue('mounts'),\n                              (v) => {\n                                return {\n                                  name: v,\n                                  alias:\n                                    form.getFieldValue('vfoldersAliasMap')?.[v],\n                                };\n                              },\n                            )}\n                          ></Table>\n                        ) : (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t('session.launcher.NoFolderMounted')}\n                          />\n                        )}\n                        {form.getFieldValue('autoMountedFolderNames')?.length >\n                        0 ? (\n                          <Descriptions size=\"small\">\n                            <Descriptions.Item\n                              label={t('data.AutomountFolders')}\n                            >\n                              {_.map(\n                                form.getFieldValue('autoMountedFolderNames'),\n                                (name) => {\n                                  return <Tag>{name}</Tag>;\n                                },\n                              )}\n                            </Descriptions.Item>\n                          </Descriptions>\n                        ) : null}\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    <Popconfirm\n                      title={t('button.Reset')}\n                      description={t('session.launcher.ResetFormConfirm')}\n                      onConfirm={() => {\n                        form.resetFields();\n\n                        navigate('/session/start');\n                      }}\n                      icon={\n                        <QuestionCircleOutlined\n                          style={{ color: token.colorError }}\n                        />\n                      }\n                      okText={t('button.Reset')}\n                      okButtonProps={{\n                        danger: true,\n                      }}\n                    >\n                      <Button\n                        danger\n                        type=\"link\"\n                        style={{ paddingRight: 0, paddingLeft: 0 }}\n                      >\n                        {t('button.Reset')}\n                      </Button>\n                    </Popconfirm>\n                    {/* {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )} */}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        {t('button.Previous')}\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Tooltip\n                        title={\n                          hasError\n                            ? t('session.launcher.PleaseCompleteForm')\n                            : undefined\n                        }\n                      >\n                        <Button\n                          type=\"primary\"\n                          icon={<PlayCircleOutlined />}\n                          disabled={hasError}\n                          onClick={startSession}\n                          loading={isStartingSession}\n                        >\n                          {t('session.launcher.Launch')}\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        {t('button.Next')} <RightOutlined />\n                      </Button>\n                    )}\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        {t('session.launcher.SkipToConfirmAndLaunch')}\n                        <DoubleRightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Flex style={{ position: 'sticky', top: 80 }}>\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Flex>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\nconst FormResourceNumbers: React.FC<{\n  form: FormInstance;\n  containerCount?: number;\n}> = ({ form, containerCount = 1 }) => {\n  return (\n    <>\n      {_.map(\n        _.omit(\n          form.getFieldsValue().resource,\n          'shmem',\n          'accelerator',\n          'acceleratorType',\n        ),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value, 'b')?.number || 0) * containerCount + ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: form.getFieldValue('resource').shmem\n                  ? (iSizeToSize(form.getFieldValue('resource').shmem, 'b')\n                      ?.number || 0) * containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {_.isNumber(form.getFieldValue(['resource', 'accelerator'])) &&\n        form.getFieldValue(['resource', 'acceleratorType']) && (\n          <ResourceNumber\n            // @ts-ignore\n            type={form.getFieldValue(['resource', 'acceleratorType'])}\n            value={_.toString(\n              form.getFieldValue(['resource', 'accelerator']) * containerCount,\n            )}\n          />\n        )}\n    </>\n  );\n};\n// const SessionTypeItem: React.FC<{\n//   title: string;\n//   description?: string;\n// }> = ({ title, description }) => {\n//   const { token } = theme.useToken();\n//   return (\n//     <Flex\n//       direction=\"column\"\n//       style={{ padding: token.paddingXS }}\n//       align=\"stretch\"\n//     >\n//       <Typography.Title level={5}>{title}</Typography.Title>\n//       <Typography.Text\n//         type=\"secondary\"\n//         // @ts-ignore\n//         style={{ textWrap: 'wrap' }}\n//       >\n//         {description}\n//       </Typography.Text>\n//     </Flex>\n//   );\n// };\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nconst generateRandomString = () => {\n  let randNum = Math.floor(Math.random() * 52 * 52 * 52);\n\n  const parseNum = (num: number) => {\n    if (num < 26) return String.fromCharCode(65 + num);\n    else return String.fromCharCode(97 + num - 26);\n  };\n\n  let randStr = '';\n\n  for (let i = 0; i < 3; i++) {\n    randStr += parseNum(randNum % 52);\n    randNum = Math.floor(randNum / 52);\n  }\n\n  return randStr;\n};\n\nexport default SessionLauncherPage;\n"],"names":["useIntervalValue","calculator","delay","triggerKey","result","setResult","useState","useEffect","callback","savedCallback","useRef","current","id","setInterval","_savedCallback$curren","call","clearInterval","useInterval","newResult","_ref","value","onChange","localFormat","pickerProps","setControllableValue","useControllableValue","_jsx","DatePicker","dayjs","undefined","_value","_value2","_value2$tz","_","newValue","format","tz","toISOString","ImageAliasNameAndBaseVersionTags","image","props","getImageAliasName","getBaseVersion","tagAlias","useBackendAIImageMetaData","DoubleTag","values","label","color","BaseVersionTags","_ref2","Tag","children","BaseImageTags","_ref3","getBaseImage","ArchitectureTags","_ref4","getArchitecture","LangTags","_ref5","getImageLang","ConstraintTags","_ref6","labels","getFilteredRequirementsTags","getCustomTag","_jsxs","Flex","tag","index","SessionKernelTags","_ref7","bordered","style","_Fragment","React","node","status","extraButtonTitle","onClickExtraButton","extra","cardProps","token","theme","useToken","_extra","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","onClick","Card","borderColor","colorSuccess","formItemProps","inputRef","t","useTranslation","form","Form","useFormInstance","List","fields","add","remove","direction","gap","align","map","key","name","restField","Item","marginBottom","flex","rules","required","message","pattern","getFieldValue","validator","rule","variableName","variableNames","i","variable","length","Promise","reject","resolve","Input","ref","placeholder","fieldNames","field","validateFields","validateTrigger","MinusCircleOutlined","noStyle","setTimeout","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","baiClient","useSuspendedBackendaiClient","tooltip","Trans","i18nKey","max","_config","maxCountForPreopenPorts","count","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","e","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","min","f","test","allowClear","autoComplete","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","require","tagValues","r","w","d","perm","hasPermission","includes","toUpperCase","compact","vFolderAliasNameRegExp","filter","showAliasInput","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","aliasBasePath","aliasMap","controlledAliasMap","onChangeAliasMap","rowKey","onChangeAutoMountedFolders","showAutoMountedFoldersSection","tableProps","getRowKey","record","setSelectedRowKeys","defaultValue","setAliasMap","internalForm","useForm","setFieldsValue","startsWith","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","fetchKey","updateFetchKey","useUpdatableState","isPendingRefetch","startRefetchTransition","useTransition","data","allFolderList","useTanQuery","queryKey","queryFn","method","url","concat","staleTime","autoMountedFolderNames","useMemo","vf","_vf$name","searchKey","setSearchKey","displayingFolders","mapAliasToPath","useEventNotStable","input","handleAliasUpdate","getFieldsValue","k","catch","JSON","stringify","shadowRoot","useShadowRoot","columns","title","Typography","Text","fontWeight","Tooltip","getPopupContainer","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","display","height","maxWidth","TextHighlighter","keyword","shouldUpdate","prev","cur","allAliasPathMap","reduce","async","path","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","justify","target","loading","ReloadOutlined","component","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","Descriptions","size","useWatch","hidden","arr","alias","valuePropName","trigger","VFolderTable","setFieldValue","pagination","names","FormResourceNumbers","containerCount","resource","_iSizeToSize","_iSizeToSize2","ResourceNumber","iSizeToSize","number","opts","shmem","generateSessionId","text","possible","charAt","Math","floor","random","generateRandomString","randNum","randStr","num","String","fromCharCode","SessionLauncherPage","_baiClient$_config","_baiClient$_config2","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue7","_form$getFieldValue8","_form$getFieldValue9","_form$getFieldValue10","_form$getFieldValue11","_form$getFieldValue12","_form$getFieldValue13","_form$getFieldValue15","_form$getFieldValue16","app","App","useApp","sessionMode","mainContentDivRef","useRecoilValue","mainContentDivRefState","isStartingSession","setIsStartingSession","INITIAL_FORM_VALUES","sessionType","allocationPreset","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","default_session_environment","environments","environment","RESOURCE_ALLOCATION_INITIAL_FORM_VALUES","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","step","currentStep","formValues","formValuesFromQueryParams","redirectTo","setQuery","useQueryParams","StringParam","isDarkMode","useThemeMode","navigate","useNavigate","webuiNavigate","useWebUINavigate","upsertNotification","useSetBAINotification","run","syncFormToURLWithDebounce","useDebounceFn","leading","wait","trailing","setCurrentStep","nextStep","screens","Grid","useBreakpoint","_mainContentDivRef$cu","scrollTo","preserve","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","setFinalStepLastValidateTime","finally","justifyContent","Breadcrumb","items","href","Provider","onFormChange","info","layout","requiredMark","initialValues","Radio","className","options","code","SessionNameFormItem","TextArea","autoSize","next","BAIIntervalText","isBefore","getFieldError","fromNow","Checkbox","checked","_prev$batch","_next$batch","_form$getFieldValue","disabled","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","console","log","ImageEnvironmentSelectFormItems","EnvVarFormList","ResourceAllocationFormItems","enableNumOfSessions","enableResourcePresets","Switch","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","Row","gutter","marginMD","marginTop","Col","xs","sm","InputNumber","stringMode","VFolderTableFromItem","vfolder","_vfolder$name","PortSelectFormItem","BAICard","findIndex","column","SyntaxHighlighter","dark","language","customStyle","margin","idx","ImageMetaIcon","version","manual","copyable","customizedTag","codeTagProps","join","getFieldWarning","Alert","showIcon","span","wrap","opacity","_form$getFieldValue14","Popconfirm","description","onConfirm","resetFields","okText","okButtonProps","danger","paddingRight","paddingLeft","LeftOutlined","PlayCircleOutlined","startSession","then","mounts","modal","confirm","content","onOk","onCancel","imageFullName","kernelName","architecture","split","sessionName","sessionInfo","config","startsAt","startupCommand","domain","domainName","scaling_group","resourceGroup","cluster_mode","cluster_size","maxWaitSeconds","cpu","mem","compareNumberWithUnits","accelerator","acceleratorType","mount_map","vfoldersAliasMap","env","preopen_ports","ports","sessionPromises","num_of_sessions","formattedSessionName","createIfNotExists","res","created","err","backgroundTask","promise","all","statusDescriptions","pending","resolved","duration","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","globalThis","appLauncher","showLauncher","ghost","RightOutlined","DoubleRightOutlined","lg","position","top","Steps","nextCurrent","s"],"sourceRoot":""}