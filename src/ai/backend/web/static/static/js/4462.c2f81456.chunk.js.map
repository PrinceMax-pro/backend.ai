{"version":3,"file":"static/js/4462.c2f81456.chunk.js","mappings":"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","sources":["components/ErrorLogList.tsx","components/KeypairInfoModal.tsx","components/SSHKeypairGenerationModal.tsx","components/SSHKeypairManualFormModal.tsx","components/SSHKeypairManagementModal.tsx","components/SettingItem.tsx","components/SettingList.tsx","components/BAICodeEditor.tsx","components/ShellScriptEditModal.tsx","components/TableColumnsSettingModal.tsx","components/__generated__/KeypairInfoModalQuery.graphql.ts","pages/UserSettingsPage.tsx"],"sourcesContent":["import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport BAIModal from './BAIModal';\nimport Flex from './Flex';\nimport TableColumnsSettingModal from './TableColumnsSettingModal';\nimport TextHighlighter from './TextHighlighter';\nimport {\n  DeleteOutlined,\n  SearchOutlined,\n  SettingOutlined,\n  LoadingOutlined,\n  ReloadOutlined,\n} from '@ant-design/icons';\nimport { useLocalStorageState } from 'ahooks';\nimport { Button, Typography, Table, Alert, Checkbox, Input, theme } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useState, useMemo, useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype LogType = {\n  isError: boolean;\n  statusCode: any;\n  statusText: any;\n  title: any;\n  message: string;\n  requestMethod: string;\n  timestamp: string;\n  type: string;\n  requestUrl: string;\n  requestParameters?: string;\n  formattedTimestamp?: string; // for display only\n};\nconst ErrorLogList: React.FC<{\n  onChangeSearch?: (value: string) => void;\n}> = () => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isOpenClearLogsModal, setIsOpenClearLogsModal] = useState(false);\n  const [isOpenColumnsSetting, setIsOpenColumnsSetting] = useState(false);\n  const [checkedShowOnlyError, setCheckedShowOnlyError] = useState(false);\n  const [logSearch, setLogSearch] = useState('');\n  const [updateKey, checkUpdateKey] = useUpdatableState('first');\n  const [isPendingRefreshTransition, startRefreshTransition] = useTransition();\n  const [isPendingSearchTransition, startSearchTransition] = useTransition();\n  const [isPendingReset, startResetTransition] = useTransition();\n\n  useSuspendedBackendaiClient(); // TODO: remove this after react routing is stable. This is for remove flickering when browser reload\n  const columns: ColumnsType<LogType> = [\n    {\n      title: t('logs.TimeStamp'),\n      dataIndex: 'formattedTimeStamp',\n      key: 'timeStamp',\n      render: (value) => (\n        <div style={{ minWidth: 50 }}>\n          {_.isUndefined(value) ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n      fixed: 'left',\n    },\n    {\n      title: t('logs.Status'),\n      dataIndex: 'statusCode',\n      key: 'status',\n      render: (value, record) => (\n        <div style={{ minWidth: 50 }}>\n          {_.isUndefined(value) ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>\n              {value + ' ' + record.statusText}\n            </TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.ErrorTitle'),\n      dataIndex: 'title',\n      key: 'errorTitle',\n      render: (value) => (\n        <div style={{ minWidth: 50 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>\n              {_.toString(value)}\n              {/* set toString because sometime value type is object */}\n            </TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.ErrorMessage'),\n      dataIndex: 'message',\n      key: 'errorMessage',\n      render: (value) => (\n        <div style={{ minWidth: 70 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.ErrorType'),\n      dataIndex: 'type',\n      key: 'errorType',\n      render: (value) => (\n        <div style={{ minWidth: 60 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.Method'),\n      dataIndex: 'requestMethod',\n      key: 'method',\n      render: (value) => (\n        <div style={{ minWidth: 60 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.RequestUrl'),\n      dataIndex: 'requestUrl',\n      key: 'requestUrl',\n      render: (value) => (\n        <div style={{ minWidth: 60 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('logs.Parameters'),\n      dataIndex: 'requestParameters',\n      key: 'requestParameter',\n      render: (value) => (\n        <div style={{ minWidth: 100 }}>\n          {!value ? (\n            '-'\n          ) : (\n            <TextHighlighter keyword={logSearch}>{value}</TextHighlighter>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  const [displayedColumnKeys, setDisplayedColumnKeys] = useLocalStorageState(\n    'backendaiwebui.ErrorLogList.displayedColumnKeys',\n    {\n      defaultValue: columns.map((column) => _.toString(column.key)),\n    },\n  );\n\n  const storageLogData = useMemo(() => {\n    const raw: LogType[] = JSON.parse(\n      localStorage.getItem('backendaiwebui.logs') || '[]',\n    );\n    return _.map(raw, (log) => {\n      return {\n        ...log,\n        formattedTimeStamp: dayjs(log.timestamp).format('ll LTS'),\n      };\n    });\n    // Only update when updateKey is changed\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updateKey]);\n\n  const filteredLogData = useMemo(() => {\n    if (_.isEmpty(logSearch)) return storageLogData;\n    const regExp = new RegExp(`${_.escapeRegExp(logSearch)}`, 'i');\n    return _.filter(storageLogData, (log) => {\n      return _.some(log, (value, key) => {\n        if (key === 'timestamp') {\n          // timestamp is not display in table, use formattedTimestamp instead\n          return false;\n        }\n        return regExp.test(_.toString(value));\n      });\n    });\n  }, [logSearch, storageLogData]);\n\n  return (\n    <Flex direction=\"column\" align=\"stretch\">\n      <Flex\n        direction=\"row\"\n        justify=\"between\"\n        wrap=\"wrap\"\n        gap={'xs'}\n        style={{\n          padding: token.paddingContentVertical,\n          paddingLeft: token.paddingContentHorizontalSM,\n          paddingRight: token.paddingContentHorizontalSM,\n        }}\n      >\n        <Flex direction=\"column\" align=\"start\">\n          <Typography.Title level={4} style={{ margin: 0, padding: 0 }}>\n            {t('logs.LogMessages')}\n          </Typography.Title>\n          <Typography.Text type=\"secondary\">\n            {t('logs.UpTo3000Logs')}\n          </Typography.Text>\n        </Flex>\n        <Flex direction=\"row\" gap={'xs'} wrap=\"wrap\" style={{ flexShrink: 1 }}>\n          <Flex gap={'xs'}>\n            <Input\n              allowClear\n              prefix={<SearchOutlined />}\n              placeholder={t('logs.SearchLogs')}\n              onChange={(e) => {\n                startSearchTransition(() => setLogSearch(e.target.value));\n              }}\n              style={{\n                width: 200,\n              }}\n            />\n            <Checkbox\n              onChange={(e) => setCheckedShowOnlyError(e.target.checked)}\n            >\n              {t('logs.ShowOnlyError')}\n            </Checkbox>\n          </Flex>\n          <Flex gap={'xs'}>\n            <Button\n              icon={<ReloadOutlined />}\n              loading={isPendingRefreshTransition}\n              onClick={() => {\n                startRefreshTransition(() => checkUpdateKey());\n              }}\n            >\n              {t('button.Refresh')}\n            </Button>\n            <Button\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsOpenClearLogsModal(true);\n              }}\n            >\n              {t('button.ClearLogs')}\n            </Button>\n          </Flex>\n        </Flex>\n      </Flex>\n      <Table\n        pagination={{\n          showSizeChanger: false,\n          style: {\n            marginBottom: 0,\n          },\n        }}\n        loading={\n          isPendingSearchTransition\n            ? {\n                indicator: <LoadingOutlined />,\n              }\n            : false\n        }\n        scroll={{ x: 'max-content', y: 'calc(100vh - 400px)' }}\n        dataSource={\n          checkedShowOnlyError\n            ? _.filter(filteredLogData, (log) => {\n                return log.isError;\n              })\n            : (filteredLogData as LogType[])\n        }\n        columns={columns.filter((column) =>\n          displayedColumnKeys?.includes(_.toString(column.key)),\n        )}\n        onRow={(record) => {\n          return {\n            style: { color: record.isError ? token.colorError : '' },\n          };\n        }}\n      />\n      <Flex\n        justify=\"end\"\n        style={{\n          paddingRight: token.paddingXS,\n        }}\n      >\n        <Button\n          type=\"text\"\n          icon={<SettingOutlined />}\n          onClick={() => {\n            setIsOpenColumnsSetting(true);\n          }}\n        />\n      </Flex>\n      <BAIModal\n        open={isOpenClearLogsModal}\n        title={t('dialog.warning.LogDeletion')}\n        okText={t('button.Delete')}\n        okButtonProps={{ danger: true }}\n        confirmLoading={isPendingReset}\n        onOk={() => {\n          startResetTransition(() => {\n            localStorage.removeItem('backendaiwebui.logs');\n            checkUpdateKey();\n            setIsOpenClearLogsModal(false);\n          });\n        }}\n        cancelText={t('button.Cancel')}\n        onCancel={() => setIsOpenClearLogsModal(false)}\n      >\n        <Alert message={t('dialog.warning.CannotBeUndone')} type=\"warning\" />\n      </BAIModal>\n      <TableColumnsSettingModal\n        open={isOpenColumnsSetting}\n        onRequestClose={(values) => {\n          values?.selectedColumnKeys &&\n            setDisplayedColumnKeys(values?.selectedColumnKeys);\n          setIsOpenColumnsSetting(false);\n        }}\n        columns={columns}\n        displayedColumnKeys={displayedColumnKeys ? displayedColumnKeys : []}\n      />\n    </Flex>\n  );\n};\n\nexport default ErrorLogList;\n","/**\n @license\n Copyright (c) 2015-2024 Lablup Inc. All rights reserved.\n */\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentUserInfo } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { KeypairInfoModalQuery } from './__generated__/KeypairInfoModalQuery.graphql';\nimport { Button, Table, Typography, Tag } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface KeypairInfoModalProps extends BAIModalProps {\n  onRequestClose: () => void;\n}\n\nconst KeypairInfoModal: React.FC<KeypairInfoModalProps> = ({\n  onRequestClose,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const [userInfo] = useCurrentUserInfo();\n  const baiClient = useSuspendedBackendaiClient();\n  const { data: keypairs } = useTanQuery({\n    queryKey: ['baiClient.keypair.list', baiModalProps.open], // refetch on open state\n    queryFn: () => {\n      return baiModalProps.open\n        ? baiClient.keypair\n            .list(\n              userInfo.email,\n              ['access_key', 'secret_key', 'is_active'],\n              true,\n            )\n            .then((res: any) => res.keypairs)\n        : null;\n    },\n    staleTime: 0,\n  });\n\n  const supportMainAccessKey = baiClient?.supports('main-access-key');\n\n  const { user } = useLazyLoadQuery<KeypairInfoModalQuery>(\n    graphql`\n      query KeypairInfoModalQuery($email: String) {\n        user(email: $email) {\n          email\n          main_access_key @since(version: \"23.09.7\")\n        }\n      }\n    `,\n    {\n      email: userInfo.email,\n    },\n  );\n\n  return (\n    <BAIModal\n      {...baiModalProps}\n      title={t('usersettings.MyKeypairInfo')}\n      centered\n      onCancel={onRequestClose}\n      destroyOnClose\n      width={'auto'}\n      footer={[\n        <Button\n          key=\"keypairInfoClose\"\n          onClick={() => {\n            onRequestClose();\n          }}\n        >\n          {t('button.Close')}\n        </Button>,\n      ]}\n    >\n      <Table\n        scroll={{ x: 'max-content' }}\n        rowKey={'access_key'}\n        dataSource={keypairs}\n        columns={[\n          {\n            title: '#',\n            fixed: 'left',\n            render: (id, record, index) => {\n              ++index;\n              return index;\n            },\n            showSorterTooltip: false,\n            rowScope: 'row',\n          },\n          {\n            title: t('general.AccessKey'),\n            key: 'accessKey',\n            dataIndex: 'access_key',\n            fixed: 'left',\n            render: (value) => (\n              <Flex direction=\"column\" align=\"start\">\n                <Typography.Text ellipsis copyable>\n                  {value}\n                </Typography.Text>\n                {supportMainAccessKey && value === user?.main_access_key && (\n                  <Tag color=\"#457b3b\">{t('credential.MainAccessKey')}</Tag>\n                )}\n              </Flex>\n            ),\n          },\n          {\n            title: t('general.SecretKey'),\n            key: 'secretKey',\n            dataIndex: 'secret_key',\n            fixed: 'left',\n            render: (value) => (\n              <Typography.Text ellipsis copyable>\n                {value}\n              </Typography.Text>\n            ),\n          },\n        ]}\n      />\n    </BAIModal>\n  );\n};\n\nexport default KeypairInfoModal;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Popconfirm, Spin, Typography, theme } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SSHKeypairGenerationModalProps extends BAIModalProps {\n  onRequestClose: () => void;\n  isRefreshModalPending?: boolean;\n}\n\nconst SSHKeypairGenerationModal: React.FC<SSHKeypairGenerationModalProps> = ({\n  onRequestClose,\n  isRefreshModalPending,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const baiClient = useSuspendedBackendaiClient();\n\n  const { data } = useTanQuery<{\n    ssh_public_key: string;\n    ssh_private_key: string;\n  }>({\n    queryKey: ['refreshSSHKeypair', baiModalProps.open],\n    queryFn: () => {\n      return baiModalProps.open ? baiClient.refreshSSHKeypair() : null;\n    },\n  });\n\n  return (\n    <BAIModal\n      title={t('usersettings.SSHKeypairGeneration')}\n      closeIcon={false}\n      footer={[\n        <Popconfirm\n          key=\"close\"\n          title={t('button.Confirm')}\n          description={t('usersettings.ClearSSHKeypairInput')}\n          onConfirm={onRequestClose}\n        >\n          <Button>{t('button.Close')}</Button>\n        </Popconfirm>,\n      ]}\n      {...baiModalProps}\n    >\n      <Spin spinning={isRefreshModalPending} indicator={<LoadingOutlined />}>\n        <Typography.Text strong>{t('usersettings.PublicKey')}</Typography.Text>\n        <Flex direction=\"row\" align=\"start\" justify=\"between\">\n          <Typography.Paragraph>\n            <pre\n              style={{\n                width: 430,\n                maxHeight: 100,\n                overflowY: 'scroll',\n                scrollbarWidth: 'none', // Firefox\n              }}\n            >\n              {data?.ssh_public_key}\n            </pre>\n          </Typography.Paragraph>\n          <Typography.Text\n            copyable={{ text: data?.ssh_public_key }}\n            style={{ marginTop: token.margin }}\n          />\n        </Flex>\n        <Typography.Text strong>{t('usersettings.PrivateKey')}</Typography.Text>\n        <Flex direction=\"row\" align=\"start\" justify=\"between\">\n          <Typography.Paragraph>\n            <pre\n              style={{\n                width: 430,\n                maxHeight: 100,\n                overflowY: 'scroll',\n                scrollbarWidth: 'none', // Firefox\n              }}\n            >\n              {data?.ssh_private_key}\n            </pre>\n            <Typography.Text type=\"danger\">\n              {t('usersettings.SSHKeypairGenerationWarning')}\n            </Typography.Text>\n          </Typography.Paragraph>\n          <Typography.Text\n            copyable={{ text: data?.ssh_private_key }}\n            style={{ marginTop: token.margin }}\n          />\n        </Flex>\n      </Spin>\n    </BAIModal>\n  );\n};\n\nexport default SSHKeypairGenerationModal;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport { Form, FormInstance, Input, Typography } from 'antd';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SSHKeypairManualFormModalProps extends BAIModalProps {\n  onRequestClose: () => void;\n  onRequestRefresh: () => void;\n}\n\nconst SSHKeypairManualFormModal: React.FC<SSHKeypairManualFormModalProps> = ({\n  onRequestClose,\n  onRequestRefresh,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  const formRef = useRef<FormInstance>(null);\n\n  const mutationToPostSSHKeypair = useTanMutation({\n    mutationFn: (values: { pubkey: string; privkey: string }) => {\n      return baiClient.postSSHKeypair(values);\n    },\n  });\n\n  return (\n    <BAIModal\n      title={t('usersettings.SSHKeypairEnterManually')}\n      okText={t('button.Save')}\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            mutationToPostSSHKeypair.mutate(values, {\n              onSuccess: () => {\n                onRequestRefresh();\n              },\n            });\n            onRequestClose();\n          })\n          .catch(() => {});\n      }}\n      destroyOnClose={true}\n      {...baiModalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        layout=\"vertical\"\n        requiredMark=\"optional\"\n      >\n        <Form.Item\n          name=\"pubkey\"\n          label={\n            <Typography.Text strong>\n              {t('usersettings.PublicKey')}\n            </Typography.Text>\n          }\n          rules={[{ required: true, message: t('settings.InputRequired') }]}\n        >\n          <Input.TextArea\n            rows={5}\n            // color of \"ant-typography pre\" class\n            style={{ backgroundColor: 'rgba(150, 150, 150, 0.1)' }}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"privkey\"\n          label={\n            <Typography.Text strong>\n              {t('usersettings.PrivateKey')}\n            </Typography.Text>\n          }\n          rules={[{ required: true, message: t('settings.InputRequired') }]}\n        >\n          <Input.TextArea\n            rows={5}\n            // color of \"ant-typography pre\" class\n            style={{ backgroundColor: 'rgba(150, 150, 150, 0.1)' }}\n          />\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default SSHKeypairManualFormModal;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport SSHKeypairGenerationModal from './SSHKeypairGenerationModal';\nimport SSHKeypairManualFormModal from './SSHKeypairManualFormModal';\nimport { useToggle } from 'ahooks';\nimport { Button, Typography, theme } from 'antd';\nimport React, { useTransition } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SSHKeypairManagementModalProps extends BAIModalProps {\n  onRequestClose: (success?: boolean) => void;\n}\n\nconst SSHKeypairManagementModal: React.FC<SSHKeypairManagementModalProps> = ({\n  onRequestClose,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [isPendingRefreshModal, startRefreshModalTransition] = useTransition();\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const [\n    isOpenSSHKeypairGenerationModal,\n    { toggle: toggleSSHKeypairGenerationModal },\n  ] = useToggle(false);\n  const [\n    isOpenSSHKeypairManualFormModal,\n    { toggle: toggleSSHKeypairManualFormModal },\n  ] = useToggle(false);\n\n  const baiClient = useSuspendedBackendaiClient();\n  const { data } = useTanQuery<{\n    ssh_public_key: string;\n  }>({\n    queryKey: ['fetchSSHKeypair', fetchKey],\n    queryFn: () => {\n      return baiClient.fetchSSHKeypair();\n    },\n  });\n\n  return (\n    <>\n      <BAIModal\n        title={t('usersettings.SSHKeypairGeneration')}\n        onCancel={() => onRequestClose()}\n        footer={[\n          <Button key=\"back\" onClick={() => onRequestClose()}>\n            {t('button.Close')}\n          </Button>,\n          <Button\n            key=\"generate\"\n            type=\"primary\"\n            onClick={toggleSSHKeypairGenerationModal}\n          >\n            {t('button.Generate')}\n          </Button>,\n          <Button\n            key=\"enterManually\"\n            type=\"primary\"\n            onClick={toggleSSHKeypairManualFormModal}\n          >\n            {t('button.EnterManually')}\n          </Button>,\n        ]}\n        {...modalProps}\n      >\n        <Typography.Text strong>\n          {t('usersettings.CurrentSSHPublicKey')}\n        </Typography.Text>\n        {data?.ssh_public_key ? (\n          <Flex direction=\"row\" align=\"start\" justify=\"between\">\n            <Typography.Paragraph>\n              <pre style={{ width: 430, height: 270 }}>\n                {data?.ssh_public_key}\n              </pre>\n            </Typography.Paragraph>\n            <Typography.Text\n              copyable={{ text: data?.ssh_public_key }}\n              style={{ marginTop: token.margin }}\n            />\n          </Flex>\n        ) : (\n          <Typography.Paragraph>\n            <pre style={{ height: 270 }}>\n              {t('usersettings.NoExistingSSHKeypair')}\n            </pre>\n          </Typography.Paragraph>\n        )}\n      </BAIModal>\n      <SSHKeypairGenerationModal\n        open={isOpenSSHKeypairGenerationModal}\n        isRefreshModalPending={isPendingRefreshModal}\n        onRequestClose={() => {\n          toggleSSHKeypairGenerationModal();\n          startRefreshModalTransition(() => {\n            updateFetchKey();\n          });\n        }}\n      />\n      <SSHKeypairManualFormModal\n        open={isOpenSSHKeypairManualFormModal}\n        onCancel={toggleSSHKeypairManualFormModal}\n        onRequestClose={() => {\n          toggleSSHKeypairManualFormModal();\n        }}\n        onRequestRefresh={() => {\n          startRefreshModalTransition(() => {\n            updateFetchKey();\n          });\n        }}\n      />\n    </>\n  );\n};\n\nexport default SSHKeypairManagementModal;\n","import Flex from './Flex';\nimport { Badge, Checkbox, Select, SelectProps, Typography, theme } from 'antd';\nimport { createStyles } from 'antd-style';\nimport React, { ReactElement, ReactNode } from 'react';\n\nexport interface SettingItemProps {\n  type: 'custom' | 'checkbox' | 'select';\n  title: string;\n  description?: string | ReactElement;\n  children?: ReactNode;\n  defaultValue?: any;\n  value?: any;\n  setValue?: (value: any) => void;\n  selectProps?: Omit<SelectProps, 'value' | 'onChange' | 'defaultValue'>;\n  onChange?: (value: any) => void;\n}\n\nconst useStyles = createStyles(({ css }) => ({\n  baiSettingItemCheckbox: css`\n    .ant-checkbox {\n      align-self: flex-start;\n      margin-top: 0.2rem;\n    }\n  `,\n}));\n\nconst SettingItem: React.FC<SettingItemProps> = ({\n  type,\n  title,\n  description,\n  children,\n  defaultValue,\n  value,\n  selectProps,\n  onChange,\n}) => {\n  const { token } = theme.useToken();\n  const { styles } = useStyles();\n\n  return (\n    <Flex direction=\"column\" align=\"start\" gap={'xxs'}>\n      <Flex direction=\"row\" gap={'xxs'}>\n        <Typography.Text\n          strong\n          style={{\n            fontSize: token.fontSize,\n          }}\n        >\n          {title}\n        </Typography.Text>\n        {value !== undefined && value !== null && defaultValue !== value && (\n          <Badge dot status=\"warning\" />\n        )}\n      </Flex>\n      {type === 'custom' && (\n        <>\n          {description}\n          {children}\n        </>\n      )}\n      {type === 'checkbox' && (\n        <Checkbox\n          checked={value}\n          onChange={onChange}\n          className={styles.baiSettingItemCheckbox}\n        >\n          {description}\n        </Checkbox>\n      )}\n      {type === 'select' && (\n        <>\n          {description}\n          <Select\n            value={value}\n            popupMatchSelectWidth={false}\n            onChange={onChange}\n            {...selectProps}\n          ></Select>\n        </>\n      )}\n    </Flex>\n  );\n};\n\nexport default SettingItem;\n","import BAIModal from './BAIModal';\nimport Flex from './Flex';\nimport SettingItem from './SettingItem';\nimport { SettingItemProps } from './SettingItem';\nimport { RedoOutlined, SearchOutlined } from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport { Alert, Button, Checkbox, Input, Tabs, Typography, theme } from 'antd';\nimport { createStyles } from 'antd-style';\nimport _ from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = createStyles(({ css }) => ({\n  TabStyles: css`\n    .ant-tabs-tab-active {\n      font-weight: var(--token-fontWeightSuperStrong, 700);\n    }\n    .ant-typography-secondary {\n      font-weight: normal !important;\n    }\n  `,\n}));\n\ninterface SettingPageProps {\n  settingGroup: { title: string; settingItems: SettingItemProps[] }[];\n  tabDirection?: 'top' | 'left';\n}\n\nconst SettingList: React.FC<SettingPageProps> = ({\n  settingGroup,\n  tabDirection = 'left',\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const { styles } = useStyles();\n  const [searchValue, setSearchValue] = useState('');\n  const [changedOptionFilter, setChangedOptionFilter] = useState(false);\n  const [isOpenResetChangesModal, { toggle: setIsOpenResetChangesModal }] =\n    useToggle(false);\n\n  const appendedAllSettingGroup = useMemo(() => {\n    return [\n      {\n        title: t('general.All'),\n        settingItems: _.flatMap(settingGroup, (item) => item.settingItems),\n      },\n      ...settingGroup,\n    ];\n    // eslint-disable-next-line\n  }, [settingGroup]);\n\n  const searchedItemFilter = (item: SettingItemProps) => {\n    return (\n      item.title.toLowerCase().includes(searchValue.toLowerCase()) ||\n      (typeof item.description === 'string' &&\n        item.description.toLowerCase().includes(searchValue.toLowerCase()))\n    );\n  };\n\n  const changedItemValidator = (item: SettingItemProps) => {\n    if (item.value === null || item.value === undefined) {\n      return false;\n    }\n    return item.value !== item.defaultValue;\n  };\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        gap={'md'}\n        align=\"stretch\"\n        style={{\n          padding: token.paddingContentHorizontal,\n          maxWidth: token.screenLG,\n        }}\n      >\n        <Flex justify=\"start\" gap={'xs'}>\n          <Input\n            prefix={<SearchOutlined />}\n            placeholder={t('settings.SearchPlaceholder')}\n            onChange={(e) => setSearchValue(e.target.value)}\n            value={searchValue}\n          />\n          <Checkbox\n            onChange={(e) => setChangedOptionFilter(e.target.checked)}\n            style={{ whiteSpace: 'nowrap' }}\n          >\n            {t('settings.ShowOnlyChanged')}\n          </Checkbox>\n          <Button\n            icon={<RedoOutlined />}\n            onClick={() => setIsOpenResetChangesModal()}\n          >\n            {t('button.Reset')}\n          </Button>\n        </Flex>\n        <Tabs\n          className={styles.TabStyles}\n          tabPosition={tabDirection ? 'left' : 'top'}\n          tabBarStyle={{ minWidth: 200 }}\n          items={_.map(appendedAllSettingGroup, (settingGroup) => {\n            const filteredItems = settingGroup.settingItems.filter((item) => {\n              return (\n                (!changedOptionFilter || changedItemValidator(item)) &&\n                searchedItemFilter(item)\n              );\n            });\n            return {\n              key: settingGroup.title,\n              label: (\n                <>\n                  <Typography.Text>{settingGroup.title}</Typography.Text>\n                  <Typography.Text type=\"secondary\">{` (${filteredItems.length})`}</Typography.Text>\n                </>\n              ),\n              children: (\n                <Flex direction=\"column\" gap={'lg'} align=\"start\">\n                  {filteredItems.map((item) => (\n                    <SettingItem {...item} />\n                  ))}\n                </Flex>\n              ),\n            };\n          })}\n        />\n      </Flex>\n      <BAIModal\n        open={isOpenResetChangesModal}\n        title={t('dialog.ask.DoYouWantToResetChanges')}\n        okText={t('button.Reset')}\n        okButtonProps={{ danger: true }}\n        onOk={() => {\n          _.flatMap(settingGroup, (item) => item.settingItems).forEach(\n            (option) => {\n              option?.setValue && option.setValue(option.defaultValue);\n            },\n          );\n          setIsOpenResetChangesModal();\n        }}\n        cancelText={t('button.Cancel')}\n        onCancel={() => setIsOpenResetChangesModal()}\n      >\n        <Alert\n          showIcon\n          message={t('dialog.warning.CannotBeUndone')}\n          type=\"warning\"\n        />\n      </BAIModal>\n    </>\n  );\n};\n\nexport default SettingList;\n","import useControllableState from '../hooks/useControllableState';\nimport { loadLanguage, LanguageName } from '@uiw/codemirror-extensions-langs';\nimport CodeMirror, { ReactCodeMirrorProps } from '@uiw/react-codemirror';\nimport { EditorView } from '@uiw/react-codemirror';\n\ninterface BAICodeEditorProps extends Omit<ReactCodeMirrorProps, 'language'> {\n  value: string;\n  onChange: (value: string) => void;\n  language: LanguageName;\n  editable?: boolean;\n  showLineNumbers?: boolean;\n  lineWrapping?: boolean;\n}\n\nconst BAICodeEditor: React.FC<BAICodeEditorProps> = ({\n  value,\n  onChange,\n  language = 'shell',\n  editable = false,\n  showLineNumbers = true,\n  lineWrapping = false,\n  ...CodeMirrorProps\n}) => {\n  const [script, setScript] = useControllableState<string>({\n    defaultValue: '',\n    value,\n    onChange,\n  });\n  const extensions = [loadLanguage(language)!];\n\n  return (\n    <CodeMirror\n      theme={'dark'}\n      extensions={\n        lineWrapping ? [EditorView.lineWrapping, ...extensions] : extensions\n      }\n      editable={editable}\n      readOnly={!editable}\n      basicSetup={{\n        lineNumbers: showLineNumbers,\n      }}\n      {...CodeMirrorProps}\n      value={script}\n      onChange={(value, viewUpdate) => setScript(value)}\n    />\n  );\n};\n\nexport default BAICodeEditor;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport { ShellScriptType } from '../pages/UserSettingsPage';\nimport BAICodeEditor from './BAICodeEditor';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { App, Button, Dropdown, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype UserConfigScript = {\n  path: string;\n  permission: string;\n  data: string;\n};\n\ninterface BootstrapScriptEditModalProps extends BAIModalProps {\n  onRequestClose: (success?: boolean) => void;\n  shellInfo: ShellScriptType;\n}\n\nconst ShellScriptEditModal: React.FC<BootstrapScriptEditModalProps> = ({\n  onRequestClose,\n  shellInfo,\n  ...modalProps\n}) => {\n  const { t } = useTranslation();\n  const app = App.useApp();\n  const [rcfileNames, setRcfileNames] = useState<string>('.bashrc');\n  const [script, setScript] = useState<string>('');\n  const [userConfigScript, setUserConfigScript] = useState<\n    Array<UserConfigScript>\n  >([]);\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const updateBootStrapScriptMutation = useTanMutation({\n    mutationFn: (script: string) => {\n      return baiRequestWithPromise({\n        method: 'POST',\n        url: '/user-config/bootstrap-script',\n        body: { script },\n      });\n    },\n  });\n  const updateUserConfigScriptMutation = useTanMutation({\n    mutationFn: (script: string) => {\n      return baiRequestWithPromise({\n        method: 'PATCH',\n        url: '/user-config/dotfiles',\n        body: {\n          data: script,\n          path: rcfileNames,\n          permission: '644',\n        },\n      });\n    },\n  });\n  const createUserConfigScriptMutation = useTanMutation({\n    mutationFn: (script: string) => {\n      return baiRequestWithPromise({\n        method: 'POST',\n        url: '/user-config/dotfiles',\n        body: {\n          path: rcfileNames,\n          data: script,\n          permission: '644',\n        },\n      });\n    },\n  });\n  const deleteUserConfigScriptMutation = useTanMutation({\n    mutationFn: () => {\n      return baiRequestWithPromise({\n        method: 'DELETE',\n        url: '/user-config/dotfiles',\n        body: {\n          path: rcfileNames,\n        },\n      });\n    },\n  });\n\n  const fetchScript = () => {\n    if (shellInfo === 'bootstrap') {\n      (\n        baiRequestWithPromise({\n          method: 'GET',\n          url: '/user-config/bootstrap-script',\n        }) as Promise<string>\n      ).then((response: string) => {\n        setScript(response);\n      });\n    }\n    if (shellInfo === 'userconfig') {\n      (\n        baiRequestWithPromise({\n          method: 'GET',\n          url: '/user-config/dotfiles',\n        }) as Promise<Array<UserConfigScript>>\n      ).then((response) => {\n        const defaultScript = _.find(response, { path: rcfileNames });\n        setScript(defaultScript?.data || '');\n        setUserConfigScript(response);\n      });\n    }\n  };\n\n  useMemo(() => {\n    fetchScript();\n    //eslint-disable-next-line\n  }, [shellInfo]);\n\n  const saveScript = ({ closeAfter = true } = {}) => {\n    if (shellInfo === 'bootstrap') {\n      if (!script) {\n        app.message.error(t('usersettings.BootstrapScriptEmpty'));\n        return;\n      }\n      updateBootStrapScriptMutation.mutate(script, {\n        onSuccess: (result) => {\n          app.message.success(t('usersettings.BootstrapScriptUpdated'));\n          closeAfter && onRequestClose();\n        },\n        onError: (error: any) => {\n          app.message.error(error.message);\n          console.error(error);\n        },\n      });\n    }\n\n    if (shellInfo === 'userconfig') {\n      const existValidator = _.find(userConfigScript, { path: rcfileNames });\n      if (existValidator) {\n        updateUserConfigScriptMutation.mutate(script, {\n          onSuccess: (result) => {\n            app.message.success(t('usersettings.DescScriptUpdated'));\n            if (closeAfter) {\n              onRequestClose();\n            } else {\n              fetchScript();\n            }\n          },\n          onError: (error: any) => {\n            app.message.error(t('usersettings.DescNewUserConfigFileCreated'));\n            console.error(error);\n          },\n        });\n      } else {\n        createUserConfigScriptMutation.mutate(script, {\n          onSuccess: (result) => {\n            app.message.success(t('usersettings.DescScriptCreated'));\n            if (closeAfter) {\n              onRequestClose();\n            } else {\n              fetchScript();\n            }\n          },\n          onError: (error: any) => {\n            app.message.error(t('usersettings.DescNewUserConfigFileCreated'));\n            console.error(error);\n          },\n        });\n      }\n    }\n  };\n\n  const deleteScript = () => {\n    if (shellInfo === 'bootstrap') {\n      updateBootStrapScriptMutation.mutate('', {\n        onSuccess: (result) => {\n          app.message.success(t('usersettings.BootstrapScriptDeleted'));\n          onRequestClose();\n        },\n        onError: (error: any) => {\n          app.message.error(error.message);\n          console.error(error);\n        },\n      });\n    }\n    if (shellInfo === 'userconfig') {\n      deleteUserConfigScriptMutation.mutate(undefined, {\n        onSuccess: (result) => {\n          app.message.success(\n            `${t('usersettings.DescScriptDeleted')}${rcfileNames}`,\n          );\n          onRequestClose();\n        },\n        onError: (error: any) => {\n          app.message.error(error.message);\n          console.error(error);\n        },\n      });\n    }\n  };\n\n  return (\n    <BAIModal\n      width={800}\n      title={\n        shellInfo === 'bootstrap'\n          ? t('usersettings.EditBootstrapScript')\n          : t('usersettings.EditUserConfigScript')\n      }\n      onCancel={() => onRequestClose()}\n      okText={t('button.Save')}\n      footer={[\n        <Flex justify=\"between\" style={{ width: '100%' }}>\n          <Flex>\n            <Dropdown.Button\n              type=\"default\"\n              danger\n              style={{ width: 'fit-content' }}\n              menu={{\n                items: [\n                  {\n                    key: 'reset',\n                    label: t('button.Reset'),\n                    onClick: () => {\n                      app.modal.confirm({\n                        title: t('dialog.title.LetsDouble-Check'),\n                        content: t('dialog.ask.DoYouWantToResetChanges'),\n                        onOk: () => {\n                          if (shellInfo === 'bootstrap') {\n                            setScript('');\n                          }\n                          if (shellInfo === 'userconfig') {\n                            setScript('');\n                          }\n                        },\n                      });\n                    },\n                    danger: true,\n                  },\n                ],\n              }}\n              onClick={() => {\n                app.modal.confirm({\n                  title: t('dialog.title.LetsDouble-Check'),\n                  content: t('dialog.ask.DoYouWantToDeleteSomething', {\n                    name:\n                      shellInfo === 'bootstrap'\n                        ? 'Bootstrap script'\n                        : `${rcfileNames}`,\n                  }),\n                  onOk: deleteScript,\n                });\n              }}\n            >\n              <DeleteOutlined />\n            </Dropdown.Button>\n          </Flex>\n          <Flex gap={'sm'}>\n            <Button\n              key=\"cancel\"\n              onClick={() => onRequestClose()}\n              style={{ width: 'fit-content' }}\n            >\n              {t('button.Cancel')}\n            </Button>\n            <Dropdown.Button\n              key=\"submit\"\n              type=\"primary\"\n              onClick={() => {\n                saveScript();\n              }}\n              style={{ width: 'fit-content' }}\n              menu={{\n                items: [\n                  {\n                    key: 'save',\n                    label: t('button.SaveWithoutClose'),\n                    onClick: () => saveScript({ closeAfter: false }),\n                  },\n                ],\n              }}\n            >\n              {t('button.SaveAndClose')}\n            </Dropdown.Button>\n          </Flex>\n        </Flex>,\n      ]}\n      destroyOnClose\n      {...modalProps}\n    >\n      <Flex direction=\"column\" align=\"stretch\" gap={'sm'}>\n        <Typography.Text>\n          {t('usersettings.BootstrapScriptDescription')}\n        </Typography.Text>\n        {shellInfo === 'userconfig' && (\n          <Select\n            defaultValue={'.bashrc'}\n            onChange={(value) => {\n              const selectedScript = _.find(userConfigScript, { path: value });\n              setScript(selectedScript?.data || '');\n              setRcfileNames(value);\n            }}\n            options={[\n              { value: '.bashrc' },\n              { value: '.zshrc' },\n              { value: '.tmux.conf.local' },\n              { value: '.vimrc' },\n              { value: '.Renviron' },\n            ]}\n            style={{ width: '200px' }}\n          />\n        )}\n        <BAICodeEditor\n          onChange={(value) => setScript(value)}\n          language=\"shell\"\n          editable\n          value={script}\n        />\n      </Flex>\n    </BAIModal>\n  );\n};\n\nexport default ShellScriptEditModal;\n","import BAIModal, { BAIModalProps } from './BAIModal';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Checkbox, Input, theme, Form } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { FormInstance } from 'antd/lib';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormValues {\n  searchInput?: string;\n  selectedColumnKeys?: string[];\n}\n\ninterface TableColumnsSettingProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: (formValues?: FormValues) => void;\n  columns: ColumnsType<any>;\n  displayedColumnKeys?: string[];\n}\n\nconst TableColumnsSettingModal: React.FC<TableColumnsSettingProps> = ({\n  open,\n  onRequestClose,\n  columns,\n  displayedColumnKeys,\n  ...modalProps\n}) => {\n  const formRef = useRef<FormInstance>(null);\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const onChangeTitleToString: any = (element: any) => {\n    const text = React.Children.map(element.props.children, (child) => {\n      if (typeof child === 'string') {\n        return child;\n      }\n    });\n    return text;\n  };\n\n  const columnOptions = columns.map((column) => {\n    if (typeof column.title === 'string') {\n      return {\n        label: column.title,\n        value: _.toString(column.key),\n      };\n    } else if (typeof column.title === 'object' && 'props' in column.title!) {\n      return {\n        label: onChangeTitleToString(column.title),\n        value: _.toString(column.key),\n      };\n    } else {\n      return {\n        label: undefined,\n        value: _.toString(column.key),\n      };\n    }\n  });\n\n  return (\n    <BAIModal\n      title={t('table.SettingTable')}\n      open={open}\n      destroyOnClose\n      centered\n      onOk={() => {\n        formRef.current\n          ?.validateFields()\n          .then((values) => {\n            onRequestClose(values);\n          })\n          .catch(() => {});\n      }}\n      onCancel={() => {\n        onRequestClose();\n      }}\n      {...modalProps}\n    >\n      <Form\n        ref={formRef}\n        preserve={false}\n        initialValues={{\n          selectedColumnKeys:\n            displayedColumnKeys ||\n            columnOptions.map((columnOption) => columnOption.value),\n        }}\n        layout=\"vertical\"\n      >\n        <Form.Item\n          name=\"searchInput\"\n          label={t('table.SelectColumnToDisplay')}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            prefix={<SearchOutlined />}\n            style={{ marginBottom: token.marginSM }}\n            placeholder={t('table.SearchTableColumn')}\n          />\n        </Form.Item>\n        <Form.Item\n          noStyle\n          shouldUpdate={(prev, cur) => prev.searchInput !== cur.searchInput}\n        >\n          {({ getFieldValue }) => {\n            const searchKeyword = getFieldValue('searchInput')\n              ? _.toLower(getFieldValue('searchInput'))\n              : undefined;\n\n            const filteredColumns = columnOptions.map((columnOption) =>\n              _.toLower(_.toString(columnOption.label)).includes(\n                searchKeyword || '',\n              )\n                ? columnOption\n                : {\n                    ...columnOption,\n                    style: {\n                      display: 'none',\n                    },\n                  },\n            );\n            return (\n              <Form.Item\n                name=\"selectedColumnKeys\"\n                style={{\n                  height: 220,\n                  overflowY: 'auto',\n                }}\n              >\n                <Checkbox.Group\n                  options={filteredColumns}\n                  style={{ flexDirection: 'column' }}\n                />\n              </Form.Item>\n            );\n          }}\n        </Form.Item>\n      </Form>\n    </BAIModal>\n  );\n};\n\nexport default TableColumnsSettingModal;\n","/**\n * @generated SignedSource<<585764eb780b085e253f40bd9f8c1aeb>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from 'relay-runtime';\nexport type KeypairInfoModalQuery$variables = {\n  email?: string | null | undefined;\n};\nexport type KeypairInfoModalQuery$data = {\n  readonly user: {\n    readonly email: string | null | undefined;\n    readonly main_access_key: string | null | undefined;\n  } | null | undefined;\n};\nexport type KeypairInfoModalQuery = {\n  response: KeypairInfoModalQuery$data;\n  variables: KeypairInfoModalQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"email\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"main_access_key\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"KeypairInfoModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"KeypairInfoModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"352a943226b02e137a3fcd32fa0ae22a\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"KeypairInfoModalQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query KeypairInfoModalQuery(\\n  $email: String\\n) {\\n  user(email: $email) {\\n    email\\n    main_access_key @since(version: \\\"23.09.7\\\")\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"70097c005c8abc07e233048a68db1273\";\n\nexport default node;\n","import ErrorLogList from '../components/ErrorLogList';\nimport KeypairInfoModal from '../components/KeypairInfoModal';\nimport SSHKeypairManagementModal from '../components/SSHKeypairManagementModal';\nimport { SettingItemProps } from '../components/SettingItem';\nimport SettingList from '../components/SettingList';\nimport ShellScriptEditModal from '../components/ShellScriptEditModal';\nimport {\n  useBAISettingGeneralState,\n  useBAISettingUserState,\n} from '../hooks/useBAISetting';\nimport { SettingOutlined } from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport { Button } from 'antd';\nimport Card from 'antd/es/card/Card';\nimport { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { StringParam, useQueryParam, withDefault } from 'use-query-params';\n\ntype TabKey = 'general' | 'logs';\nexport type ShellScriptType = 'bootstrap' | 'userconfig' | undefined;\n\nconst tabParam = withDefault(StringParam, 'general');\n\nconst UserPreferencesPage = () => {\n  const { t } = useTranslation();\n  const [curTabKey, setCurTabKey] = useQueryParam('tab', tabParam);\n\n  const [desktopNotification, setDesktopNotification] = useBAISettingUserState(\n    'desktop_notification',\n  );\n  const [isClassicSessionLauncher, setIsClassicSessionLauncher] =\n    useBAISettingUserState('classic_session_launcher');\n  const [compactSidebar, setCompactSidebar] =\n    useBAISettingUserState('compact_sidebar');\n  const [selectedLanguage, setSelectedLanguage] =\n    useBAISettingUserState('selected_language');\n  const [, setLanguage] = useBAISettingGeneralState('language');\n  const [autoAutomaticUpdateCheck, setAutoAutomaticUpdateCheck] =\n    useBAISettingUserState('automatic_update_check');\n  const [autoLogout, setAutoLogout] = useBAISettingUserState('auto_logout');\n  const [isOpenSSHKeypairInfoModal, { toggle: toggleSSHKeypairInfoModal }] =\n    useToggle(false);\n  const [\n    isOpenSSHKeypairManagementModal,\n    { toggle: toggleSSHKeypairManagementModal },\n  ] = useToggle(false);\n  const [preserveLogin, setPreserveLogin] =\n    useBAISettingUserState('preserve_login');\n  const [shellInfo, setShellInfo] = useState<ShellScriptType>('bootstrap');\n  const [isOpenShellScriptEditModal, { toggle: toggleShellScriptEditModal }] =\n    useToggle(false);\n\n  const settingGroup: { title: string; settingItems: SettingItemProps[] }[] = [\n    {\n      title: t('usersettings.Preferences'),\n      settingItems: [\n        {\n          type: 'checkbox',\n          title: t('usersettings.DesktopNotification'),\n          description: <Trans i18nKey=\"usersettings.DescDesktopNotification\" />,\n          defaultValue: false,\n          value: desktopNotification,\n          setValue: setDesktopNotification,\n          onChange: (e) => {\n            setDesktopNotification(e.target.checked);\n          },\n        },\n        {\n          type: 'checkbox',\n          title: t('usersettings.UseCompactSidebar'),\n          description: <Trans i18nKey=\"usersettings.DescUseCompactSidebar\" />,\n          defaultValue: false,\n          value: compactSidebar,\n          setValue: setCompactSidebar,\n          onChange: (e) => {\n            setCompactSidebar(e.target.checked);\n          },\n        },\n        {\n          type: 'select',\n          title: t('usersettings.Language'),\n          description: t('usersettings.DescLanguage'),\n          selectProps: {\n            options: [\n              { label: t('language.OSDefault'), value: 'default' },\n              { label: t('language.English'), value: 'en' },\n              { label: t('language.Korean'), value: 'ko' },\n              { label: t('language.Brazilian'), value: 'pt-BR' },\n              { label: t('language.Chinese'), value: 'zh-CN' },\n              {\n                label: t('language.Chinese (Simplified)'),\n                value: 'zh-TW',\n              },\n              { label: t('language.French'), value: 'fr' },\n              { label: t('language.Finnish'), value: 'fi' },\n              { label: t('language.German'), value: 'de' },\n              { label: t('language.Greek'), value: 'el' },\n              { label: t('language.Indonesian'), value: 'id' },\n              { label: t('language.Italian'), value: 'it' },\n              { label: t('language.Japanese'), value: 'ja' },\n              { label: t('language.Mongolian'), value: 'mn' },\n              { label: t('language.Polish'), value: 'pl' },\n              { label: t('language.Portuguese'), value: 'pt' },\n              { label: t('language.Russian'), value: 'ru' },\n              { label: t('language.Spanish'), value: 'es' },\n              { label: t('language.Thai'), value: 'th' },\n              { label: t('language.Turkish'), value: 'tr' },\n              { label: t('language.Vietnamese'), value: 'vi' },\n            ],\n            showSearch: true,\n          },\n          defaultValue: 'default',\n          value: selectedLanguage || 'default',\n          setValue: setSelectedLanguage,\n          onChange: (value) => {\n            setSelectedLanguage(value);\n            const defaultLanguage = globalThis.navigator.language.split('-')[0];\n            const event = new CustomEvent('language-changed', {\n              detail: {\n                language: value === 'default' ? defaultLanguage : value,\n              },\n            });\n            setLanguage(value === 'default' ? defaultLanguage : value);\n            document.dispatchEvent(event);\n            //@ts-ignore\n            console.log(globalThis.backendaioptions.get('selected_language'));\n          },\n        },\n        ...[\n          //@ts-ignore\n          globalThis.isElectron && {\n            type: 'checkbox',\n            title: t('usersettings.KeepLoginSessionInformation'),\n            description: (\n              <Trans i18nKey=\"usersettings.DescKeepLoginSessionInformation\" />\n            ),\n            defaultValue: false,\n            //@ts-ignore\n            value: preserveLogin,\n            onChange: (e: any) => {\n              setPreserveLogin(e.target.checked);\n            },\n          },\n        ].filter(Boolean),\n        {\n          type: 'checkbox',\n          title: t('usersettings.AutomaticUpdateCheck'),\n          description: (\n            <Trans i18nKey=\"usersettings.DescAutomaticUpdateCheck\" />\n          ),\n          defaultValue: false,\n          value: autoAutomaticUpdateCheck,\n          setValue: setAutoAutomaticUpdateCheck,\n          onChange: (e) => {\n            setAutoAutomaticUpdateCheck(e.target.checked);\n          },\n        },\n        {\n          type: 'checkbox',\n          title: t('usersettings.AutoLogout'),\n          description: t('usersettings.DescAutoLogout'),\n          defaultValue: false,\n          value: autoLogout,\n          setValue: setAutoLogout,\n          onChange: (e) => {\n            setAutoLogout(e.target.checked);\n          },\n        },\n        {\n          type: 'custom',\n          title: t('usersettings.MyKeypairInfo'),\n          description: t('usersettings.DescMyKeypairInfo'),\n          children: (\n            <Button\n              icon={<SettingOutlined />}\n              onClick={() => toggleSSHKeypairInfoModal()}\n            >\n              {t('button.Config')}\n            </Button>\n          ),\n        },\n        {\n          type: 'custom',\n          title: t('usersettings.SSHKeypairManagement'),\n          description: t('usersettings.DescSSHKeypairManagement'),\n          children: (\n            <Button\n              icon={<SettingOutlined />}\n              onClick={() => toggleSSHKeypairManagementModal()}\n            >\n              {t('button.Config')}\n            </Button>\n          ),\n        },\n        {\n          type: 'checkbox',\n          title: t('usersettings.ClassicSessionLauncher'),\n          description: t('usersettings.DescClassicSessionLauncher'),\n          defaultValue: false,\n          value: isClassicSessionLauncher,\n          onChange: (e) => {\n            setIsClassicSessionLauncher(e.target.checked);\n          },\n        },\n      ],\n    },\n    {\n      title: t('usersettings.ShellEnvironments'),\n      settingItems: [\n        {\n          type: 'custom',\n          title: t('usersettings.EditBootstrapScript'),\n          children: (\n            <Button\n              icon={<SettingOutlined />}\n              onClick={() => {\n                setShellInfo('bootstrap');\n                toggleShellScriptEditModal();\n              }}\n            >\n              {t('button.Config')}\n            </Button>\n          ),\n        },\n        {\n          type: 'custom',\n          title: t('usersettings.EditUserConfigScript'),\n          children: (\n            <Button\n              icon={<SettingOutlined />}\n              onClick={() => {\n                setShellInfo('userconfig');\n                toggleShellScriptEditModal();\n              }}\n            >\n              {t('button.Config')}\n            </Button>\n          ),\n        },\n      ],\n    },\n  ];\n\n  return (\n    <>\n      <Card\n        activeTabKey={curTabKey}\n        onTabChange={(key) => setCurTabKey(key as TabKey)}\n        tabList={[\n          {\n            key: 'general',\n            label: t('usersettings.General'),\n          },\n          {\n            key: 'logs',\n            label: t('usersettings.Logs'),\n          },\n        ]}\n        bodyStyle={{\n          padding: 0,\n        }}\n      >\n        {curTabKey === 'general' && <SettingList settingGroup={settingGroup} />}\n        {curTabKey === 'logs' && <ErrorLogList />}\n      </Card>\n      <KeypairInfoModal\n        open={isOpenSSHKeypairInfoModal}\n        onRequestClose={toggleSSHKeypairInfoModal}\n      />\n      <SSHKeypairManagementModal\n        open={isOpenSSHKeypairManagementModal}\n        onRequestClose={toggleSSHKeypairManagementModal}\n      />\n      {shellInfo && (\n        <ShellScriptEditModal\n          open={isOpenShellScriptEditModal}\n          shellInfo={shellInfo}\n          onRequestClose={() => {\n            toggleShellScriptEditModal();\n          }}\n          afterClose={() => {\n            setShellInfo(undefined);\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default UserPreferencesPage;\n"],"names":["ErrorLogList","t","useTranslation","token","theme","useToken","isOpenClearLogsModal","setIsOpenClearLogsModal","useState","isOpenColumnsSetting","setIsOpenColumnsSetting","checkedShowOnlyError","setCheckedShowOnlyError","logSearch","setLogSearch","updateKey","checkUpdateKey","useUpdatableState","isPendingRefreshTransition","startRefreshTransition","useTransition","isPendingSearchTransition","startSearchTransition","isPendingReset","startResetTransition","useSuspendedBackendaiClient","columns","title","dataIndex","key","render","value","_jsx","style","minWidth","children","_","TextHighlighter","keyword","fixed","record","statusText","displayedColumnKeys","setDisplayedColumnKeys","useLocalStorageState","defaultValue","map","column","storageLogData","useMemo","raw","JSON","parse","localStorage","getItem","log","formattedTimeStamp","dayjs","timestamp","format","filteredLogData","regExp","RegExp","test","_jsxs","Flex","direction","align","justify","wrap","gap","padding","paddingContentVertical","paddingLeft","paddingContentHorizontalSM","paddingRight","Typography","Title","level","margin","Text","type","flexShrink","Input","allowClear","prefix","SearchOutlined","placeholder","onChange","e","target","width","Checkbox","checked","Button","icon","ReloadOutlined","loading","onClick","danger","DeleteOutlined","Table","pagination","showSizeChanger","marginBottom","indicator","LoadingOutlined","scroll","x","y","dataSource","isError","filter","includes","onRow","color","colorError","paddingXS","SettingOutlined","BAIModal","open","okText","okButtonProps","confirmLoading","onOk","removeItem","cancelText","onCancel","Alert","message","TableColumnsSettingModal","onRequestClose","values","selectedColumnKeys","_ref","baiModalProps","userInfo","useCurrentUserInfo","baiClient","data","keypairs","useTanQuery","queryKey","queryFn","keypair","list","email","then","res","staleTime","supportMainAccessKey","supports","user","useLazyLoadQuery","_KeypairInfoModalQuery","require","centered","destroyOnClose","footer","rowKey","id","index","showSorterTooltip","rowScope","ellipsis","copyable","main_access_key","Tag","isRefreshModalPending","refreshSSHKeypair","closeIcon","Popconfirm","description","onConfirm","Spin","spinning","strong","Paragraph","maxHeight","overflowY","scrollbarWidth","ssh_public_key","text","marginTop","ssh_private_key","onRequestRefresh","formRef","useRef","mutationToPostSSHKeypair","useTanMutation","mutationFn","postSSHKeypair","_formRef$current","current","validateFields","mutate","onSuccess","catch","Form","ref","preserve","layout","requiredMark","Item","name","label","rules","required","TextArea","rows","backgroundColor","modalProps","isPendingRefreshModal","startRefreshModalTransition","fetchKey","updateFetchKey","isOpenSSHKeypairGenerationModal","toggle","toggleSSHKeypairGenerationModal","useToggle","isOpenSSHKeypairManualFormModal","toggleSSHKeypairManualFormModal","fetchSSHKeypair","_Fragment","height","SSHKeypairGenerationModal","SSHKeypairManualFormModal","useStyles","createStyles","css","baiSettingItemCheckbox","_ref2","selectProps","styles","fontSize","undefined","Badge","dot","status","className","Select","popupMatchSelectWidth","TabStyles","settingGroup","tabDirection","searchValue","setSearchValue","changedOptionFilter","setChangedOptionFilter","isOpenResetChangesModal","setIsOpenResetChangesModal","appendedAllSettingGroup","settingItems","item","paddingContentHorizontal","maxWidth","screenLG","whiteSpace","RedoOutlined","Tabs","tabPosition","tabBarStyle","items","filteredItems","changedItemValidator","toLowerCase","searchedItemFilter","length","SettingItem","forEach","option","setValue","showIcon","language","editable","showLineNumbers","lineWrapping","CodeMirrorProps","script","setScript","useControllableState","extensions","loadLanguage","CodeMirror","EditorView","readOnly","basicSetup","lineNumbers","viewUpdate","shellInfo","app","App","useApp","rcfileNames","setRcfileNames","userConfigScript","setUserConfigScript","baiRequestWithPromise","useBaiSignedRequestWithPromise","updateBootStrapScriptMutation","method","url","body","updateUserConfigScriptMutation","path","permission","createUserConfigScriptMutation","deleteUserConfigScriptMutation","fetchScript","response","defaultScript","saveScript","closeAfter","arguments","error","result","success","onError","console","deleteScript","Dropdown","menu","modal","confirm","content","selectedScript","options","BAICodeEditor","columnOptions","element","React","props","child","initialValues","columnOption","marginSM","noStyle","shouldUpdate","prev","cur","searchInput","getFieldValue","searchKeyword","filteredColumns","display","Group","flexDirection","node","v0","v1","v2","v3","hash","tabParam","withDefault","StringParam","UserPreferencesPage","curTabKey","setCurTabKey","useQueryParam","desktopNotification","setDesktopNotification","useBAISettingUserState","isClassicSessionLauncher","setIsClassicSessionLauncher","compactSidebar","setCompactSidebar","selectedLanguage","setSelectedLanguage","setLanguage","useBAISettingGeneralState","autoAutomaticUpdateCheck","setAutoAutomaticUpdateCheck","autoLogout","setAutoLogout","isOpenSSHKeypairInfoModal","toggleSSHKeypairInfoModal","isOpenSSHKeypairManagementModal","toggleSSHKeypairManagementModal","preserveLogin","setPreserveLogin","setShellInfo","isOpenShellScriptEditModal","toggleShellScriptEditModal","Trans","i18nKey","showSearch","defaultLanguage","globalThis","navigator","split","event","CustomEvent","detail","document","dispatchEvent","backendaioptions","get","isElectron","Boolean","Card","activeTabKey","onTabChange","tabList","bodyStyle","SettingList","KeypairInfoModal","SSHKeypairManagementModal","ShellScriptEditModal","afterClose"],"sourceRoot":""}