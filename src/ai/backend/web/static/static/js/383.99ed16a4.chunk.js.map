{"version":3,"file":"static/js/383.99ed16a4.chunk.js","mappings":"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","sources":["helper/graphql-transformer.ts","RelayEnvironment.ts","components/DefaultProviders.tsx","components/__generated__/ResourcePresetSelectQuery.graphql.ts","components/__generated__/VFolderPermissionTag_VFolder.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairQuery.graphql.ts","hooks/__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql.ts","BAICard.tsx","components/DatePickerISO.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","hooks/hooksUsingRelay.tsx","components/DynamicUnitInputNumber.tsx","components/DynamicUnitInputNumberWithSlider.tsx","components/InputNumberWithSlider.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/SessionNameFormItem.tsx","components/VFolderPermissionTag.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { parse, print, visit } from 'graphql';\n\n// Delete nodes in enter\n// Remove unnecessary arguments or directives in leave\nexport function manipulateGraphQLQueryWithClientDirectives(\n  query: string,\n  variables: any = {},\n  isCompatibleWith: (version: string) => boolean,\n) {\n  const ast = parse(query);\n  let newAst = visit(ast, {\n    Field: {\n      enter(node) {\n        if (\n          node?.directives?.find((directive) => {\n            const directiveName = directive.name.value;\n            const firstArgName = directive.arguments?.[0].name.value;\n            // @ts-ignore\n            const firstArgValue = directive.arguments?.[0].value?.value;\n            const arg = directive.arguments?.[0];\n\n            if (directiveName === 'since' && firstArgName === 'version') {\n              if (isCompatibleWith(firstArgValue)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'deprecatedSince' &&\n              firstArgName === 'version'\n            ) {\n              const version =\n                arg?.value.kind === 'StringValue'\n                  ? arg?.value.value\n                  : // @ts-ignore\n                    variables[arg?.value.name.value];\n\n              if (!isCompatibleWith(version)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'skipOnClient' &&\n              firstArgName === 'if'\n            ) {\n              if (arg?.value.kind === 'BooleanValue' && arg.value.value) {\n                return true;\n              }\n\n              if (\n                arg?.value.kind === 'Variable' &&\n                variables[arg.value.name.value]\n              ) {\n                return true;\n              }\n            }\n            return false;\n          })\n        ) {\n          return null;\n        }\n      },\n      leave(node) {\n        // when field has a empty selectionSet, delete it\n        if (\n          node.selectionSet &&\n          node.selectionSet.kind === 'SelectionSet' &&\n          node.selectionSet.selections?.length === 0\n        ) {\n          return null;\n        }\n      },\n    },\n    Directive: {\n      // delete all onClient directives\n      leave(directive) {\n        const directiveName = directive.name.value;\n        if (\n          ['since', 'deprecatedSince', 'skipOnClient'].includes(directiveName)\n        ) {\n          return null;\n        }\n      },\n    },\n  });\n\n  // count used variables\n  const usedVariables: {\n    [key: string]: number;\n  } = {};\n  visit(newAst, {\n    Variable(node) {\n      usedVariables[node.name.value] =\n        (usedVariables[node.name.value] || 0) + 1;\n    },\n  });\n\n  // delete unused variables\n  newAst = visit(newAst, {\n    VariableDefinition: {\n      enter(variableDefinition) {\n        if (usedVariables[variableDefinition.variable.name.value] <= 1) {\n          return null;\n        }\n      },\n    },\n  });\n\n  return print(newAst);\n}\n","// import { createClient } from \"graphql-ws\";\nimport { manipulateGraphQLQueryWithClientDirectives } from './helper/graphql-transformer';\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n  FetchFunction,\n  SubscribeFunction,\n  RelayFeatureFlags,\n} from 'relay-runtime';\n\nRelayFeatureFlags.ENABLE_RELAY_RESOLVERS = true;\n\nconst fetchFn: FetchFunction = async (\n  request,\n  variables,\n  // cacheConfig,\n  // uploadables\n) => {\n  //@ts-ignore\n  if (globalThis.backendaiclient === undefined) {\n    // If globalThis.backendaiclient is not defined, wait for the backend-ai-connected event.\n    await new Promise((resolve) => {\n      const onBackendAIConnected = () => {\n        // When the backend-ai-connected event occurs, remove the event listener and execute the function.\n        document.removeEventListener(\n          'backend-ai-connected',\n          onBackendAIConnected,\n        );\n        resolve(undefined);\n      };\n      document.addEventListener('backend-ai-connected', onBackendAIConnected);\n    });\n  }\n\n  const transformedQuery = manipulateGraphQLQueryWithClientDirectives(\n    request.text || '',\n    variables,\n    (version) => {\n      // @ts-ignore\n      return !globalThis.backendaiclient?.isManagerVersionCompatibleWith(\n        version,\n      );\n    },\n  );\n\n  const reqBody = {\n    query: transformedQuery,\n    variables: variables,\n  };\n\n  //@ts-ignore\n  const reqInfo = globalThis.backendaiclient?.newSignedRequest(\n    'POST',\n    '/admin/gql',\n    reqBody,\n  );\n\n  const result =\n    //@ts-ignore\n    (await globalThis.backendaiclient\n      ?._wrapWithPromise(reqInfo, false, null, 10000, 0)\n      .catch((err: any) => {\n        // console.log(err);\n      })) || {};\n\n  return result;\n};\n\nlet subscribeFn: SubscribeFunction;\n\n// if (typeof window !== \"undefined\") {\n//   // We only want to setup subscriptions if we are on the client.\n//   const subscriptionsClient = createClient({\n//     url: WEBSOCKET_ENDPOINT,\n//   });\n\n//   subscribeFn = (request, variables) => {\n//     // To understand why we return Observable.create<any>,\n//     // please see: https://github.com/enisdenjo/graphql-ws/issues/316#issuecomment-1047605774\n//     return Observable.create<any>((sink) => {\n//       if (!request.text) {\n//         return sink.error(new Error(\"Operation text cannot be empty\"));\n//       }\n\n//       return subscriptionsClient.subscribe(\n//         {\n//           operationName: request.name,\n//           query: request.text,\n//           variables,\n//         },\n//         sink\n//       );\n//     });\n//   };\n// }\n\nfunction createRelayEnvironment() {\n  return new Environment({\n    network: Network.create(fetchFn, subscribeFn),\n    store: new Store(new RecordSource()),\n  });\n}\n\nexport const RelayEnvironment = createRelayEnvironment();\n","import { RelayEnvironment } from '../RelayEnvironment';\n// @ts-ignore\nimport rawFixAntCss from '../fix_antd.css?raw';\nimport { useCustomThemeConfig } from '../helper/customThemeConfig';\nimport { ReactWebComponentProps } from '../helper/react-to-webcomponent';\nimport { StyleProvider, createCache } from '@ant-design/cssinjs';\nimport { App, ConfigProvider } from 'antd';\nimport en_US from 'antd/locale/en_US';\nimport ko_KR from 'antd/locale/ko_KR';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/ko';\nimport localeData from 'dayjs/plugin/localeData';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport weekday from 'dayjs/plugin/weekday';\nimport i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport React, {\n  Suspense,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useTranslation, initReactI18next } from 'react-i18next';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RelayEnvironmentProvider } from 'react-relay';\nimport { BrowserRouter, useNavigate } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport { ReactRouter6Adapter } from 'use-query-params/adapters/react-router-6';\n\ndayjs.extend(weekday);\ndayjs.extend(localeData);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\ninterface WebComponentContextType {\n  value?: ReactWebComponentProps['value'];\n  dispatchEvent: ReactWebComponentProps['dispatchEvent'];\n  moveTo: (\n    path: string,\n    params?: {\n      [key in string]?: boolean | string | number;\n    },\n  ) => void;\n}\n\nconst WebComponentContext = React.createContext<WebComponentContextType>(null!);\nconst ShadowRootContext = React.createContext<ShadowRoot>(null!);\nexport const useShadowRoot = () => React.useContext(ShadowRootContext);\nexport const useWebComponentInfo = () => React.useContext(WebComponentContext);\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      suspense: true,\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n\nexport interface DefaultProvidersProps extends ReactWebComponentProps {\n  children?: React.ReactNode;\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .init({\n    backend: {\n      loadPath: '/resources/i18n/{{lng}}.json',\n    },\n    //@ts-ignore\n    lng: globalThis?.backendaioptions?.get('current_language') || 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n    react: {\n      transSupportBasicHtmlNodes: true,\n      transKeepBasicHtmlNodesFor: ['br', 'strong', 'span', 'code', 'p'],\n    },\n  });\n\nconst useCurrentLanguage = () => {\n  const [lang, _setLang] = useState(\n    //@ts-ignore\n    globalThis?.backendaioptions?.get('current_language'),\n  );\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    // TODO: remove this hack to initialize i18next\n    setTimeout(() => i18n?.changeLanguage(lang), 0);\n    // For changing locale globally, use dayjs.locale instead of dayjs().locale\n    dayjs.locale(lang);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      //@ts-ignore\n      _setLang(e?.detail?.lang);\n      //@ts-ignore\n      const lang: string = e?.detail?.lang || 'en';\n      i18n?.changeLanguage(lang);\n      // For changing locale globally, use dayjs.locale instead of dayjs().locale\n      dayjs.locale(lang);\n    };\n    window.addEventListener('langChanged', handler);\n    return () => window.removeEventListener('langChanged', handler);\n  }, [i18n]);\n\n  return [lang] as const;\n};\n\nconst DefaultProviders: React.FC<DefaultProvidersProps> = ({\n  children,\n  value,\n  styles,\n  shadowRoot,\n  dispatchEvent,\n}) => {\n  const cache = useMemo(() => createCache(), []);\n  const [lang] = useCurrentLanguage();\n  const themeConfig = useCustomThemeConfig();\n\n  const componentValues = useMemo(() => {\n    return {\n      value,\n      dispatchEvent,\n      moveTo: (path, params) => {\n        dispatchEvent('moveTo', { path, params: params });\n      },\n    } as WebComponentContextType;\n  }, [value, dispatchEvent]);\n  return (\n    <>\n      {RelayEnvironment && (\n        <RelayEnvironmentProvider environment={RelayEnvironment}>\n          <React.StrictMode>\n            <style>\n              {styles}\n              {rawFixAntCss}\n            </style>\n            <QueryClientProvider client={queryClient}>\n              <ShadowRootContext.Provider value={shadowRoot}>\n                <WebComponentContext.Provider value={componentValues}>\n                  <ConfigProvider\n                    // @ts-ignore\n                    getPopupContainer={(triggerNode) => {\n                      return triggerNode?.parentNode || shadowRoot;\n                    }}\n                    //TODO: apply other supported locales\n                    locale={'ko' === lang ? ko_KR : en_US}\n                    theme={themeConfig}\n                  >\n                    <App>\n                      <StyleProvider container={shadowRoot} cache={cache}>\n                        <Suspense fallback=\"\">\n                          <BrowserRouter>\n                            <QueryParamProvider\n                              adapter={ReactRouter6Adapter}\n                              options={\n                                {\n                                  // searchStringToObject: queryString.parse,\n                                  // objectToSearchString: queryString.stringify,\n                                }\n                              }\n                            >\n                              <RoutingEventHandler />\n                              {children}\n                            </QueryParamProvider>\n                          </BrowserRouter>\n                        </Suspense>\n                      </StyleProvider>\n                    </App>\n                  </ConfigProvider>\n                </WebComponentContext.Provider>\n              </ShadowRootContext.Provider>\n            </QueryClientProvider>\n          </React.StrictMode>\n        </RelayEnvironmentProvider>\n      )}\n    </>\n  );\n};\n\nconst RoutingEventHandler = () => {\n  const navigate = useNavigate();\n  useLayoutEffect(() => {\n    const handleNavigate = (e: any) => {\n      const { detail } = e;\n      navigate(detail, {\n        // we don't want to add duplicated one to history.\n        // On lit component side, it adds to history already.\n        replace: true,\n      });\n    };\n    document.addEventListener('react-navigate', handleNavigate);\n\n    return () => {\n      document.removeEventListener('react-navigate', handleNavigate);\n    };\n  }, [navigate]);\n\n  return null;\n};\n\nexport default DefaultProviders;\n","/**\n * @generated SignedSource<<f8c3ae59478b8ffd874be16c33231c44>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = {};\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null;\n    readonly resource_slots: any | null;\n    readonly shared_memory: any | null;\n  } | null> | null;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","/**\n * @generated SignedSource<<222e47b344f8df1a33028dbc58a85a1a>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type VFolderPermissionTag_VFolder$data = {\n  readonly permission: string | null;\n  readonly \" $fragmentType\": \"VFolderPermissionTag_VFolder\";\n};\nexport type VFolderPermissionTag_VFolder$key = {\n  readonly \" $data\"?: VFolderPermissionTag_VFolder$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"VFolderPermissionTag_VFolder\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"VFolderPermissionTag_VFolder\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"permission\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"VirtualFolder\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d3b0f85629ac8c6f45ef363938f66067\";\n\nexport default node;\n","/**\n * @generated SignedSource<<2d83f26a36e2c0f0fa14a758947b24ca>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairQuery$variables = {\n  accessKey: string;\n};\nexport type hooksUsingRelay_KeyPairQuery$data = {\n  readonly keypair: {\n    readonly concurrency_used: number | null;\n    readonly id: string | null;\n    readonly resource_policy: string | null;\n  } | null;\n};\nexport type hooksUsingRelay_KeyPairQuery = {\n  response: hooksUsingRelay_KeyPairQuery$data;\n  variables: hooksUsingRelay_KeyPairQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"accessKey\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"access_key\",\n        \"variableName\": \"accessKey\"\n      }\n    ],\n    \"concreteType\": \"KeyPair\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_policy\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"concurrency_used\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"1f8fc324e9907111de581f5cd2dc3640\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairQuery(\\n  $accessKey: String!\\n) {\\n  keypair(access_key: $accessKey) {\\n    id\\n    resource_policy\\n    concurrency_used\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"d8f5c91f0fc46a3366f57566ab688d81\";\n\nexport default node;\n","/**\n * @generated SignedSource<<35444e48a9d4ab1fa713e5dd086d175e>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$variables = {\n  name: string;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery$data = {\n  readonly keypair_resource_policy: {\n    readonly max_concurrent_sessions: number | null;\n    readonly max_containers_per_session: number | null;\n  } | null;\n};\nexport type hooksUsingRelay_KeyPairResourcePolicyQuery = {\n  response: hooksUsingRelay_KeyPairResourcePolicyQuery$data;\n  variables: hooksUsingRelay_KeyPairResourcePolicyQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"KeyPairResourcePolicy\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"keypair_resource_policy\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_containers_per_session\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"max_concurrent_sessions\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"ad7039c1935637fe3f3841f0ea8bf347\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"hooksUsingRelay_KeyPairResourcePolicyQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query hooksUsingRelay_KeyPairResourcePolicyQuery(\\n  $name: String!\\n) {\\n  keypair_resource_policy(name: $name) {\\n    max_containers_per_session\\n    max_concurrent_sessions\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"f3f7364c63aefe9b03111b584c48c103\";\n\nexport default node;\n","import { CloseCircleTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <CloseCircleTwoTone twoToneColor={token.colorError} />\n          ) : status === 'warning' ? (\n            <WarningTwoTone twoToneColor={token.colorWarning} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n            ? token.colorWarning\n            : status === 'success'\n            ? token.colorSuccess\n            : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { useControllableValue } from 'ahooks';\nimport { DatePicker } from 'antd';\nimport { PickerDateProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport React from 'react';\n\ninterface DatePickerISOProps\n  extends Omit<PickerDateProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string | undefined | null;\n  onChange?: (value: string | undefined) => void;\n  localFormat?: boolean;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  localFormat,\n  ...pickerProps\n}) => {\n  const [, setControllableValue] = useControllableValue({\n    value,\n    onChange,\n  });\n\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value) => {\n        const newValue = localFormat\n          ? value?.format()\n          : value?.tz()?.toISOString();\n        // \"2023-11-10T18:09:56+08:00\"\n        setControllableValue(newValue);\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\n\nexport interface EnvVarFormListValue {\n  variable: string;\n  value: string;\n}\n// TODO: validation rule for duplicate variable name\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n  const { t } = useTranslation();\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('session.launcher.EnterEnvironmentVariable'),\n                    },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message: t(\n                        'session.launcher.EnvironmentVariableNamePatternError',\n                      ),\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue(props.name),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject(\n                            t(\n                              'session.launcher.EnvironmentVariableDuplicateName',\n                            ),\n                            // EnvironmentVariableDuplicateName\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[{ required: true, message: 'Enter value' }]}\n                >\n                  <Input placeholder=\"Value\" />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                Add variable\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { useSuspendedBackendaiClient } from '../hooks';\nimport { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nexport interface PortSelectFormValues {\n  ports: string[];\n}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  const baiClient = useSuspendedBackendaiClient();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        {\n          max: baiClient._config.maxCountForPreopenPorts,\n          type: 'array',\n          message: t('session.launcher.PreOpenPortMaxCountLimit', {\n            count: baiClient._config.maxCountForPreopenPorts,\n          }),\n        },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { hooksUsingRelay_KeyPairQuery } from './__generated__/hooksUsingRelay_KeyPairQuery.graphql';\nimport { hooksUsingRelay_KeyPairResourcePolicyQuery } from './__generated__/hooksUsingRelay_KeyPairResourcePolicyQuery.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport { useCallback } from 'react';\nimport { FetchPolicy, useLazyLoadQuery } from 'react-relay';\n\ninterface FetchOptions {\n  fetchKey?: string | number;\n  fetchPolicy?: FetchPolicy;\n}\nexport const useKeyPairLazyLoadQuery = (\n  accessKey: string,\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { keypair } = useLazyLoadQuery<hooksUsingRelay_KeyPairQuery>(\n    graphql`\n      query hooksUsingRelay_KeyPairQuery($accessKey: String!) {\n        keypair(access_key: $accessKey) {\n          id\n          resource_policy\n          concurrency_used\n        }\n      }\n    `,\n    {\n      accessKey: accessKey,\n    },\n    {\n      ...options,\n      fetchKey: fetchKey + options.fetchKey,\n    },\n  );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [keypair, { refresh }] as const;\n};\n\nexport const useCurrentKeyPairResourcePolicyLazyLoadQuery = (\n  options: FetchOptions = {\n    fetchPolicy: 'store-and-network',\n  },\n) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const [keypair] = useKeyPairLazyLoadQuery(baiClient?._config.accessKey);\n\n  const { keypair_resource_policy } =\n    useLazyLoadQuery<hooksUsingRelay_KeyPairResourcePolicyQuery>(\n      graphql`\n        query hooksUsingRelay_KeyPairResourcePolicyQuery($name: String!) {\n          keypair_resource_policy(name: $name) {\n            max_containers_per_session\n            max_concurrent_sessions\n          }\n        }\n      `,\n      {\n        name: keypair?.resource_policy || '',\n      },\n      {\n        ...options,\n        fetchKey: fetchKey + options.fetchKey,\n      },\n    );\n\n  const refresh = useCallback(() => {\n    updateFetchKey();\n  }, [updateFetchKey]);\n\n  return [\n    {\n      keypairResourcePolicy: (keypair_resource_policy || {}) as NonNullable<\n        typeof keypair_resource_policy\n      >,\n      keypair: (keypair || {}) as NonNullable<typeof keypair>,\n    },\n    { refresh },\n  ] as const;\n};\n","import { iSizeToSize, parseUnit } from '../helper';\nimport { useControllableValue, usePrevious } from 'ahooks';\nimport { InputNumber, InputNumberProps, Select, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nexport interface DynamicUnitInputNumberProps\n  extends Omit<\n    InputNumberProps,\n    'step' | 'max' | 'min' | 'value' | 'onChange'\n  > {\n  dynamicSteps?: number[];\n  disableAutoUnit?: boolean;\n  max?: string;\n  min?: string;\n  value?: string | null | undefined;\n  units?: string[];\n  onChange?: (value: string) => void;\n}\n\nconst DynamicUnitInputNumber: React.FC<DynamicUnitInputNumberProps> = ({\n  dynamicSteps = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],\n  units = ['m', 'g', 't', 'p'],\n  disableAutoUnit = false,\n  min = '0m',\n  max = '300p',\n  // value,\n  // onChange,\n  ...inputNumberProps\n}) => {\n  const [value, setValue] = useControllableValue<string | null | undefined>(\n    inputNumberProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const [numValue, _unitFromValue] =\n    value === null || value === undefined ? [null, null] : parseUnit(value);\n  const previousUnit = usePrevious(_unitFromValue);\n  const unit = _unitFromValue || previousUnit || units[0];\n\n  const [minNumValue, minUnit] = parseUnit(min);\n  const [maxNumValue, maxUnit] = parseUnit(max);\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const onInput = (e: Event) => {\n        // @ts-ignore\n        const value = e?.target?.value;\n        if (/^\\d+(g|m)$/.test(value)) {\n          // const [newNumber, newUnit] = parseUnit(value);\n          // if (newNumber === numValue && newUnit === unit) {\n          //   e.target.value = numValue;\n          // } else {\n          setValue(value);\n          // }\n        }\n      };\n      const target = ref.current;\n      target?.addEventListener('input', onInput);\n      return () => {\n        target?.removeEventListener('input', onInput);\n      };\n    }\n  }, [ref, numValue, _unitFromValue, setValue]);\n\n  return (\n    <InputNumber\n      ref={ref}\n      {...inputNumberProps}\n      value={numValue}\n      onChange={(newValue) => {\n        if (newValue === null || newValue === undefined) {\n          setValue(newValue);\n        } else {\n          setValue(`${newValue}${unit}`);\n        }\n      }}\n      //TODO: When min and max have different units, they should be calculated and put in.\n      // 입력의 초소단위 확인 0.4g 가 되는지 확인\n      // @ts-ignore\n      max={maxUnit === unit ? maxNumValue : iSizeToSize(max, unit).number}\n      min={\n        minUnit === unit\n          ? minNumValue\n          : // @ts-ignore\n            iSizeToSize(min, unit).number\n      }\n      addonAfter={\n        <Select\n          tabIndex={-1}\n          value={unit}\n          onChange={(newUnit) => {\n            setValue(`${numValue}${newUnit}`);\n          }}\n          onDropdownVisibleChange={(open) => {\n            // A null or undefined value doesn't have a unit info, so we need to set the value before setting the unit.\n            if ((open && value === null) || value === undefined) {\n              setValue(`0${unit}`);\n            }\n          }}\n          options={_.map(units, (unit) => ({\n            value: unit,\n            label: (\n              <Typography.Text\n                style={{\n                  fontFamily:\n                    \"'SFMono-Regular',Consolas,'Liberation Mono',Menlo,Courier,monospace\",\n                }}\n              >\n                {unit.toUpperCase() + 'iB'}\n              </Typography.Text>\n            ),\n          }))}\n          suffixIcon={units.length > 1 ? undefined : null}\n          open={units.length > 1 ? undefined : false}\n          style={{\n            cursor: units.length > 1 ? undefined : 'default',\n          }}\n        />\n      }\n      step={0} // this step applies when onStep doesn't setValue\n      onStep={(afterStepValue, info) => {\n        const numValueNotNull =\n          _.isNull(numValue) || _.isUndefined(numValue) ? 0 : numValue;\n        const index = _.sortedIndex(_.sortBy(dynamicSteps), numValueNotNull);\n        let nextIndex: number;\n        if (info.type === 'up') {\n          if (numValueNotNull === dynamicSteps[index]) {\n            nextIndex = index + 1;\n          } else {\n            nextIndex = index;\n          }\n        } else {\n          nextIndex = index - 1;\n        }\n\n        const currentUnitIndex = units.indexOf(unit);\n        if (!disableAutoUnit && nextIndex < 0) {\n          // WHEN MOVING TO MORE Smaller Unit: change unit and number\n          if (currentUnitIndex === 0) {\n            // if already at min unit, set to 0\n            setValue(`0${unit}`);\n          } else {\n            const nextValue = dynamicSteps[dynamicSteps.length - 1];\n            const nextUnit = units[currentUnitIndex - 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else if (!disableAutoUnit && nextIndex > dynamicSteps.length - 1) {\n          // WHEN MOVING TO MORE Bigger Unit: change unit and number\n          //  if already at max unit, step up/down by 1\n          if (currentUnitIndex === units.length - 1) {\n            setValue(\n              `${numValueNotNull + (info.type === 'up' ? 1 : -1)}${maxUnit}`,\n            );\n          } else {\n            const nextValue = dynamicSteps[0];\n            const nextUnit = units[currentUnitIndex + 1];\n            setValue(`${nextValue}${nextUnit}`);\n          }\n        } else {\n          // WHEN, DON'T NEED TO CHANGE UNIT\n          if (nextIndex >= 0 && nextIndex < dynamicSteps.length) {\n            let nextNumValue = dynamicSteps[nextIndex];\n            if (minUnit === unit && nextNumValue < minNumValue) {\n              nextNumValue = minNumValue;\n            } else if (maxUnit === unit && nextNumValue > maxNumValue) {\n              nextNumValue = maxNumValue;\n            }\n            setValue(`${nextNumValue}${unit}`);\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DynamicUnitInputNumber;\n","import { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport DynamicUnitInputNumber, {\n  DynamicUnitInputNumberProps,\n} from './DynamicUnitInputNumber';\nimport Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { Slider, theme } from 'antd';\nimport { SliderMarks } from 'antd/es/slider';\nimport _ from 'lodash';\nimport React, { useMemo } from 'react';\n\nexport interface DynamicUnitInputNumberWithSliderProps\n  extends DynamicUnitInputNumberProps {\n  extraMarks?: SliderMarks;\n  hideSlider?: boolean;\n  warn?: string;\n}\nconst DynamicUnitInputNumberWithSlider: React.FC<\n  DynamicUnitInputNumberWithSliderProps\n> = ({\n  min = '0m',\n  max = '32g',\n  warn,\n  units = ['m', 'g'],\n  extraMarks,\n  hideSlider,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue<string | undefined | null>(\n    otherProps,\n    {\n      defaultValue: '0g',\n    },\n  );\n  const { token } = theme.useToken();\n  const minGiB = useMemo(() => iSizeToSize(min, 'g', 2), [min]);\n  const maxGiB = useMemo(() => iSizeToSize(max, 'g', 2), [max]);\n  const valueGiB = useMemo(() => iSizeToSize(value || '0g', 'g', 2), [value]);\n\n  // const warnPercent = useMemo(() => {\n  //   return warn\n  //     ? ((iSizeToSize(warn, 'g', 2)?.number || 0) / (maxGiB?.number || 1)) * 100\n  //     : undefined;\n  // }, [warn, maxGiB?.number]);\n  // console.log('##marks', marks);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        direction=\"column\"\n        align=\"stretch\"\n      >\n        <DynamicUnitInputNumber\n          {...otherProps}\n          min={min}\n          max={max}\n          units={units}\n          value={value}\n          onChange={(nextValue) => {\n            setValue(nextValue);\n          }}\n          style={{\n            minWidth: 130,\n          }}\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        align=\"stretch\"\n        style={{\n          flex: 3,\n          ...(hideSlider && {\n            visibility: 'hidden',\n            height: 0,\n          }),\n        }}\n      >\n        <Flex direction=\"column\" align=\"stretch\">\n          {/* {warn && (\n            <Flex\n              direction=\"row\"\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 14.5,\n                width: '100%',\n                height: 4,\n                padding: '0 5px',\n              }}\n              align=\"start\"\n            >\n              <div\n                style={{\n                  width: warnPercent + '%',\n                  height: 4,\n                }}\n              ></div>\n              <div\n                style={{\n                  marginTop: 3,\n                  marginLeft: -3.5,\n                  width: 0,\n                  height: 0,\n\n                  borderTop: '4px solid transparent',\n                  borderLeft: '4px solid transparent',\n                  borderRight: '4px solid transparent',\n                  borderBottom: `7px solid ${token.colorWarning}`,\n                }}\n              ></div>\n            </Flex>\n          )} */}\n          <Slider\n            max={maxGiB?.number}\n            trackStyle={\n              (warn && {\n                backgroundColor:\n                  compareNumberWithUnits(warn, value || '0b') < 0\n                    ? token.colorWarning\n                    : undefined,\n              }) ||\n              undefined\n            }\n            railStyle={\n              {\n                // backgroundColor:'red',\n                // fill: 'red',\n              }\n            }\n            step={0.125}\n            // min={minGiB.number}  // DO NOT use min, because slider left should be 0\n            value={valueGiB?.number}\n            tooltip={{\n              formatter: (value = 0) => {\n                return value < 1\n                  ? `${(value * 1024).toFixed(2)} MiB`\n                  : `${value.toFixed(2)} GiB`;\n              },\n            }}\n            onChange={(newNumValue) => {\n              if (minGiB?.number && minGiB.number > newNumValue) {\n                setValue(min);\n              } else {\n                setValue(\n                  newNumValue < 1\n                    ? `${newNumValue * 1024}m`\n                    : `${newNumValue}g`,\n                );\n              }\n            }}\n            marks={{\n              // 0: {\n              //   style: {\n              //     color: token.colorTextSecondary,\n              //   },\n              //   label: 0,\n              // },\n              ...(minGiB &&\n                _.isNumber(minGiB?.number) && {\n                  [minGiB.number]: {\n                    style: {\n                      color: token.colorTextSecondary,\n                    },\n                    // if 0, without unit\n                    label:\n                      minGiB.number === 0\n                        ? minGiB.number\n                        : minGiB.number >= 1\n                        ? minGiB.number + 'g'\n                        : minGiB.number * 1024 + 'm',\n                  },\n                }),\n              // extra: remaining mark code should be located before max mark code to prevent overlapping when it is same value\n              ...extraMarks,\n              ...(maxGiB?.number && {\n                [maxGiB.number]: {\n                  style: {\n                    color: token.colorTextSecondary,\n                  },\n                  label:\n                    maxGiB.number === 0\n                      ? maxGiB.number\n                      : maxGiB.number >= 1\n                      ? maxGiB.number + 'g'\n                      : maxGiB.number * 1024 + 'm',\n                },\n              }),\n            }}\n          />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default DynamicUnitInputNumberWithSlider;\n","import Flex from './Flex';\nimport { useControllableValue } from 'ahooks';\nimport { InputNumber, Slider, InputNumberProps, SliderSingleProps } from 'antd';\nimport { SliderRangeProps } from 'antd/es/slider';\nimport React, { useEffect } from 'react';\n\ntype OmitControlledProps<T> = Omit<T, 'value' | 'onChange'>;\n\ninterface InputNumberWithSliderProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  disabled?: boolean;\n  value?: number;\n  onChange?: (value: number) => void;\n  inputNumberProps?: OmitControlledProps<InputNumberProps>;\n  sliderProps?:\n    | OmitControlledProps<SliderSingleProps>\n    | OmitControlledProps<SliderRangeProps>;\n}\nconst InputNumberWithSlider: React.FC<InputNumberWithSliderProps> = ({\n  min,\n  max,\n  step,\n  disabled,\n  inputNumberProps,\n  sliderProps,\n  ...otherProps\n}) => {\n  const [value, setValue] = useControllableValue(otherProps);\n  useEffect(() => {\n    // when step is 1, make sure the value is integer\n    if (step === 1 && value % 1 !== 0) {\n      setValue(Math.round(value));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step]);\n  return (\n    <Flex direction=\"row\" gap={'md'}>\n      <Flex\n        style={{ flex: 2, minWidth: 190 }}\n        align=\"stretch\"\n        direction=\"column\"\n      >\n        <InputNumber\n          max={max}\n          min={min}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={setValue}\n          {...inputNumberProps}\n        />\n      </Flex>\n      <Flex direction=\"column\" align=\"stretch\" style={{ flex: 3 }}>\n        <Slider\n          max={max}\n          min={0}\n          step={step}\n          disabled={disabled}\n          value={value}\n          onChange={(value: any) => {\n            if (min !== undefined && value < min) {\n              return;\n            } else {\n              setValue(value);\n            }\n          }}\n          {...sliderProps}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default InputNumberWithSlider;\n","import { useUpdatableState } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport Flex from './Flex';\nimport ResourceNumber from './ResourceNumber';\nimport { ResourcePresetSelectQuery } from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useLazyLoadQuery } from 'react-relay';\n\n// const myFunc= ()=>{\n//   const param: any = { group: globalThis.backendaiclient.current_group };\n//       if (\n//         this.current_user_group !== globalThis.backendaiclient.current_group ||\n//         this.scaling_groups.length == 0 ||\n//         (this.scaling_groups.length === 1 && this.scaling_groups[0].name === '')\n//       ) {\n//         this.current_user_group = globalThis.backendaiclient.current_group;\n//         const sgs = await globalThis.backendaiclient.scalingGroup.list(\n//           this.current_user_group,\n//         );\n//         // Make empty scaling group item if there is no scaling groups.\n//         this.scaling_groups =\n//           sgs.scaling_groups.length > 0 ? sgs.scaling_groups : [{ name: '' }];\n//       }\n//       if (this.scaling_groups.length > 0) {\n//         const scaling_groups: any = [];\n//         this.scaling_groups.map((group) => {\n//           scaling_groups.push(group.name);\n//         });\n//         if (\n//           this.scaling_group === '' ||\n//           !scaling_groups.includes(this.scaling_group)\n//         ) {\n//           this.scaling_group = this.scaling_groups[0].name;\n//         }\n//         param['scaling_group'] = this.scaling_group;\n//       }\n//       const resourcePresetInfo =\n//         await globalThis.backendaiclient.resourcePreset.check(param);\n// }\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\ninterface ResourcePresetSelectProps extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [resourceSlots] = useResourceSlots();\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n  // const resourcePresetInfo = await globalThis.backendaiclient.resourcePreset.check(param);\n  return (\n    <Select\n      loading={isPendingUpdate}\n      // options={_.map(resource_presets, (preset) => {\n      //   return {\n      //     value: preset?.name,\n      //     label: preset?.name,\n      //   };\n      // })}\n      options={[\n        {\n          value: 'custom',\n          label: (\n            <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n              <EditOutlined /> Custom\n            </Flex>\n          ),\n          // label: (\n          //   <Flex direction=\"row\" gap=\"xs\">\n          //     <Typography.Text strong>Custom</Typography.Text>\n          //     <Typography.Text type=\"secondary\">\n          //       Customize allocation amount\n          //     </Typography.Text>\n          //   </Flex>\n          // ),\n        },\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset, index) => {\n            const slotsInfo: {\n              [key in string]: string;\n            } = JSON.parse(preset?.resource_slots);\n            return {\n              value: preset?.name,\n              label: (\n                <Flex direction=\"row\" justify=\"between\" gap={'xs'}>\n                  {preset?.name}\n                  <Flex\n                    direction=\"row\"\n                    gap={'xxs'}\n                    style={{\n                      color: 'black',\n                      opacity: index === 1 ? 0.5 : 1,\n                    }}\n                  >\n                    {_.map(\n                      _.omitBy(slotsInfo, (slot, key) =>\n                        // @ts-ignore\n                        _.isEmpty(resourceSlots[key]),\n                      ),\n                      (slot, key) => {\n                        return (\n                          <ResourceNumber\n                            key={key}\n                            // @ts-ignore\n                            type={key}\n                            value={slot}\n                            hideTooltip\n                          />\n                        );\n                      },\n                    )}\n                  </Flex>\n                </Flex>\n              ),\n              preset,\n              // disabled: index === 1,\n            };\n          }),\n        },\n      ]}\n      showSearch\n      {...selectProps}\n      onDropdownVisibleChange={(open) => {\n        if (open) {\n          console.log(open);\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import {\n  addNumberWithUnits,\n  compareNumberWithUnits,\n  iSizeToSize,\n} from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { useCurrentKeyPairResourcePolicyLazyLoadQuery } from '../hooks/hooksUsingRelay';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport DynamicUnitInputNumberWithSlider from './DynamicUnitInputNumberWithSlider';\nimport Flex from './Flex';\nimport { ImageEnvironmentFormInput } from './ImageEnvironmentSelectFormItems';\nimport InputNumberWithSlider from './InputNumberWithSlider';\nimport ResourceGroupSelect from './ResourceGroupSelect';\nimport { ACCELERATOR_UNIT_MAP } from './ResourceNumber';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport {\n  Card,\n  Col,\n  Divider,\n  Form,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nconst AUTOMATIC_DEFAULT_SHMEM = '64m';\nexport const RESOURCE_ALLOCATION_INITIAL_FORM_VALUES = {\n  resource: {\n    cpu: 0,\n    mem: '0g',\n    shmem: '0g',\n    accelerator: 0,\n  },\n  num_of_sessions: 1,\n  cluster_mode: 'single-node',\n  cluster_size: 1,\n  enabledAutomaticShmem: true,\n};\n\nexport interface ResourceAllocationFormValue {\n  resource: {\n    cpu: number;\n    mem: string;\n    shmem: string;\n    accelerator: number;\n    acceleratorType: string;\n  };\n  resourceGroup: string;\n  num_of_sessions?: number;\n  cluster_mode: 'single-node' | 'multi-node';\n  cluster_size: number;\n  enabledAutomaticShmem: boolean;\n}\n\ntype MergedResourceAllocationFormValue = ResourceAllocationFormValue &\n  ImageEnvironmentFormInput;\nconst limitParser = (limit: string | undefined) => {\n  if (limit === undefined) {\n    return undefined;\n  } else if (limit === 'Infinity') {\n    return undefined;\n  } else if (limit === 'NaN') {\n    return undefined;\n  } else {\n    return _.toNumber(limit);\n  }\n};\n\ninterface ResourceAllocationFormItemsProps {\n  enableNumOfSessions?: boolean;\n}\n\nconst ResourceAllocationFormItems: React.FC<\n  ResourceAllocationFormItemsProps\n> = ({ enableNumOfSessions }) => {\n  const form = Form.useFormInstance<MergedResourceAllocationFormValue>();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n\n  const baiClient = useSuspendedBackendaiClient();\n  const [resourceSlots] = useResourceSlots();\n  const acceleratorSlots = _.omit(resourceSlots, ['cpu', 'mem', 'shmem']);\n\n  const [{ keypair, keypairResourcePolicy }] =\n    useCurrentKeyPairResourcePolicyLazyLoadQuery();\n\n  const currentProject = useCurrentProjectValue();\n\n  // Form watch\n  // const currentResourceGroup = Form.useWatch('resourceGroup', {\n  //   form,\n  //   preserve: true,\n  // });\n\n  // use `useState` instead of `Form.useWatch` for handling `resourcePreset.check` pending state\n  const [currentResourceGroup, setCurrentResourceGroup] = useState(\n    form.getFieldValue('resourceGroup'),\n  );\n  const [isPendingCheckResets, startCheckRestsTransition] = useTransition();\n  const currentImage = Form.useWatch(['environments', 'image'], {\n    form,\n    preserve: true,\n  });\n  const currentImageAcceleratorLimits = _.filter(\n    currentImage?.resource_limits,\n    (limit) =>\n      limit ? !_.includes(['cpu', 'mem', 'shmem'], limit.key) : false,\n  );\n  const currentImageMinM =\n    _.find(currentImage?.resource_limits, (i) => i?.key === 'mem')?.min || '0g';\n\n  const { data: checkPresetInfo } = useTanQuery<ResourceAllocation>({\n    queryKey: ['check-resets', currentProject.name, currentResourceGroup],\n    queryFn: () => {\n      if (currentResourceGroup) {\n        return baiClient.resourcePreset.check({\n          group: currentProject.name,\n          scaling_group: currentResourceGroup,\n        });\n      } else {\n        return;\n      }\n    },\n    staleTime: 0,\n    suspense: !_.isEmpty(currentResourceGroup), //prevent flicking\n  });\n\n  // interface ResourceLimit {\n  //   min: number | string;\n  //   max: number | string;\n  //   remaining?: number | string;\n  // }\n\n  // interface AcceleratorLimit {\n  //   min: number;\n  //   max: number;\n  //   remaining: number;\n  // }\n\n  // type ResourceSlots = {\n  //   cpu?: ResourceLimit;\n  //   mem?: ResourceLimit;\n  //   shmem?: {\n  //     min: string | undefined;\n  //   };\n  // } & {\n  //   [key in string]?: AcceleratorLimit | undefined;\n  // };\n\n  const sliderMinMaxLimit: any = {\n    ...(resourceSlots?.cpu\n      ? {\n          cpu: {\n            min: _.max([\n              _.toNumber(\n                _.find(currentImage?.resource_limits, (i) => i?.key === 'cpu')\n                  ?.min || '0',\n              ),\n            ]),\n            max: _.min([\n              baiClient._config.maxCPUCoresPerContainer,\n              limitParser(checkPresetInfo?.keypair_limits.cpu),\n              limitParser(checkPresetInfo?.group_limits.cpu),\n              // scaling group all cpu (using + remaining), string type\n              !_.isEmpty(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                  ?.cpu,\n              ) &&\n              !_.isEmpty(\n                checkPresetInfo?.scaling_groups[currentResourceGroup]?.remaining\n                  ?.cpu,\n              )\n                ? _.toNumber(\n                    checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                      .cpu,\n                  ) +\n                  _.toNumber(\n                    checkPresetInfo?.scaling_groups[currentResourceGroup]\n                      ?.remaining.cpu,\n                  )\n                : undefined,\n            ]),\n            remaining:\n              _.min([\n                checkPresetInfo?.keypair_remaining.cpu,\n                checkPresetInfo?.group_remaining.cpu,\n                checkPresetInfo?.scaling_group_remaining.cpu,\n              ]) ?? Number.MAX_SAFE_INTEGER,\n          },\n        }\n      : {}),\n    ...(resourceSlots?.mem\n      ? {\n          mem: {\n            // M to max of [ image's mem min, AUTOMATIC_DEFAULT_SHMEM]\n            // mem(M+S) should be larger than _.max([ image's mem min, AUTOMATIC_DEFAULT_SHMEM ]) + AUTOMATIC_DEFAULT_SHMEM (rule: S can not be larger than M)\n            min:\n              addNumberWithUnits(\n                (_.max([\n                  iSizeToSize(currentImageMinM, 'b')?.number,\n                  iSizeToSize(AUTOMATIC_DEFAULT_SHMEM, 'b')?.number || 0,\n                ]) || 0) + 'b',\n                AUTOMATIC_DEFAULT_SHMEM,\n              ) || '0b',\n            max:\n              _.min([\n                baiClient._config.maxMemoryPerContainer,\n                limitParser(checkPresetInfo?.keypair_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.keypair_limits.mem) + '',\n                    'g',\n                  )?.number,\n                limitParser(checkPresetInfo?.group_limits.mem) &&\n                  iSizeToSize(\n                    limitParser(checkPresetInfo?.group_limits.mem) + '',\n                    'g',\n                  )?.number,\n                // scaling group all mem (using + remaining), string type\n                !_.isEmpty(\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                    ?.mem,\n                ) &&\n                !_.isEmpty(\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]?.using\n                    ?.mem,\n                )\n                  ? iSizeToSize(\n                      _.toNumber(\n                        checkPresetInfo?.scaling_groups[currentResourceGroup]\n                          ?.using.mem,\n                      ) +\n                        _.toNumber(\n                          checkPresetInfo?.scaling_groups[currentResourceGroup]\n                            ?.remaining.mem,\n                        ) +\n                        'b',\n                      'g',\n                      2,\n                    )?.numberFixed\n                  : undefined,\n              ]) + 'g',\n            remaining:\n              _.min([\n                checkPresetInfo?.keypair_remaining.mem,\n                checkPresetInfo?.group_remaining.mem,\n                checkPresetInfo?.scaling_group_remaining.mem,\n              ]) ?? Number.MAX_SAFE_INTEGER,\n          },\n          shmem: {\n            min: _.max([\n              _.find(currentImage?.resource_limits, (i) => i?.key === 'shmem')\n                ?.min,\n              '64m',\n            ]),\n            // shmem max is mem max\n          },\n        }\n      : {}),\n    ..._.reduce(\n      acceleratorSlots,\n      (result, value, key) => {\n        const configName =\n          {\n            'cuda.device': 'maxCUDADevicesPerContainer',\n            'cuda.shares': 'maxCUDASharesPerContainer',\n            'rocm.device': 'maxROCMDevicesPerContainer',\n            'tpu.device': 'maxTPUDevicesPerContainer',\n            'ipu.device': 'maxIPUDevicesPerContainer',\n            'atom.device': 'maxATOMDevicesPerContainer',\n            'warboy.device': 'maxWarboyDevicesPerContainer',\n          }[key] || 'cuda.device'; // FIXME: temporally `cuda.device` config, when undefined\n        result[key] = {\n          min:\n            parseInt(\n              _.filter(\n                currentImageAcceleratorLimits,\n                (supportedAcceleratorInfo) => {\n                  return supportedAcceleratorInfo?.key === key;\n                },\n              )[0]?.min as string,\n            ) || 0,\n          //\n          max: _.min([\n            baiClient._config[configName] || 8,\n            // scaling group all cpu (using + remaining), string type\n            !_.isEmpty(\n              // @ts-ignore\n              checkPresetInfo?.scaling_groups[currentResourceGroup]?.using?.[\n                key\n              ],\n            ) &&\n            !_.isEmpty(\n              // @ts-ignore\n              checkPresetInfo?.scaling_groups[currentResourceGroup]\n                ?.remaining?.[key],\n            )\n              ? _.toNumber(\n                  // @ts-ignore\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]?.using[\n                    key\n                  ],\n                ) +\n                _.toNumber(\n                  // @ts-ignore\n                  checkPresetInfo?.scaling_groups[currentResourceGroup]\n                    ?.remaining[key],\n                )\n              : undefined,\n          ]),\n          remaining:\n            _.min([\n              // @ts-ignore\n              _.toNumber(checkPresetInfo?.keypair_remaining[key]),\n              // @ts-ignore\n              _.toNumber(checkPresetInfo?.group_remaining[key]),\n              // @ts-ignore\n              _.toNumber(checkPresetInfo?.scaling_group_remaining[key]),\n            ]) ?? Number.MAX_SAFE_INTEGER,\n        };\n        return result;\n      },\n      {} as {\n        [key: string]: {\n          min: number;\n          max: number;\n          remaining: number;\n        };\n      },\n    ),\n\n    session: {\n      min: 1,\n      max: _.min([\n        keypairResourcePolicy.max_concurrent_sessions,\n        3, //BackendAiResourceBroker.DEFAULT_CONCURRENT_SESSION_COUNT\n      ]),\n      remaining:\n        (keypairResourcePolicy.max_concurrent_sessions || 3) -\n        (keypair.concurrency_used || 0),\n    },\n  };\n\n  useEffect(() => {\n    // when image changed, set value of resources to min value\n\n    // const miniumShmem = '64m';\n    form.setFieldsValue({\n      resource: {\n        cpu: sliderMinMaxLimit.cpu?.min,\n        mem:\n          iSizeToSize(\n            (iSizeToSize(sliderMinMaxLimit.shmem?.min, 'm')?.number || 0) +\n              (iSizeToSize(sliderMinMaxLimit.mem?.min, 'm')?.number || 0) +\n              'm',\n            'g',\n          )?.number + 'g', //to prevent loosing precision\n        shmem: sliderMinMaxLimit.shmem?.min,\n        // shmem: sliderMinMax.shmem?.min,\n      },\n    });\n\n    if (currentImageAcceleratorLimits.length > 0) {\n      if (\n        _.find(\n          currentImageAcceleratorLimits,\n          (limit) =>\n            limit?.key === form.getFieldValue(['resource', 'acceleratorType']),\n        )\n      ) {\n        // if current selected accelerator type is supported in the selected image,\n        form.setFieldValue(\n          ['resource', 'accelerator'],\n          sliderMinMaxLimit[form.getFieldValue(['resource', 'acceleratorType'])]\n            .min,\n        );\n      } else {\n        // if current selected accelerator type is not supported in the selected image,\n        // change accelerator type to the first supported accelerator type.\n        const nextImageSelectorType: string | undefined | null = // NOTE:\n          // filter from resourceSlots since resourceSlots and supported image could be non-identical.\n          // resourceSlots returns \"all resources enable to allocate(including AI accelerator)\"\n          // imageAcceleratorLimit returns \"all resources that is supported in the selected image\"\n          _.filter(currentImageAcceleratorLimits, (acceleratorInfo: any) =>\n            _.keys(resourceSlots).includes(acceleratorInfo?.key),\n          )[0]?.key;\n\n        if (nextImageSelectorType) {\n          form.setFieldValue(\n            ['resource', 'accelerator'],\n            sliderMinMaxLimit[nextImageSelectorType].min,\n          );\n          form.setFieldValue(\n            ['resource', 'acceleratorType'],\n            nextImageSelectorType,\n          );\n        }\n      }\n    }\n\n    form.validateFields().catch(() => {});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentImage]);\n\n  const runShmemAutomationRule = (M_plus_S: string) => {\n    // if M+S > 4G, S can be 1G regard to current image's minimum mem(M)\n    if (\n      // M+S > 4G\n      compareNumberWithUnits(M_plus_S, '4g') >= 0 &&\n      // M+S > M+1G\n      compareNumberWithUnits(\n        M_plus_S,\n        addNumberWithUnits(currentImageMinM, '1g') || '0b',\n      ) >= 0 &&\n      // if 1G < AUTOMATIC_DEFAULT_SHMEM, no need to apply 1G rule\n      compareNumberWithUnits('1g', AUTOMATIC_DEFAULT_SHMEM) > 0\n    ) {\n      form.setFieldValue(['resource', 'shmem'], '1g');\n    } else {\n      form.setFieldValue(['resource', 'shmem'], AUTOMATIC_DEFAULT_SHMEM);\n    }\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"resourceGroup\"\n        label={t('session.ResourceGroup')}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <ResourceGroupSelect\n          autoSelectDefault\n          showSearch\n          loading={isPendingCheckResets}\n          onChange={(v) => {\n            startCheckRestsTransition(() => {\n              setCurrentResourceGroup(v);\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item\n        label={t('resourcePreset.ResourcePresets')}\n        name=\"allocationPreset\"\n        required\n        style={{ marginBottom: token.marginXS }}\n      >\n        <ResourcePresetSelect\n          onChange={(value, options) => {\n            const slots = _.pick(\n              JSON.parse(options?.preset?.resource_slots || '{}'),\n              _.keys(resourceSlots),\n            );\n            form.setFieldsValue({\n              resource: {\n                ...slots,\n                // transform to GB based on preset values\n                mem: iSizeToSize((slots?.mem || 0) + 'b', 'g', 2)?.numberUnit,\n                shmem: iSizeToSize(\n                  (options?.preset?.shared_memory || 0) + 'b',\n                  'g',\n                  2,\n                )?.numberUnit,\n              },\n            });\n          }}\n        />\n      </Form.Item>\n      <Card\n        style={{\n          marginBottom: token.margin,\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <Form.Item\n                    name={['resource', 'cpu']}\n                    // initialValue={0}\n                    label={t('session.launcher.CPU')}\n                    tooltip={{\n                      placement: 'right',\n                      title: <Trans i18nKey={'session.launcher.DescCPU'} />,\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                      {\n                        type: 'number',\n                        min: sliderMinMaxLimit.cpu?.min,\n                        // TODO: set message\n                      },\n                      {\n                        warningOnly:\n                          baiClient._config?.always_enqueue_compute_session,\n                        validator: async (rule, value: string) => {\n                          if (\n                            sliderMinMaxLimit.cpu &&\n                            value > sliderMinMaxLimit.cpu.remaining\n                          ) {\n                            return Promise.reject(\n                              baiClient._config?.always_enqueue_compute_session\n                                ? t(\n                                    'session.launcher.EnqueueComputeSessionWarning',\n                                  )\n                                : t(\n                                    'session.launcher.ErrorCanNotExceedRemaining',\n                                    {\n                                      amount: sliderMinMaxLimit.cpu.remaining,\n                                    },\n                                  ),\n                            );\n                          } else {\n                            return Promise.resolve();\n                          }\n                        },\n                      },\n                    ]}\n                  >\n                    <InputNumberWithSlider\n                      inputNumberProps={{\n                        addonAfter: t('session.launcher.Core'),\n                      }}\n                      sliderProps={{\n                        marks: {\n                          // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                          ...(sliderMinMaxLimit.cpu?.remaining\n                            ? {\n                                [sliderMinMaxLimit.cpu?.remaining]: {\n                                  label: <RemainingMark />,\n                                },\n                              }\n                            : {}),\n                          [sliderMinMaxLimit.cpu?.min]:\n                            sliderMinMaxLimit.cpu?.min,\n                          ...(sliderMinMaxLimit.cpu?.max\n                            ? {\n                                [sliderMinMaxLimit.cpu?.max]: {\n                                  style: {\n                                    color: token.colorTextSecondary,\n                                  },\n                                  label: sliderMinMaxLimit.cpu?.max,\n                                },\n                              }\n                            : {}),\n                        },\n                      }}\n                      min={sliderMinMaxLimit.cpu?.min}\n                      max={sliderMinMaxLimit.cpu?.max}\n                    />\n                  </Form.Item>\n                )}\n                {resourceSlots?.mem && (\n                  <Form.Item\n                    label={t('session.launcher.Memory')}\n                    tooltip={{\n                      placement: 'right',\n                      props: {\n                        onClick: (e: any) => e.preventDefault(),\n                      },\n                      title: (\n                        <Flex\n                          direction=\"column\"\n                          onClick={(e) => e.preventDefault()}\n                        >\n                          <Trans i18nKey={'session.launcher.DescMemory'} />\n                          {/* <Divider\n                            style={{\n                              margin: 0,\n                              backgroundColor: token.colorBorderSecondary,\n                            }}\n                          />\n                         \n                          <Trans\n                            i18nKey={'session.launcher.DescSharedMemory'}\n                          /> */}\n                        </Flex>\n                      ),\n                    }}\n                    required\n                  >\n                    <Form.Item\n                      noStyle\n                      shouldUpdate={(prev, next) =>\n                        prev.resource.shmem !== next.resource.shmem\n                      }\n                    >\n                      {() => {\n                        return (\n                          <Form.Item\n                            name={['resource', 'mem']}\n                            noStyle\n                            rules={[\n                              {\n                                required: true,\n                              },\n                              {\n                                // TODO: min of mem should be shmem + image's mem limit??\n                                validator: async (rule, value: string) => {\n                                  // const memMinPlusShmem =\n                                  //   addNumberWithUnits(\n                                  //     sliderMinMaxLimit.mem?.min,\n                                  //     form.getFieldValue(['resource', 'shmem']),\n                                  //   ) || '0b';\n\n                                  if (\n                                    !_.isElement(value) &&\n                                    sliderMinMaxLimit.mem?.min &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      sliderMinMaxLimit.mem?.min || '0g',\n                                    ) < 0\n                                  ) {\n                                    return Promise.reject(\n                                      t('session.launcher.MinMemory', {\n                                        size: _.toUpper(\n                                          sliderMinMaxLimit.mem?.min || '0g',\n                                        ),\n                                      }),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                              {\n                                warningOnly:\n                                  baiClient._config\n                                    ?.always_enqueue_compute_session,\n                                validator: async (rule, value: string) => {\n                                  if (\n                                    !_.isElement(value) &&\n                                    sliderMinMaxLimit.mem &&\n                                    compareNumberWithUnits(\n                                      value,\n                                      sliderMinMaxLimit.mem.remaining + 'b',\n                                    ) > 0\n                                  ) {\n                                    return Promise.reject(\n                                      baiClient._config\n                                        ?.always_enqueue_compute_session\n                                        ? t(\n                                            'session.launcher.EnqueueComputeSessionWarning',\n                                          )\n                                        : t(\n                                            'session.launcher.ErrorCanNotExceedRemaining',\n                                            {\n                                              amount:\n                                                iSizeToSize(\n                                                  sliderMinMaxLimit.mem\n                                                    .remaining + 'b',\n                                                  'g',\n                                                  3,\n                                                )?.numberUnit + 'iB',\n                                            },\n                                          ),\n                                    );\n                                  } else {\n                                    return Promise.resolve();\n                                  }\n                                },\n                              },\n                            ]}\n                          >\n                            <DynamicUnitInputNumberWithSlider\n                              max={sliderMinMaxLimit.mem?.max}\n                              // min=\"256m\"\n                              // min={'0g'}\n                              // min={addNumberWithUnits(\n                              //   sliderMinMaxLimit.mem?.min,\n                              //   form.getFieldValue(['resource', 'shmem']) || '0g',\n                              // )}\n                              min={sliderMinMaxLimit.mem?.min}\n                              // warn={\n                              //   checkPresetInfo?.scaling_group_remaining.mem ===\n                              //   undefined\n                              //     ? undefined\n                              //     : checkPresetInfo?.scaling_group_remaining.mem + 'g'\n                              // }\n                              addonBefore={'MEM'}\n                              extraMarks={{\n                                // ...(checkPresetInfo?.scaling_group_remaining.mem\n                                //   ? {\n                                //       // @ts-ignore\n                                //       [iSizeToSize(\n                                //         checkPresetInfo?.scaling_group_remaining\n                                //           .mem,\n                                //         'g',\n                                //         3,\n                                //       ).numberFixed]: {\n                                //         label: '-',\n                                //       },\n                                //     }\n                                //   : {}),\n                                // ...(form.getFieldValue(['resource', 'shmem'])\n                                //   ? {\n                                //       [iSizeToSize(\n                                //         form.getFieldValue([\n                                //           'resource',\n                                //           'shmem',\n                                //         ]),\n                                //         'g',\n                                //       )?.number || 0]: (\n                                //         <Flex\n                                //           style={{\n                                //             height: 8,\n                                //             width: 8,\n                                //             borderRadius: 4,\n                                //             backgroundColor: token.colorInfo,\n                                //             position: 'absolute',\n                                //             top: -10,\n                                //             transform: 'translateX(-50%)',\n                                //             opacity: 0.5,\n                                //             pointerEvents: 'none',\n                                //           }}\n                                //         ></Flex>\n                                //       ),\n                                //     }\n                                //   : undefined),\n                                ...(sliderMinMaxLimit.mem?.remaining\n                                  ? {\n                                      //@ts-ignore\n                                      [iSizeToSize(\n                                        sliderMinMaxLimit.mem?.remaining + 'b',\n                                        'g',\n                                        3,\n                                      )?.numberFixed]: {\n                                        label: <RemainingMark />,\n                                      },\n                                    }\n                                  : {}),\n                              }}\n                              onChange={(M_plus_S) => {\n                                if (\n                                  !M_plus_S ||\n                                  !form.getFieldValue('enabledAutomaticShmem')\n                                )\n                                  return;\n                                runShmemAutomationRule(M_plus_S);\n                              }}\n                            />\n                          </Form.Item>\n                        );\n                      }}\n                    </Form.Item>\n\n                    <Flex direction=\"column\" gap={'xxs'} align=\"start\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        {t('session.launcher.EnableAutomaticShmem')}{' '}\n                        <Form.Item\n                          noStyle\n                          name={'enabledAutomaticShmem'}\n                          valuePropName=\"checked\"\n                        >\n                          <Switch\n                            size=\"small\"\n                            onChange={(checked) => {\n                              if (checked)\n                                runShmemAutomationRule(\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                    '0g',\n                                );\n                            }}\n                          />\n                        </Form.Item>\n                      </Flex>\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prev, next) =>\n                          prev.resource.mem !== next.resource.mem ||\n                          prev.enabledAutomaticShmem !==\n                            next.enabledAutomaticShmem\n                        }\n                      >\n                        {() => {\n                          return (\n                            <Form.Item\n                              noStyle\n                              name={['resource', 'shmem']}\n                              // initialValue={'0g'}\n                              // label={t('session.launcher.SharedMemory')}\n                              hidden={form.getFieldValue(\n                                'enabledAutomaticShmem',\n                              )}\n                              tooltip={\n                                <Trans\n                                  i18nKey={'session.launcher.DescSharedMemory'}\n                                />\n                              }\n                              dependencies={[['resource', 'mem']]}\n                              rules={[\n                                {\n                                  required: true,\n                                },\n                                {},\n                                {\n                                  validator: async (rule, value: string) => {\n                                    if (\n                                      _.isEmpty(\n                                        getFieldValue('resource')?.mem,\n                                      ) ||\n                                      _.isEmpty(value) ||\n                                      compareNumberWithUnits(\n                                        getFieldValue('resource')?.mem,\n                                        value,\n                                      ) >= 0\n                                    ) {\n                                      return Promise.resolve();\n                                    } else {\n                                      throw t(\n                                        'resourcePreset.SHMEMShouldBeSmallerThanMemory',\n                                      );\n                                    }\n                                  },\n                                },\n                              ]}\n                            >\n                              <DynamicUnitInputNumberWithSlider\n                                // shmem max is mem max\n                                // min={sliderMinMaxLimit.shmem?.min}\n                                min={sliderMinMaxLimit.shmem?.min}\n                                // max={sliderMinMaxLimit.mem?.max || '0g'}\n                                addonBefore={'SHM'}\n                                max={\n                                  form.getFieldValue(['resource', 'mem']) ||\n                                  '0g'\n                                }\n                                hideSlider\n                              />\n                            </Form.Item>\n                          );\n                        }}\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                )}\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) => {\n                    return (\n                      prev.resource?.acceleratorType !==\n                        next.resource?.acceleratorType ||\n                      // ref: https://github.com/lablup/backend.ai-webui/issues/868\n                      // change gpu step to 1 when cluster_size > 1\n                      prev.cluster_size !== next.cluster_size\n                    );\n                  }}\n                >\n                  {({ getFieldValue }) => {\n                    const currentAcceleratorType = getFieldValue([\n                      'resource',\n                      'acceleratorType',\n                    ]);\n                    return (\n                      <Form.Item\n                        name={['resource', 'accelerator']}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        tooltip={{\n                          placement: 'right',\n                          title: (\n                            <Trans\n                              i18nKey={'session.launcher.DescAIAccelerator'}\n                            />\n                          ),\n                        }}\n                        required\n                        rules={[\n                          {\n                            required: true,\n                          },\n                          {\n                            type: 'number',\n                            min:\n                              sliderMinMaxLimit[currentAcceleratorType]?.min ||\n                              0,\n                          },\n                          {\n                            warningOnly:\n                              baiClient._config?.always_enqueue_compute_session,\n                            validator: async (rule: any, value: number) => {\n                              if (\n                                sliderMinMaxLimit[currentAcceleratorType] &&\n                                value >\n                                  sliderMinMaxLimit[currentAcceleratorType]\n                                    .remaining\n                              ) {\n                                return Promise.reject(\n                                  baiClient._config\n                                    ?.always_enqueue_compute_session\n                                    ? t(\n                                        'session.launcher.EnqueueComputeSessionWarning',\n                                      )\n                                    : t(\n                                        'session.launcher.ErrorCanNotExceedRemaining',\n                                        {\n                                          amount:\n                                            sliderMinMaxLimit[\n                                              currentAcceleratorType\n                                            ].remaining,\n                                        },\n                                      ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          sliderProps={{\n                            marks: {\n                              0: 0,\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(sliderMinMaxLimit[currentAcceleratorType]\n                                ?.remaining\n                                ? {\n                                    [sliderMinMaxLimit[currentAcceleratorType]\n                                      .remaining]: {\n                                      label: <RemainingMark />,\n                                    },\n                                  }\n                                : {}),\n                              [sliderMinMaxLimit[currentAcceleratorType]?.max]:\n                                sliderMinMaxLimit[currentAcceleratorType]?.max,\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${ACCELERATOR_UNIT_MAP[currentAcceleratorType]}`;\n                              },\n                            },\n                          }}\n                          min={0}\n                          max={sliderMinMaxLimit[currentAcceleratorType]?.max}\n                          step={\n                            _.endsWith(currentAcceleratorType, 'shares') &&\n                            form.getFieldValue('cluster_size') < 2\n                              ? 0.1\n                              : 1\n                          }\n                          inputNumberProps={{\n                            addonAfter: (\n                              <Form.Item\n                                noStyle\n                                name={['resource', 'acceleratorType']}\n                                initialValue={_.keys(acceleratorSlots)[0]}\n                              >\n                                <Select\n                                  tabIndex={-1}\n                                  suffixIcon={\n                                    _.size(acceleratorSlots) > 1\n                                      ? undefined\n                                      : null\n                                  }\n                                  // open={\n                                  //   _.size(acceleratorSlots) > 1\n                                  //     ? undefined\n                                  //     : false\n                                  // }\n                                  popupMatchSelectWidth={false}\n                                  options={_.map(\n                                    acceleratorSlots,\n                                    (value, name) => {\n                                      return {\n                                        value: name,\n                                        label:\n                                          ACCELERATOR_UNIT_MAP[name] || 'UNIT',\n                                        disabled:\n                                          currentImageAcceleratorLimits.length >\n                                            0 &&\n                                          !_.find(\n                                            currentImageAcceleratorLimits,\n                                            (limit) => limit?.key === name,\n                                          ),\n                                      };\n                                    },\n                                  )}\n                                />\n                              </Form.Item>\n                            ),\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n      {enableNumOfSessions ? (\n        <Card\n          style={{\n            marginBottom: token.margin,\n          }}\n        >\n          <Form.Item\n            noStyle\n            shouldUpdate={(prev, next) =>\n              prev.cluster_size !== next.cluster_size\n            }\n          >\n            {() => {\n              return (\n                <Form.Item\n                  name={['num_of_sessions']}\n                  label={t('webui.menu.Sessions')}\n                  tooltip={<Trans i18nKey={'session.launcher.DescSession'} />}\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      warningOnly:\n                        baiClient._config?.always_enqueue_compute_session,\n                      validator: async (rule, value: number) => {\n                        if (\n                          sliderMinMaxLimit.session &&\n                          value > sliderMinMaxLimit.session.remaining\n                        ) {\n                          return Promise.reject(\n                            baiClient._config?.always_enqueue_compute_session\n                              ? t(\n                                  'session.launcher.EnqueueComputeSessionWarning',\n                                )\n                              : t(\n                                  'session.launcher.ErrorCanNotExceedRemaining',\n                                  {\n                                    amount: sliderMinMaxLimit.session.remaining,\n                                  },\n                                ),\n                          );\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumberWithSlider\n                    inputNumberProps={{\n                      addonAfter: '#',\n                    }}\n                    disabled={form.getFieldValue('cluster_size') > 1}\n                    sliderProps={{\n                      marks: {\n                        [sliderMinMaxLimit.session?.min]:\n                          sliderMinMaxLimit.session?.min,\n                        // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                        ...(sliderMinMaxLimit.session?.remaining\n                          ? {\n                              [sliderMinMaxLimit.session?.remaining]: {\n                                label: <RemainingMark />,\n                              },\n                            }\n                          : {}),\n                        [sliderMinMaxLimit.session?.max]:\n                          sliderMinMaxLimit.session?.max,\n                      },\n                    }}\n                    min={sliderMinMaxLimit.session?.min}\n                    max={sliderMinMaxLimit.session?.max}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Form.Item>\n        </Card>\n      ) : null}\n      {/* TODO: Support cluster mode */}\n      {baiClient.supports('multi-container') && (\n        // {false && (\n        <Form.Item\n          label={t('session.launcher.ClusterMode')}\n          tooltip={\n            <Flex direction=\"column\" align=\"start\">\n              {t('session.launcher.SingleNode')}\n              <Trans i18nKey={'session.launcher.DescSingleNode'} />\n              <Divider style={{ backgroundColor: token.colorBorder }} />\n              {t('session.launcher.MultiNode')}\n              <Trans i18nKey={'session.launcher.DescMultiNode'} />\n            </Flex>\n          }\n          required\n        >\n          <Card\n            style={{\n              marginBottom: token.margin,\n            }}\n          >\n            <Row gutter={token.marginMD}>\n              <Col xs={24}>\n                {/* <Col xs={24} lg={12}> */}\n                <Form.Item name={'cluster_mode'} required>\n                  <Radio.Group\n                    onChange={(e) => {\n                      form.validateFields().catch(() => {});\n                    }}\n                  >\n                    <Radio.Button value=\"single-node\">\n                      {t('session.launcher.SingleNode')}\n                    </Radio.Button>\n                    <Radio.Button value=\"multi-node\">\n                      {t('session.launcher.MultiNode')}\n                    </Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n              <Col xs={24}>\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prev, next) =>\n                    prev.cluster_mode !== next.cluster_mode\n                  }\n                >\n                  {() => {\n                    const derivedClusterSizeMaxLimit = _.min([\n                      sliderMinMaxLimit.cpu?.max,\n                      keypairResourcePolicy.max_containers_per_session,\n                    ]);\n                    const clusterUnit =\n                      form.getFieldValue('cluster_mode') === 'single-node'\n                        ? t('session.launcher.Container')\n                        : t('session.launcher.Node');\n                    return (\n                      <Form.Item\n                        name={'cluster_size'}\n                        label={t('session.launcher.ClusterSize')}\n                        required\n                        rules={[\n                          {\n                            warningOnly:\n                              baiClient._config?.always_enqueue_compute_session,\n                            validator: async (rule, value: number) => {\n                              if (\n                                value >\n                                _.min([\n                                  sliderMinMaxLimit.cpu?.remaining,\n                                  keypairResourcePolicy.max_containers_per_session,\n                                ])\n                              ) {\n                                return Promise.reject(\n                                  t(\n                                    'session.launcher.EnqueueComputeSessionWarning',\n                                  ),\n                                );\n                              } else {\n                                return Promise.resolve();\n                              }\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumberWithSlider\n                          min={1}\n                          // TODO: max cluster size\n                          max={derivedClusterSizeMaxLimit}\n                          disabled={derivedClusterSizeMaxLimit === 1}\n                          sliderProps={{\n                            marks: {\n                              1: '1',\n                              // remaining mark code should be located before max mark code to prevent overlapping when it is same value\n                              ...(derivedClusterSizeMaxLimit.cpu?.remaining\n                                ? {\n                                    [derivedClusterSizeMaxLimit.cpu?.remaining]:\n                                      {\n                                        label: <RemainingMark />,\n                                      },\n                                  }\n                                : {}),\n                              [derivedClusterSizeMaxLimit]:\n                                derivedClusterSizeMaxLimit,\n                            },\n                            tooltip: {\n                              formatter: (value = 0) => {\n                                return `${value} ${clusterUnit}`;\n                              },\n                            },\n                          }}\n                          inputNumberProps={{\n                            addonAfter: clusterUnit,\n                          }}\n                          onChange={(value) => {\n                            if (value > 1) {\n                              form.setFieldValue('num_of_sessions', 1);\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    );\n                  }}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nconst RemainingMark: React.FC<{ title?: string }> = () => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      style={{\n        position: 'absolute',\n        top: -24,\n        transform: 'translateX(-50%)',\n        color: token.colorSuccess,\n        opacity: 0.5,\n      }}\n    >\n      <CaretDownOutlined />\n    </Flex>\n  );\n};\ntype ResourceLimits = {\n  cpu: string | 'Infinity' | 'NaN';\n  mem: string | 'Infinity' | 'NaN';\n  'cuda.device': string | 'Infinity' | 'NaN';\n};\ntype ResourceUsing = ResourceLimits;\ntype ResourceRemaining = ResourceLimits;\n\ntype ResourceSlots = {\n  cpu: string;\n  mem: string;\n  'cuda.device': string;\n  [key: string]: string;\n};\n\ntype Preset = {\n  name: string;\n  resource_slots: ResourceSlots;\n  shared_memory: string | null;\n  allocatable: boolean;\n};\n\ntype ScalingGroup = {\n  using: ResourceUsing;\n  remaining: ResourceRemaining;\n};\n\ntype ResourceAllocation = {\n  keypair_limits: ResourceLimits;\n  keypair_using: ResourceUsing;\n  keypair_remaining: ResourceRemaining;\n  scaling_group_remaining: ResourceRemaining;\n  scaling_groups: {\n    [key: string]: ScalingGroup;\n  };\n  presets: Preset[];\n  group_limits: ResourceLimits;\n  group_using: ResourceUsing;\n  group_remaining: ResourceRemaining;\n};\n\nconst MemoizedResourceAllocationFormItems = React.memo(\n  ResourceAllocationFormItems,\n);\n\nexport default MemoizedResourceAllocationFormItems;\n","import { Form, FormItemProps, Input } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SessionNameFormItemProps extends FormItemProps {}\n\nexport interface SessionNameFormItemValue {\n  name: string;\n}\nconst SessionNameFormItem: React.FC<SessionNameFormItemProps> = ({\n  ...formItemProps\n}) => {\n  /* TODO: check SessionNameAlreadyExist */\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.SessionName')}\n      name=\"name\"\n      rules={[\n        {\n          max: 64,\n          message: t('session.Validation.SessionNameTooLong64'),\n        },\n        {\n          pattern: /^(?:[a-zA-Z0-9][-a-zA-Z0-9._]{2,}[a-zA-Z0-9])?$/,\n          message: t(\n            'session.Validation.PleaseFollowSessionNameRule',\n          ).toString(),\n        },\n      ]}\n      {...formItemProps}\n    >\n      <Input allowClear />\n    </Form.Item>\n  );\n};\n\nexport default SessionNameFormItem;\n","import DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport { VFolderPermissionTag_VFolder$key } from './__generated__/VFolderPermissionTag_VFolder.graphql';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useFragment } from 'react-relay';\n\nconst hasPermission = (permission: string | undefined, perm: string) => {\n  if (permission?.includes(perm)) {\n    return true;\n  }\n  if (permission?.includes('w') && perm === 'r') {\n    return true;\n  }\n  return false;\n};\n\ntype VFolderPermissionTagProps =\n  | {\n      vFolderFrgmt?: never;\n      permission: string;\n    }\n  | {\n      vFolderFrgmt: VFolderPermissionTag_VFolder$key;\n      permission?: never;\n    };\n\nconst VFolderPermissionTag: React.FC<VFolderPermissionTagProps> = ({\n  vFolderFrgmt = null,\n  permission,\n}) => {\n  const vFolder = useFragment(\n    graphql`\n      fragment VFolderPermissionTag_VFolder on VirtualFolder {\n        permission\n      }\n    `,\n    vFolderFrgmt,\n  );\n  const tagValues: DoubleTagObjectValue[] = _.chain({\n    r: 'green',\n    w: 'blue',\n    d: 'red',\n  })\n    .map((color, perm) => {\n      if (hasPermission(vFolder?.permission || permission, perm)) {\n        return {\n          label: perm.toUpperCase(),\n          color,\n        };\n      }\n      return undefined;\n    })\n    .compact()\n    .value();\n\n  return <DoubleTag values={tagValues} />;\n};\n\nexport default VFolderPermissionTag;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useShadowRoot } from './DefaultProviders';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport VFolderPermissionTag from './VFolderPermissionTag';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\ninterface Props extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n}\n\nconst VFolderTable: React.FC<Props> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.filter(allFolderList, (vf) => {\n    // keep selected folders\n    if (selectedRowKeys.includes(getRowKey(vf))) {\n      return true;\n    }\n    // filter by search key\n    return (\n      (!filter || filter(vf)) && (!searchKey || vf.name.includes(searchKey))\n    );\n  });\n  // const { token } = theme.useToken();\n  // const searchInput = useRef<InputRef>(null);\n\n  // TODO: set defaults\n  // useUpdateEffect(() => {\n  //   setSelectedRowKeys(defaultSelectedKeys || []);\n  // }, [defaultSelectedKeys]);\n\n  const handleAliasUpdate = (e?: any) => {\n    e?.preventDefault();\n    internalForm\n      .validateFields()\n      .then((values) => {})\n      .catch(() => {})\n      .finally(() => {\n        setAliasMap(\n          _.mapValues(\n            _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n            (v, k) => mapAliasToPath(k, v), // add alias base path\n          ),\n        );\n      });\n  };\n\n  const mapAliasToPath = (name: VFolderKey, input?: string) => {\n    if (_.isEmpty(input)) {\n      return `${aliasBasePath}${name}`;\n    } else if (input?.startsWith('/')) {\n      return input;\n    } else {\n      return `${aliasBasePath}${input}`;\n    }\n  };\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  style={{\n                    zIndex: 10000,\n                  }}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : undefined\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: /^[a-zA-Z0-9_/-]*$/,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        // onPressEnter={handleAliasUpdate}\n                        // onBlur={handleAliasUpdate}\n                        onChange={handleAliasUpdate}\n                        allowClear\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      fixed: 'left',\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        return <VFolderPermissionTag permission={row.permission} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, { AliasMap } from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {}\n\nexport interface VFolderTableFormValues {\n  mounts: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport DatePickerISO from '../components/DatePickerISO';\nimport { useWebComponentInfo } from '../components/DefaultProviders';\nimport EnvVarFormList, {\n  EnvVarFormListValue,\n} from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems, {\n  ImageEnvironmentFormInput,\n} from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport PortSelectFormItem, {\n  PortSelectFormValues,\n  PortTag,\n} from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems, {\n  RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n  ResourceAllocationFormValue,\n} from '../components/ResourceAllocationFormItems';\nimport ResourceNumber from '../components/ResourceNumber';\nimport SessionNameFormItem, {\n  SessionNameFormItemValue,\n} from '../components/SessionNameFormItem';\nimport VFolderTableFromItem, {\n  VFolderTableFormValues,\n} from '../components/VFolderTableFormItem';\nimport { compareNumberWithUnits, iSizeToSize } from '../helper';\nimport { useCurrentProjectValue, useSuspendedBackendaiClient } from '../hooks';\n// @ts-ignore\nimport customCSS from './SessionLauncherPage.css?raw';\nimport {\n  BlockOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  QuestionCircleOutlined,\n  RightOutlined,\n  SaveOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Affix,\n  Alert,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Descriptions,\n  Form,\n  FormInstance,\n  Grid,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Radio,\n  Row,\n  Select,\n  StepProps,\n  Steps,\n  Switch,\n  Table,\n  Tag,\n  Typography,\n  message,\n  theme,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nconst INITIAL_FORM_VALUES: SessionLauncherValue = {\n  sessionType: 'interactive',\n  allocationPreset: 'custom',\n  hpcOptimization: {\n    autoEnabled: true,\n    OMP_NUM_THREADS: '1',\n    OPENBLAS_NUM_THREADS: '1',\n  },\n  batch: {\n    enabled: false,\n    command: undefined,\n    scheduleDate: undefined,\n  },\n  envvars: [],\n  ...RESOURCE_ALLOCATION_INITIAL_FORM_VALUES,\n};\nconst stepParam = withDefault(NumberParam, 0);\nconst formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n\ninterface SessionConfig {\n  group_name: string;\n  domain: string;\n  scaling_group: string;\n  type: string;\n  cluster_mode: string;\n  cluster_size: number;\n  maxWaitSeconds: number;\n  cpu: number;\n  mem: string;\n  shmem: string;\n  mounts: string[];\n  mount_map: {\n    [key: string]: string;\n  };\n  env: {\n    [key: string]: string;\n  };\n  preopen_ports: number[];\n  startsAt?: string;\n  startupCommand?: string;\n}\n\ninterface CreateSessionInfo {\n  kernelName: string;\n  sessionName: string;\n  architecture: string;\n  config: SessionConfig;\n}\n\ninterface SessionLauncherValue {\n  sessionType: 'interactive' | 'batch' | 'inference';\n  batch: {\n    enabled: boolean;\n    scheduleDate?: string;\n    command?: string;\n  };\n  allocationPreset: string;\n  envvars: EnvVarFormListValue[];\n  hpcOptimization: {\n    autoEnabled: boolean;\n    OMP_NUM_THREADS: string;\n    OPENBLAS_NUM_THREADS: string;\n  };\n}\n\ntype SessionLauncherFormValue = SessionLauncherValue &\n  SessionNameFormItemValue &\n  ImageEnvironmentFormInput &\n  ResourceAllocationFormValue &\n  VFolderTableFormValues &\n  PortSelectFormValues;\n\ntype SessionMode = 'normal' | 'inference' | 'import';\nconst SessionLauncherPage = () => {\n  let sessionMode: SessionMode = 'normal';\n\n  const [isStartingSession, setIsStartingSession] = useState(false);\n  const [\n    { step: currentStep, formValues: formValuesFromQueryParams, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const navigate = useNavigate();\n  const { moveTo } = useWebComponentInfo();\n  const baiClient = useSuspendedBackendaiClient();\n  const currentProject = useCurrentProjectValue();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      console.log('syncFormToURLWithDebounce', form.getFieldsValue());\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          // formValues: form.getFieldsValue(),\n          formValues: _.omit(form.getFieldsValue(), ['environments.image']),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<SessionLauncherFormValue>();\n\n  // After first render, set fields value using query params if it is NOT same as initial values\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !==\n      JSON.stringify(formValuesFromQueryParams)\n    ) {\n      form.setFieldsValue(formValuesFromQueryParams);\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // TODO: scroll to top\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', { form, preserve: true }) ||\n    form.getFieldValue('sessionType') ||\n    formValuesFromQueryParams.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  // console.log(form.getFieldError(['resource', 'shmem']));\n  // console.log(form.getFieldValue(['resource']));\n\n  const moveToPreview = () => {\n    // TODO: if handling more async validations, required fetch, use `useTransition`\n    form\n      .validateFields()\n      .catch((e) => {})\n      .finally(() => {\n        setCurrentStep(steps.length - 1);\n      });\n  };\n\n  const startSession = () => {\n    // TODO: support inference mode\n    // TODO: support import mode\n    // TODO: session number\n\n    setIsStartingSession(true);\n    form\n      .validateFields()\n      .then(async (values) => {\n        const [kernelName, architecture] =\n          values.environments.version.split('@');\n        const sessionInfo: CreateSessionInfo = {\n          // TODO: allow_manual_image_name_for_session\n          kernelName,\n          architecture,\n          sessionName: _.isEmpty(values.name)\n            ? generateSessionId()\n            : values.name,\n          config: {\n            type: values.sessionType,\n\n            ...(values.sessionType === 'batch'\n              ? {\n                  startsAt: values.batch.enabled\n                    ? values.batch.scheduleDate\n                    : undefined,\n                  startupCommand: values.batch.command,\n                }\n              : {}),\n\n            // TODO: support change owner\n            group_name: currentProject.name,\n            domain: baiClient._config.domainName,\n            scaling_group: values.resourceGroup,\n            ///////////////////////////\n\n            cluster_mode: values.cluster_mode,\n            cluster_size: values.cluster_size,\n            maxWaitSeconds: 15,\n            cpu: values.resource.cpu,\n            mem: values.resource.mem,\n            // TODO: CHECK: Convert to rule??? Automatically increase shared memory to 1GiB\n            shmem:\n              compareNumberWithUnits(values.resource.mem, '4g') > 0 &&\n              compareNumberWithUnits(values.resource.shmem, '1g') < 0\n                ? '1g'\n                : values.resource.shmem,\n            ...(values.resource.accelerator > 0\n              ? {\n                  [values.resource.acceleratorType]:\n                    values.resource.accelerator,\n                }\n              : undefined),\n            mounts: values.mounts,\n            mount_map: values.vfoldersAliasMap,\n\n            env: {\n              ..._.fromPairs(values.envvars.map((v) => [v.variable, v.value])),\n              // set hpcOptimization options: \"OMP_NUM_THREADS\", \"OPENBLAS_NUM_THREADS\"\n              ..._.omit(values.hpcOptimization, 'autoEnabled'),\n            },\n            preopen_ports: _.map(values.ports, (v) => parseInt(v)),\n          },\n        };\n\n        const sessionPromises = _.map(\n          _.range(values.num_of_sessions || 1),\n          (i) => {\n            const formattedSessionName =\n              (values.num_of_sessions || 1) > 1\n                ? `${sessionInfo.sessionName}-${generateRandomString()}-${i}`\n                : sessionInfo.sessionName;\n            return baiClient\n              .createIfNotExists(\n                sessionInfo.kernelName,\n                formattedSessionName,\n                sessionInfo.config,\n                20000,\n                sessionInfo.architecture,\n              )\n              .then((res: { created: boolean }) => {\n                // // When session is already created with the same name, the status code\n                // // is 200, but the response body has 'created' field as false. For better\n                // // user experience, we show the notification message.\n                if (!res?.created) {\n                  message.warning(t('session.launcher.SessionAlreadyExists'));\n                  // this.notification.text = _text(\n                  //   'session.launcher.SessionAlreadyExists',\n                  // );\n                  // this.notification.show();\n                }\n                return res;\n              })\n              .catch((err: any) => {\n                console.log(err);\n                throw err;\n                // console.log(err);\n                // if (err && err.message) {\n                //   if ('statusCode' in err && err.statusCode === 408) {\n                //     this.notification.text = _text(\n                //       'session.launcher.sessionStillPreparing',\n                //     );\n                //   } else {\n                //     if (err.description) {\n                //       this.notification.text = PainKiller.relieve(err.description);\n                //     } else {\n                //       this.notification.text = PainKiller.relieve(err.message);\n                //     }\n                //   }\n                //   this.notification.detail = err.message;\n                //   this.notification.show(true, err);\n                // } else if (err && err.title) {\n                //   this.notification.text = PainKiller.relieve(err.title);\n                //   this.notification.show(true, err);\n                // }\n              });\n          },\n        );\n        // console.log('##', values.mounts);\n        // console.log(sessionInfo);\n\n        await Promise.all(sessionPromises)\n          .then(([firstSession]) => {\n            // console.log('##sessionPromises', firstSession);\n            if (\n              values.num_of_sessions === 1 &&\n              values.sessionType !== 'batch'\n            ) {\n              const res = firstSession;\n              let appOptions: {\n                [key in string]: any;\n              };\n              if ('kernelId' in res) {\n                // API v4\n                appOptions = {\n                  'session-name': res.kernelId,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              } else {\n                // API >= v5\n                appOptions = {\n                  'session-uuid': res.sessionId,\n                  'session-name': res.sessionName,\n                  'access-key': '',\n                  mode: sessionMode,\n                  // mode: this.mode,\n                };\n              }\n              const service_info = res.servicePorts;\n              if (Array.isArray(service_info) === true) {\n                appOptions['app-services'] = service_info.map(\n                  (a: { name: string }) => a.name,\n                );\n              } else {\n                appOptions['app-services'] = [];\n              }\n              // TODO: support import and inference\n              // if (sessionMode === 'import') {\n              //   appOptions['runtime'] = 'jupyter';\n              //   appOptions['filename'] = this.importFilename;\n              // }\n              // if (sessionMode === 'inference') {\n              //   appOptions['runtime'] = appOptions['app-services'].find(\n              //     (element: any) => !['ttyd', 'sshd'].includes(element),\n              //   );\n              // }\n\n              // only launch app when it has valid service ports\n              if (service_info.length > 0) {\n                // @ts-ignore\n                globalThis.appLauncher.showLauncher(appOptions);\n              }\n            }\n            navigate('/job', {\n              // replace: true,\n            });\n            moveTo('/job');\n          })\n          .catch(() => {\n            // this.metadata_updating = false;\n            // console.log(err);\n            // if (err && err.message) {\n            //   this.notification.text = PainKiller.relieve(err.message);\n            //   if (err.description) {\n            //     this.notification.text = PainKiller.relieve(err.description);\n            //   } else {\n            //     this.notification.detail = err.message;\n            //   }\n            //   this.notification.show(true, err);\n            // } else if (err && err.title) {\n            //   this.notification.text = PainKiller.relieve(err.title);\n            //   this.notification.show(true, err);\n            // }\n            // const event = new CustomEvent('backend-ai-session-list-refreshed', {\n            //   detail: 'running',\n            // });\n            // document.dispatchEvent(event);\n            // this.launchButton.disabled = false;\n            // this.launchButtonMessageTextContent = _text(\n            //   'session.launcher.ConfirmAndLaunch',\n            // );\n          });\n      })\n      .catch((e) => {\n        console.log('validation errors', e);\n      })\n      .finally(() => {\n        setIsStartingSession(false);\n      });\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        padding: token.paddingSM,\n        width: '100%',\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n    >\n      <style>{customCSS}</style>\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                moveTo(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Flex direction=\"row\" gap={'sm'}>\n              <Popconfirm\n                title={t('button.Reset')}\n                description={t('session.launcher.ResetFormConfirm')}\n                onConfirm={() => {\n                  form.resetFields();\n\n                  navigate('/session/start');\n                }}\n                icon={\n                  <QuestionCircleOutlined style={{ color: token.colorError }} />\n                }\n                okText={t('button.Reset')}\n                okButtonProps={{\n                  danger: true,\n                }}\n              >\n                <Button\n                  danger\n                  type=\"link\"\n                  style={{ paddingRight: 0, paddingLeft: 0 }}\n                >\n                  {t('button.Reset')}\n                </Button>\n              </Popconfirm>\n              <Button\n                type=\"link\"\n                icon={<BlockOutlined />}\n                disabled\n                style={{ paddingRight: 0, paddingLeft: 0 }}\n              >\n                {t('session.launcher.TemplateAndHistory')}\n              </Button>\n            </Flex>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // console.log('###', name, info);\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              requiredMark=\"optional\"\n              initialValues={INITIAL_FORM_VALUES}\n            >\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    <Radio.Group\n                      className=\"session-type-radio-group\"\n                      options={[\n                        {\n                          label: (\n                            <Flex\n                              direction=\"column\"\n                              align=\"start\"\n                              style={{ marginBottom: token.marginXS }}\n                            >\n                              <Typography.Text strong>\n                                🏃‍♀️ Make, test and run\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Interactive mode\n                                </Typography.Text>{' '}\n                                allows you to create, test and run code\n                                interactively via jupyter notebook, visual\n                                studio code, etc.\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <Flex direction=\"column\" align=\"start\">\n                              <Typography.Text strong>\n                                ⌚️ Start an long-running task\n                              </Typography.Text>\n                              <Typography.Text type=\"secondary\">\n                                <Typography.Text code>\n                                  Batch mode\n                                </Typography.Text>{' '}\n                                runs your code with multiple node & clusters to\n                                scale your idea\n                              </Typography.Text>\n                            </Flex>\n                          ),\n                          value: 'batch',\n                        },\n                      ]}\n                    />\n                    {/* <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    /> */}\n                  </Form.Item>\n                  <SessionNameFormItem />\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title={t('session.launcher.BatchModeConfig')}\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                          type: 'string',\n                        },\n                      ]}\n                    >\n                      <Input.TextArea autoSize />\n                    </Form.Item>\n                    <Form.Item label={t('session.launcher.SessionStartTime')}>\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox\n                            onChange={(e) => {\n                              if (\n                                e.target.checked &&\n                                _.isEmpty(\n                                  form.getFieldValue(['batch', 'scheduleDate']),\n                                )\n                              ) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  dayjs().add(2, 'minutes').toISOString(),\n                                );\n                              } else if (e.target.checked === false) {\n                                form.setFieldValue(\n                                  ['batch', 'scheduleDate'],\n                                  undefined,\n                                );\n                              }\n                            }}\n                          >\n                            {t('session.launcher.Enable')}\n                          </Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                  rules={[\n                                    {\n                                      // required: true,\n                                      validator: async (rule, value) => {\n                                        if (\n                                          value &&\n                                          dayjs(value).isBefore(dayjs())\n                                        ) {\n                                          return Promise.reject(\n                                            t(\n                                              'session.launcher.StartTimeMustBeInTheFuture',\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    localFormat\n                                    disabledDate={(value) => {\n                                      return value.isBefore(\n                                        dayjs().startOf('day'),\n                                      );\n                                    }}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label=\"Environment Variables\">\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ResourceAllocationFormItems enableNumOfSessions />\n                </Card>\n                <Card\n                  title={t('session.launcher.HPCOptimization')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item noStyle>\n                    <Flex direction=\"row\" gap={'sm'}>\n                      <Typography.Text>\n                        {t('session.launcher.SwitchOpenMPoptimization')}\n                      </Typography.Text>\n                      <Form.Item\n                        label={t('session.launcher.SwitchOpenMPoptimization')}\n                        name={['hpcOptimization', 'autoEnabled']}\n                        valuePropName=\"checked\"\n                        required\n                        noStyle\n                      >\n                        <Switch\n                          checkedChildren={'ON'}\n                          unCheckedChildren={'OFF'}\n                          onChange={(checked) => {\n                            if (checked) {\n                              form.setFieldsValue(\n                                _.pick(INITIAL_FORM_VALUES, [\n                                  'hpcOptimization',\n                                ]),\n                              );\n                            }\n                          }}\n                        />\n                      </Form.Item>\n                    </Flex>\n                  </Form.Item>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(prev, next) => {\n                      return (\n                        prev.hpcOptimization?.autoEnabled !==\n                        next.hpcOptimization?.autoEnabled\n                      );\n                    }}\n                  >\n                    {() => {\n                      const enabled = form.getFieldValue([\n                        'hpcOptimization',\n                        'autoEnabled',\n                      ]);\n                      return (\n                        <Row\n                          gutter={token.marginMD}\n                          style={{\n                            display: enabled ? 'none' : undefined,\n                            marginTop: token.marginMD,\n                          }}\n                        >\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenMPthreads')}\n                              name={['hpcOptimization', 'OMP_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={24} sm={12}>\n                            <Form.Item\n                              style={{ flex: 1 }}\n                              label={t('session.launcher.NumOpenBLASthreads')}\n                              name={['hpcOptimization', 'OPENBLAS_NUM_THREADS']}\n                              tooltip={\n                                <>\n                                  {t('session.launcher.OpenMPOptimization')}\n                                  <Trans\n                                    i18nKey={\n                                      'session.launcher.DescOpenMPOptimization'\n                                    }\n                                  />\n                                </>\n                              }\n                              required\n                            >\n                              <InputNumber\n                                min={0}\n                                max={1000}\n                                step={1}\n                                stringMode\n                                style={{ width: '100%' }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      );\n                    }}\n                  </Form.Item>\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('name').length > 0 ||\n                        form.getFieldError(['batch', 'command']).length > 0 ||\n                        form.getFieldError(['batch', 'scheduleDate']).length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.SessionType')}\n                          span={24}\n                        >\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        {!_.isEmpty(form.getFieldValue('name')) && (\n                          <Descriptions.Item\n                            label={t('session.launcher.SessionName')}\n                            span={24}\n                          >\n                            {form.getFieldValue('name')}\n                          </Descriptions.Item>\n                        )}\n                        {sessionType === 'batch' && (\n                          <>\n                            <Descriptions.Item\n                              label={t('session.launcher.StartUpCommand')}\n                              span={24}\n                            >\n                              <Input.TextArea\n                                readOnly\n                                autoSize\n                                value={form.getFieldValue(['batch', 'command'])}\n                              ></Input.TextArea>\n                            </Descriptions.Item>\n                            <Descriptions.Item\n                              label={t('session.launcher.ScheduleTimeSimple')}\n                              span={24}\n                            >\n                              {dayjs(\n                                form.getFieldValue(['batch', 'scheduleDate']),\n                              ).format('LLL (Z)')}\n                            </Descriptions.Item>\n                          </>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" column={2}>\n                        <Descriptions.Item\n                          label={t('session.launcher.Project')}\n                        >\n                          {currentProject.name}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.ResourceGroup')}>\n                          {form.getFieldValue('resourceGroup')}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={t('general.Image')} span={2}>\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Typography.Text copyable code>\n                              {form.getFieldValue('environments')?.version}\n                            </Typography.Text>\n                          </Flex>\n                        </Descriptions.Item>\n                        {form.getFieldValue('envvars')?.length > 0 && (\n                          <Descriptions.Item\n                            label={t('session.launcher.EnvironmentVariable')}\n                          >\n                            {form.getFieldValue('envvars')?.length ? (\n                              <SyntaxHighlighter\n                                style={darcula}\n                                codeTagProps={{\n                                  style: {\n                                    // fontFamily: 'monospace',\n                                  },\n                                }}\n                                // showLineNumbers\n                                customStyle={{\n                                  margin: 0,\n                                  width: '100%',\n                                }}\n                              >\n                                {_.map(\n                                  form.getFieldValue('envvars'),\n                                  (v: { variable: string; value: string }) =>\n                                    `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                                ).join('\\n')}\n                              </SyntaxHighlighter>\n                            ) : (\n                              <Typography.Text type=\"secondary\">\n                                -\n                              </Typography.Text>\n                            )}\n                          </Descriptions.Item>\n                        )}\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.ResourceAllocation')}\n                      status={\n                        _.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldError(['resource', key]).length > 0\n                          );\n                        })\n                          ? 'error'\n                          : // : _.some(form.getFieldValue('resource'), (v, key) => {\n                            //     //                         console.log(form.getFieldError(['resource', 'shmem']));\n                            //     // console.log(form.getFieldValue(['resource']));\n                            //     return (\n                            //       form.getFieldWarning(['resource', key]).length >\n                            //       0\n                            //     );\n                            //   })\n                            // ? 'warning'\n                            undefined\n                      }\n                      size=\"small\"\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Flex direction=\"column\" align=\"stretch\">\n                        {_.some(form.getFieldValue('resource'), (v, key) => {\n                          //                         console.log(form.getFieldError(['resource', 'shmem']));\n                          // console.log(form.getFieldValue(['resource']));\n                          return (\n                            form.getFieldWarning(['resource', key]).length > 0\n                          );\n                        }) && (\n                          <Alert\n                            type=\"warning\"\n                            showIcon\n                            message={t(\n                              'session.launcher.EnqueueComputeSessionWarning',\n                            )}\n                          />\n                        )}\n\n                        <Descriptions column={2}>\n                          <Descriptions.Item\n                            label={t(\n                              'session.launcher.ResourceAllocationPerContainer',\n                            )}\n                            span={2}\n                          >\n                            <Flex\n                              direction=\"row\"\n                              align=\"start\"\n                              gap={'sm'}\n                              wrap=\"wrap\"\n                              style={{ flex: 1 }}\n                            >\n                              {form.getFieldValue('allocationPreset') ===\n                              'custom' ? (\n                                // t('session.launcher.CustomAllocation')\n                                ''\n                              ) : (\n                                <Tag>\n                                  {form.getFieldValue('allocationPreset')}\n                                </Tag>\n                              )}\n\n                              <FormResourceNumbers form={form} />\n                              {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                            </Flex>\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.NumberOfContainer')}\n                          >\n                            {form.getFieldValue('cluster_size') === 1\n                              ? form.getFieldValue('num_of_sessions')\n                              : form.getFieldValue('cluster_size')}\n                          </Descriptions.Item>\n                          <Descriptions.Item\n                            label={t('session.launcher.ClusterMode')}\n                          >\n                            {form.getFieldValue('cluster_mode') ===\n                            'single-node'\n                              ? t('session.launcher.SingleNode')\n                              : t('session.launcher.MultiNode')}\n                          </Descriptions.Item>\n                        </Descriptions>\n                        <Card\n                          size=\"small\"\n                          type=\"inner\"\n                          title={t('session.launcher.TotalAllocation')}\n                        >\n                          <Flex direction=\"row\" gap=\"xxs\">\n                            <FormResourceNumbers\n                              form={form}\n                              containerCount={\n                                form.getFieldValue('cluster_size') === 1\n                                  ? form.getFieldValue('num_of_sessions')\n                                  : form.getFieldValue('cluster_size')\n                              }\n                            />\n                          </Flex>\n                        </Card>\n                      </Flex>\n                    </BAICard>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {form.getFieldValue('mounts')?.length > 0 ? (\n                        <Table\n                          rowKey=\"name\"\n                          size=\"small\"\n                          pagination={false}\n                          columns={[\n                            {\n                              dataIndex: 'name',\n                              title: t('data.folders.Name'),\n                            },\n                            {\n                              dataIndex: 'alias',\n                              title: t('session.launcher.FolderAlias'),\n                              render: (value, record) => {\n                                return _.isEmpty(value) ? (\n                                  <Typography.Text\n                                    type=\"secondary\"\n                                    style={{\n                                      opacity: 0.7,\n                                    }}\n                                  >\n                                    {`/home/work/${record.name}`}\n                                  </Typography.Text>\n                                ) : (\n                                  value\n                                );\n                              },\n                            },\n                          ]}\n                          dataSource={_.map(\n                            form.getFieldValue('mounts'),\n                            (v) => {\n                              return {\n                                name: v,\n                                alias:\n                                  form.getFieldValue('vfoldersAliasMap')?.[v],\n                              };\n                            },\n                          )}\n                        ></Table>\n                      ) : (\n                        <Alert\n                          type=\"warning\"\n                          showIcon\n                          message={t('session.launcher.NoFolderMounted')}\n                        />\n                      )}\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n\n                            {!_.isArray(form.getFieldValue('ports')) ||\n                            form.getFieldValue('ports')?.length === 0 ? (\n                              <Typography.Text type=\"secondary\">\n                                {t('general.None')}\n                              </Typography.Text>\n                            ) : null}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    {/* <Popconfirm\n                    title={t('session.CheckAgainDialog')}\n                    placement=\"topLeft\"\n                    okButtonProps={{\n                      danger: true,\n                    }}\n                    okText={t('button.Reset')}\n                    onConfirm={() => {\n                      // @ts-ignore\n                      form.resetFields({\n\n                      });\n                    }}\n                  >\n                    <Button ghost danger>\n                      {t('button.Reset')}\n                    </Button>\n                  </Popconfirm> */}\n                    {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        disabled\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep !== steps.length - 1 && (\n                      <Button onClick={moveToPreview}>Skip to Review</Button>\n                    )}\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                        disabled={isStartingSession}\n                      >\n                        Previous\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Button\n                        type=\"primary\"\n                        icon={<PlayCircleOutlined />}\n                        disabled={hasError}\n                        onClick={startSession}\n                        loading={isStartingSession}\n                      >\n                        {t('session.launcher.Launch')}\n                      </Button>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        Next <RightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.lg && (\n          <Affix\n            offsetTop={150}\n            // direction=\"column\"\n            style={{ zIndex: 2 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                // handle \"skip to review\" step specifically, because validation\n                if (nextCurrent === steps.length - 1) {\n                  moveToPreview();\n                } else {\n                  setCurrentStep(nextCurrent);\n                }\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Affix>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\nconst FormResourceNumbers: React.FC<{\n  form: FormInstance;\n  containerCount?: number;\n}> = ({ form, containerCount = 1 }) => {\n  return (\n    <>\n      {_.map(\n        _.omit(\n          form.getFieldValue('resource'),\n          'shmem',\n          'accelerator',\n          'acceleratorType',\n        ),\n        (value, type) => {\n          return (\n            <ResourceNumber\n              key={type}\n              // @ts-ignore\n              type={type}\n              value={\n                type === 'mem'\n                  ? (iSizeToSize(value, 'b')?.number || 0) * containerCount + ''\n                  : _.toNumber(value) * containerCount + ''\n              }\n              opts={{\n                shmem: form.getFieldValue('resource').shmem\n                  ? (iSizeToSize(form.getFieldValue('resource').shmem, 'b')\n                      ?.number || 0) * containerCount\n                  : undefined,\n              }}\n            />\n          );\n        },\n      )}\n      {_.isNumber(form.getFieldValue(['resource', 'accelerator'])) && (\n        <ResourceNumber\n          // @ts-ignore\n          type={form.getFieldValue(['resource', 'acceleratorType'])}\n          value={_.toString(\n            form.getFieldValue(['resource', 'accelerator']) * containerCount,\n          )}\n        />\n      )}\n    </>\n  );\n};\n// const SessionTypeItem: React.FC<{\n//   title: string;\n//   description?: string;\n// }> = ({ title, description }) => {\n//   const { token } = theme.useToken();\n//   return (\n//     <Flex\n//       direction=\"column\"\n//       style={{ padding: token.paddingXS }}\n//       align=\"stretch\"\n//     >\n//       <Typography.Title level={5}>{title}</Typography.Title>\n//       <Typography.Text\n//         type=\"secondary\"\n//         // @ts-ignore\n//         style={{ textWrap: 'wrap' }}\n//       >\n//         {description}\n//       </Typography.Text>\n//     </Flex>\n//   );\n// };\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nconst generateSessionId = () => {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 8; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text + '-session';\n};\n\nconst generateRandomString = () => {\n  let randNum = Math.floor(Math.random() * 52 * 52 * 52);\n\n  const parseNum = (num: number) => {\n    if (num < 26) return String.fromCharCode(65 + num);\n    else return String.fromCharCode(97 + num - 26);\n  };\n\n  let randStr = '';\n\n  for (let i = 0; i < 3; i++) {\n    randStr += parseNum(randNum % 52);\n    randNum = Math.floor(randNum / 52);\n  }\n\n  return randStr;\n};\n\nexport default SessionLauncherPage;\n"],"names":["manipulateGraphQLQueryWithClientDirectives","query","variables","arguments","length","undefined","isCompatibleWith","ast","parse","newAst","visit","Field","enter","node","_node$directives","directives","find","directive","_directive$arguments","_directive$arguments2","_directive$arguments3","_directive$arguments4","directiveName","name","value","firstArgName","firstArgValue","arg","version","kind","leave","_node$selectionSet$se","selectionSet","selections","Directive","includes","usedVariables","Variable","VariableDefinition","variableDefinition","variable","print","RelayFeatureFlags","ENABLE_RELAY_RESOLVERS","fetchFn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","_globalThis$backendai2","_globalThis$backendai3","transformedQuery","reqBody","reqInfo","result","wrap","_context","prev","next","globalThis","backendaiclient","Promise","resolve","document","addEventListener","onBackendAIConnected","removeEventListener","text","_globalThis$backendai","isManagerVersionCompatibleWith","newSignedRequest","_wrapWithPromise","catch","err","t0","sent","abrupt","stop","_x","_x2","apply","RelayEnvironment","Environment","network","Network","create","subscribeFn","store","Store","RecordSource","dayjs","weekday","localeData","localizedFormat","relativeTime","utc","timezone","WebComponentContext","React","ShadowRootContext","useShadowRoot","useWebComponentInfo","queryClient","QueryClient","defaultOptions","queries","suspense","refetchOnWindowFocus","retry","i18n","initReactI18next","use","Backend","init","backend","loadPath","lng","backendaioptions","get","fallbackLng","interpolation","escapeValue","react","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","RoutingEventHandler","navigate","useNavigate","useLayoutEffect","handleNavigate","e","detail","replace","children","styles","shadowRoot","dispatchEvent","cache","useMemo","createCache","_useCurrentLanguage","_useState","useState","_useState2","_slicedToArray","lang","_setLang","useTranslation","useEffect","setTimeout","changeLanguage","handler","_e$detail","_e$detail2","window","useCurrentLanguage","themeConfig","useCustomThemeConfig","componentValues","moveTo","path","params","_jsx","_Fragment","RelayEnvironmentProvider","environment","_jsxs","QueryClientProvider","client","Provider","ConfigProvider","getPopupContainer","triggerNode","parentNode","locale","ko_KR","en_US","theme","App","StyleProvider","container","Suspense","fallback","BrowserRouter","QueryParamProvider","adapter","ReactRouter6Adapter","options","v0","hash","v1","_ref$status","status","extraButtonTitle","onClickExtraButton","extra","style","cardProps","_objectWithoutProperties","_excluded","token","useToken","_extra","Button","type","icon","CloseCircleTwoTone","twoToneColor","colorError","WarningTwoTone","colorWarning","onClick","Card","_objectSpread","_","borderColor","colorSuccess","onChange","localFormat","pickerProps","_useControllableValue","useControllableValue","setControllableValue","DatePicker","_value$tz","newValue","format","tz","toISOString","formItemProps","props","inputRef","useRef","t","Form","List","fields","_ref2","add","remove","Flex","direction","gap","align","map","_ref3","index","key","restField","_excluded2","Item","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","reject","Input","ref","placeholder","MinusCircleOutlined","noStyle","current","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","Tag","color","Object","assign","_objectDestructuringEmpty","baiClient","useSuspendedBackendaiClient","label","tooltip","Trans","i18nKey","max","_config","maxCountForPreopenPorts","count","values","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","preventDefault","stopPropagation","width","suffixIcon","open","tokenSeparators","useCurrentKeyPairResourcePolicyLazyLoadQuery","fetchPolicy","_useUpdatableState3","useUpdatableState","_useUpdatableState4","fetchKey","updateFetchKey","_useKeyPairLazyLoadQu","accessKey","_useUpdatableState","_useUpdatableState2","useLazyLoadQuery","_hooksUsingRelay_KeyPairQuery","require","keypair","refresh","useCallback","useKeyPairLazyLoadQuery","keypairResourcePolicy","_hooksUsingRelay_KeyPairResourcePolicyQuery","resource_policy","keypair_resource_policy","_ref$dynamicSteps","dynamicSteps","_ref$units","units","_ref$disableAutoUnit","disableAutoUnit","_ref$min","min","_ref$max","inputNumberProps","defaultValue","_useControllableValue2","setValue","parseUnit","numValue","_unitFromValue","previousUnit","usePrevious","unit","_parseUnit","_parseUnit2","minNumValue","minUnit","_parseUnit3","_parseUnit4","maxNumValue","maxUnit","onInput","_e$target","target","test","InputNumber","concat","iSizeToSize","number","addonAfter","tabIndex","newUnit","onDropdownVisibleChange","Typography","Text","fontFamily","toUpperCase","cursor","step","onStep","afterStepValue","info","nextIndex","numValueNotNull","currentUnitIndex","indexOf","nextValue","nextUnit","nextNumValue","warn","extraMarks","hideSlider","otherProps","minGiB","maxGiB","valueGiB","minWidth","DynamicUnitInputNumber","visibility","height","Slider","trackStyle","backgroundColor","compareNumberWithUnits","railStyle","formatter","toFixed","newNumValue","marks","_defineProperty","colorTextSecondary","disabled","sliderProps","Math","round","selectProps","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","run","_useResourceSlots","useResourceSlots","resourceSlots","_useTransition","useTransition","_useTransition2","isPendingUpdate","_startTransition","resource_presets","_ResourcePresetSelectQuery","loading","display","EditOutlined","preset","slotsInfo","JSON","resource_slots","justify","opacity","slot","ResourceNumber","hideTooltip","showSearch","console","log","AUTOMATIC_DEFAULT_SHMEM","limitParser","limit","ResourceAllocationFormItems","_$find","_$find2","_checkPresetInfo$scal","_checkPresetInfo$scal2","_checkPresetInfo$scal3","_checkPresetInfo$scal4","_checkPresetInfo$scal5","_checkPresetInfo$scal6","_$min","_iSizeToSize","_iSizeToSize2","_iSizeToSize3","_iSizeToSize4","_checkPresetInfo$scal7","_checkPresetInfo$scal8","_checkPresetInfo$scal9","_checkPresetInfo$scal10","_iSizeToSize5","_checkPresetInfo$scal11","_checkPresetInfo$scal12","_$min2","_$find3","enableNumOfSessions","form","useFormInstance","acceleratorSlots","_useCurrentKeyPairRes","_useCurrentKeyPairRes3","currentProject","useCurrentProjectValue","currentResourceGroup","setCurrentResourceGroup","isPendingCheckResets","startCheckRestsTransition","currentImage","useWatch","preserve","currentImageAcceleratorLimits","resource_limits","currentImageMinM","checkPresetInfo","useTanQuery","queryKey","queryFn","resourcePreset","check","group","scaling_group","staleTime","data","sliderMinMaxLimit","cpu","maxCPUCoresPerContainer","keypair_limits","group_limits","scaling_groups","using","remaining","keypair_remaining","group_remaining","scaling_group_remaining","Number","MAX_SAFE_INTEGER","mem","addNumberWithUnits","maxMemoryPerContainer","numberFixed","shmem","_$filter$","_checkPresetInfo$scal13","_checkPresetInfo$scal14","_checkPresetInfo$scal15","_checkPresetInfo$scal16","_checkPresetInfo$scal17","_checkPresetInfo$scal18","_$min3","configName","supportedAcceleratorInfo","session","max_concurrent_sessions","concurrency_used","_sliderMinMaxLimit$cp","_iSizeToSize6","_iSizeToSize7","_sliderMinMaxLimit$sh","_iSizeToSize8","_sliderMinMaxLimit$me","_sliderMinMaxLimit$sh2","setFieldsValue","resource","setFieldValue","_$filter$2","nextImageSelectorType","acceleratorInfo","validateFields","runShmemAutomationRule","M_plus_S","ResourceGroupSelect","autoSelectDefault","marginXS","ResourcePresetSelect","_options$preset","_iSizeToSize9","_iSizeToSize10","_options$preset2","slots","numberUnit","shared_memory","margin","shouldUpdate","cur","allocationPreset","_sliderMinMaxLimit$cp2","_baiClient$_config","_sliderMinMaxLimit$cp3","_sliderMinMaxLimit$cp4","_sliderMinMaxLimit$cp5","_sliderMinMaxLimit$cp6","_sliderMinMaxLimit$cp7","_sliderMinMaxLimit$cp8","_sliderMinMaxLimit$cp9","_sliderMinMaxLimit$cp10","_sliderMinMaxLimit$cp11","placement","title","warningOnly","always_enqueue_compute_session","_validator","_baiClient$_config2","amount","InputNumberWithSlider","RemainingMark","_baiClient$_config3","_sliderMinMaxLimit$me5","_sliderMinMaxLimit$me6","_sliderMinMaxLimit$me7","_iSizeToSize12","_sliderMinMaxLimit$me8","_validator2","_callee2","_sliderMinMaxLimit$me2","_sliderMinMaxLimit$me3","_sliderMinMaxLimit$me4","_context2","size","_x3","_x4","_validator3","_callee3","_baiClient$_config4","_iSizeToSize11","_context3","_x5","_x6","DynamicUnitInputNumberWithSlider","addonBefore","valuePropName","Switch","checked","enabledAutomaticShmem","_sliderMinMaxLimit$sh3","hidden","dependencies","_validator4","_callee4","_getFieldValue","_getFieldValue2","_context4","_x7","_x8","_prev$resource","_next$resource","acceleratorType","cluster_size","_ref6","_sliderMinMaxLimit$cu","_baiClient$_config5","_sliderMinMaxLimit$cu2","_sliderMinMaxLimit$cu3","_sliderMinMaxLimit$cu4","_sliderMinMaxLimit$cu5","currentAcceleratorType","_validator5","_callee5","_baiClient$_config6","_context5","_x9","_x10","ACCELERATOR_UNIT_MAP","initialValue","popupMatchSelectWidth","_baiClient$_config7","_sliderMinMaxLimit$se","_sliderMinMaxLimit$se2","_sliderMinMaxLimit$se3","_sliderMinMaxLimit$se4","_sliderMinMaxLimit$se5","_sliderMinMaxLimit$se6","_sliderMinMaxLimit$se7","_sliderMinMaxLimit$se8","_validator6","_callee6","_baiClient$_config8","_context6","_x11","_x12","supports","Divider","colorBorder","Row","gutter","marginMD","Col","xs","Radio","cluster_mode","_sliderMinMaxLimit$cp12","_baiClient$_config9","_derivedClusterSizeMa","_derivedClusterSizeMa2","derivedClusterSizeMaxLimit","max_containers_per_session","clusterUnit","_validator7","_callee7","_sliderMinMaxLimit$cp13","_context7","_x13","_x14","position","top","transform","CaretDownOutlined","toString","allowClear","_ref$vFolderFrgmt","vFolderFrgmt","permission","vFolder","useFragment","_VFolderPermissionTag_VFolder","tagValues","r","w","d","perm","hasPermission","compact","DoubleTag","filter","_ref$showAliasInput","showAliasInput","_ref$selectedRowKeys","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","_ref$aliasBasePath","aliasBasePath","controlledAliasMap","aliasMap","onChangeAliasMap","_ref$rowKey","rowKey","tableProps","getRowKey","record","setSelectedRowKeys","_useControllableValue3","_useControllableValue4","setAliasMap","_Form$useForm","useForm","internalForm","startsWith","slice","baiRequestWithPromise","useBaiSignedRequestWithPromise","isPendingRefetch","startRefetchTransition","allFolderList","method","url","id","searchKey","setSearchKey","displayingFolders","vf","handleAliasUpdate","then","finally","getFieldsValue","k","mapAliasToPath","input","columns","fontWeight","Tooltip","zIndex","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","TextHighlighter","keyword","allAliasPathMap","reduce","fixed","usage_mode","UserOutlined","group_name","row","VFolderPermissionTag","created_at","ReloadOutlined","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","_toConsumableArray","arr","trigger","VFolderTable","pagination","INITIAL_FORM_VALUES","sessionType","hpcOptimization","autoEnabled","OMP_NUM_THREADS","OPENBLAS_NUM_THREADS","batch","enabled","command","scheduleDate","envvars","accelerator","num_of_sessions","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","FormResourceNumbers","_ref5","_ref5$containerCount","containerCount","opts","generateSessionId","possible","charAt","floor","random","generateRandomString","num","randNum","randStr","String","fromCharCode","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue6","_form$getFieldValue8","sessionMode","isStartingSession","setIsStartingSession","_useQueryParams","useQueryParams","formValues","redirectTo","StringParam","_useQueryParams2","_useQueryParams2$","currentStep","formValuesFromQueryParams","setQuery","syncFormToURLWithDebounce","useDebounceFn","setCurrentStep","nextStep","screens","Grid","useBreakpoint","stringify","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","moveToPreview","padding","paddingSM","justifyContent","Breadcrumb","items","href","maxWidth","Title","level","marginTop","Popconfirm","description","onConfirm","resetFields","okText","okButtonProps","danger","paddingRight","paddingLeft","BlockOutlined","onFormChange","layout","requiredMark","initialValues","className","strong","code","SessionNameFormItem","TextArea","autoSize","Checkbox","_prev$batch","_next$batch","_form$getFieldValue","isBefore","DatePickerISO","showTime","disabledDate","startOf","ErrorBoundary","fallbackRender","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","checkedChildren","unCheckedChildren","_prev$hpcOptimization","_next$hpcOptimization","sm","stringMode","VFolderTableFromItem","PortSelectFormItem","BAICard","getFieldError","findIndex","Descriptions","span","readOnly","idx","column","ImageMetaIcon","image","copyable","SyntaxHighlighter","darcula","codeTagProps","customStyle","join","getFieldWarning","Alert","showIcon","_form$getFieldValue7","alias","SaveOutlined","LeftOutlined","PlayCircleOutlined","_values$environments$","_values$environments$2","kernelName","architecture","sessionInfo","sessionPromises","environments","split","sessionName","config","startsAt","startupCommand","domain","domainName","resourceGroup","maxWaitSeconds","mounts","mount_map","vfoldersAliasMap","env","preopen_ports","ports","formattedSessionName","createIfNotExists","res","created","warning","all","firstSession","appOptions","kernelId","sessionId","service_info","servicePorts","Array","isArray","appLauncher","showLauncher","ghost","RightOutlined","lg","Affix","offsetTop","Steps","nextCurrent","s"],"sourceRoot":""}